using EOfficeBNILAPI.Models;
using EOfficeBNILAPI.Models.Table;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Data;
using System.Diagnostics.Metrics;
using System.Globalization;
using System.IO.IsolatedStorage;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Numerics;
using System.Reflection;
using System.Reflection.Metadata;
using System.Runtime.Intrinsics.Arm;
using System.Security.AccessControl;
using System.Security.Cryptography.Xml;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using X.PagedList;
using static iTextSharp.text.pdf.AcroFields;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using static Microsoft.Extensions.Logging.EventSource.LoggingEventSource;
using static System.Net.Mime.MediaTypeNames;

namespace EOfficeBNILAPI.DataAccess
{
    public class DataAccessProvider : IDataAccessProvider
    {
        private readonly DataContext db;
        GeneralOutputModel output = new GeneralOutputModel();

        private const int pageLength = 10;

        public DataAccessProvider(DataContext _db)
        {
            db = _db;
        }

        #region Login
        public LoginResponse GetDetailUserLoginToken(string nip, string password)
        {
            try
            {
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                on tp.ID_UNIT equals u.ID_UNIT
                            join b in db.tm_branch.Where(p => p.STATUS_CODE == 1)
                                on u.ID_BRANCH equals b.ID_BRANCH
                            join a1 in db.tm_user
                                on tp.PARENT_ID equals a1.ID_POSITION into a2
                            from a in a2.DefaultIfEmpty()
                            join diru in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                on u.PARENT_ID equals diru.ID_UNIT
                            join tpdir in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on diru.ID_UNIT equals tpdir.ID_UNIT
                            join adir in db.tm_user
                                on tpdir.ID_POSITION equals adir.ID_POSITION
                            where tu.NIP == nip && tu.PASSWORD == password
                            select new LoginResponse
                            {
                                IdUser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                Password = tu.PASSWORD,
                                IdPosition = tu.ID_POSITION,
                                PositionName = tp.POSITION_NAME,
                                parentIdPosition = tp.PARENT_ID,
                                parentIdUser = a.ID_USER,
                                IdGroup = tu.ID_GROUP,
                                IdUnit = tp.ID_UNIT,
                                UnitName = u.UNIT_NAME,
                                IdBranch = u.ID_BRANCH,
                                BranchName = b.BRANCH_NAME,
                                unitCode = u.UNIT_CODE,
                                email = tu.EMAIL,
                                phone = tu.PHONE,
                                directorIdUnit = diru.ID_UNIT,
                                directorUnitName = diru.UNIT_NAME,
                                directorUnitCode = diru.UNIT_CODE
                            }).FirstOrDefault();

                return data;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion


        #region Document Mailing Room
        public GeneralOutputModel GetDataDocument(int pageNumber, Guid id_unit, Guid id_branch)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = new List<DocumentOutput>();
                Guid id_unit_session = new Guid("d0d02aa8-7a27-ed11-89b0-3cf011a1a981");
                Guid id_branch_session = new Guid("8609d446-6024-ed11-89ae-3cf011a1a981");
                var getDocument = (from td in db.tr_document.OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join tdr in db.tr_document_receiver.Where(p => p.ID_UNIT == id_unit)
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == id_branch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   join cu in db.tm_user
                                        on td.CREATED_BY equals cu.ID_USER
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = tdr.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       receiverDivisionName = tu.UNIT_NAME,
                                       createdByName = cu.FULLNAME
                                   }).ToPagedList(pageNumber, pageLength);
                if (id_unit == id_unit_session && id_branch == id_branch_session)
                {
                    getDocument = (from td in db.tr_document.OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join tdr in db.tr_document_receiver
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == id_branch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on td.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   join cu in db.tm_user
                                        on td.CREATED_BY equals cu.ID_USER
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = td.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       receiverDivisionName = tu.UNIT_NAME,
                                       createdByName = cu.FULLNAME
                                   }).ToPagedList(pageNumber, pageLength);
                }
                foreach (var item in getDocument)
                {
                    //var dataRecevier = (from tdr in db.tr_document_receiver.Where(p => p.ID_DOCUMENT == item.ID_DOCUMENT).OrderBy(p => p.CREATED_ON)
                    //                    join u in db.tm_unit
                    //                        on tdr.ID_UNIT equals u.ID_UNIT
                    //                    join s in db.tm_user
                    //                        on tdr.ID_USER_TU equals s.ID_USER
                    //                    join st in db.tm_stringmap on new
                    //                    {
                    //                        a = "tr_document_receiver",
                    //                        b = "STATUS_CODE",
                    //                        c = tdr.STATUS_CODE
                    //                    } equals new
                    //                    {
                    //                        a = st.OBJECTNAME,
                    //                        b = st.ATTRIBUTENAME,
                    //                        c = st.ATTRIBUTEVALUE
                    //                    }
                    //                    select new DocumentReceiverOutput
                    //                    {
                    //                        idDocumentReceiver = tdr.ID_DOCUMENT_RECEIVER,
                    //                        idDocument = tdr.ID_DOCUMENT,
                    //                        idUnit = u.ID_UNIT,
                    //                        unitName = u.UNIT_NAME,
                    //                        idUserTu = tdr.ID_USER_TU,
                    //                        tuNip = s.NIP,
                    //                        tuName = s.FULLNAME
                    //                    }).ToList();
                    //var dataLog = (from tdl in db.tr_document_log.Where(p => p.ID_DOCUMENT == item.ID_DOCUMENT).OrderBy(p => p.CREATED_ON)
                    //               select new DocumentLogsOutput
                    //               {
                    //                   idLogDocument = tdl.ID_LOG_DOCUMENT,
                    //                   idDocument = tdl.ID_DOCUMENT,
                    //                   description = tdl.DESCRIPTION,
                    //                   comment = tdl.COMMENT,
                    //                   createdOn = tdl.CREATED_ON
                    //               }).ToList();

                    data.Add(new DocumentOutput
                    {
                        idDocument = item.idDocument,
                        documentType = item.documentType,
                        documentTypeValue = item.documentTypeValue,
                        trackingNumber = item.trackingNumber,
                        qtyTotal = item.qtyTotal,
                        senderName = item.senderName,
                        receivedDate = item.receivedDate,
                        statusCode = item.statusCode,
                        statusCodeValue = item.statusCodeValue,
                        receiverDivisionName = item.receiverDivisionName,
                        createdByName = item.createdByName
                        //distributionTime = item.DISTRIBUTION_TIME,
                        //documentReceiver = dataRecevier,
                        //documentLog = dataLog
                    });
                }
                output.Status = "OK";
                output.Result = data;
                output.PageCount = getDocument.PageCount;
                output.PageNumber = getDocument.PageNumber;
                output.Message = "Success";
                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.PageCount = 0;
                output.PageNumber = pageNumber;
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetDataDocumentWeb(SessionUser sessionUser, ParamGetDocumentWeb pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                //var data = new List<DocumentOutput>();
                Guid id_unit_mailing = new Guid("d0d02aa8-7a27-ed11-89b0-3cf011a1a981");
                Guid id_branch_pusat = new Guid("8609d446-6024-ed11-89ae-3cf011a1a981");
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from td in db.tr_document.OrderByDescending(p => p.CREATED_ON)
                                   join tdr in db.tr_document_receiver.Where(p => p.ID_UNIT == sessionUser.idUnit && p.ID_USER_TU == sessionUser.idUser)
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   join cu in db.tm_user
                                        on td.CREATED_BY equals cu.ID_USER
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       returnNumber = tdr.RETURN_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = tdr.STATUS_CODE,
                                       statusCodeDocument = td.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       modifiedOn = td.MODIFIED_ON,
                                       receiverDivisionName = tu.UNIT_NAME,
                                       createdByName = cu.FULLNAME
                                   }).AsQueryable();
                if (sessionUser.idGroup == "S")
                {
                    getDocument = (from td in db.tr_document.OrderByDescending(p => p.CREATED_ON)
                                   join tdr in db.tr_document_receiver.Where(p => p.ID_USER_TU == sessionUser.idUser)
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   join cu in db.tm_user
                                        on td.CREATED_BY equals cu.ID_USER
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       returnNumber = tdr.RETURN_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = tdr.STATUS_CODE,
                                       statusCodeDocument = td.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       modifiedOn = td.MODIFIED_ON,
                                       receiverDivisionName = tu.UNIT_NAME,
                                       createdByName = cu.FULLNAME
                                   }).AsQueryable();
                }

                if (sessionUser.idUnit == id_unit_mailing && sessionUser.idBranch == id_branch_pusat && sessionUser.idGroup == "M")
                {
                    getDocument = (from td in db.tr_document.OrderByDescending(p => p.CREATED_ON)
                                   join tdr in db.tr_document_receiver
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == id_branch_pusat)
                                       on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   join cu in db.tm_user
                                        on td.CREATED_BY equals cu.ID_USER
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       returnNumber = tdr.RETURN_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = tdr.STATUS_CODE,
                                       statusCodeDocument = td.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       modifiedOn = td.MODIFIED_ON,
                                       receiverDivisionName = tu.UNIT_NAME,
                                       createdByName = cu.FULLNAME
                                   }).AsQueryable();
                }
                recordsTotal = getDocument.Count();

                // search data when search value found

                if (IsDateTime(pr.searchValue))
                {
                    var searchByDate = getDocument.ToList();
                    DateTime searchValDate = Convert.ToDateTime(pr.searchValue);
                    searchByDate = searchByDate.Where(p => p.receivedDate.Date == searchValDate).ToList();
                    getDocument = searchByDate.AsQueryable();
                }
                if (!string.IsNullOrEmpty(pr.searchValue) && !IsDateTime(pr.searchValue))
                {
                    getDocument = getDocument.Where(x => x.documentTypeValue.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.trackingNumber.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.returnNumber.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.senderName.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.receiverDivisionName.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.statusCodeValue.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.createdByName.ToLower().Contains(pr.searchValue.ToLower()));
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var documentFinal = getDocument.OrderBy(p => p.statusCode).OrderByDescending(p => p.receivedDate).ThenByDescending(p => p.modifiedOn).Skip(skip).Take(pr.pageSize).ToList();
                var docFormatFinal = new List<DocumentOutput>();
                var currentIdDoc = Guid.Empty;
                foreach (var item in documentFinal)
                {
                    if ((item.statusCode == 3 && item.statusCodeDocument == 3) || (item.statusCode == 4 && item.statusCodeDocument == 4))
                    {
                        var prevDoc = docFormatFinal.Where(p => p.idDocument == item.idDocument).ToList();
                        if (prevDoc.Count() == 0)
                        {
                            docFormatFinal.Add(new DocumentOutput
                            {
                                idDocument = item.idDocument,
                                documentType = item.documentType,
                                qtyTotal = item.qtyTotal,
                                trackingNumber = item.trackingNumber,
                                returnNumber = item.returnNumber,
                                receivedDate = item.receivedDate,
                                receivedDateString = Convert.ToDateTime(item.receivedDate).ToString("dd-MM-yyyy HH:mm"),
                                senderName = item.senderName,
                                distributionTime = item.distributionTime,
                                documentTypeValue = item.documentTypeValue,
                                statusCode = item.statusCode,
                                statusCodeDocument = item.statusCodeDocument,
                                statusCodeValue = item.statusCodeValue,
                                modifiedOn = item.modifiedOn,
                                editableData = 1,
                                receiverDivisionName = item.receiverDivisionName,
                                createdByName = item.createdByName
                            });
                        }
                        else
                        {
                            foreach (var item2 in prevDoc)
                            {
                                item2.editableData = 0;
                            }
                            docFormatFinal.Add(new DocumentOutput
                            {
                                idDocument = item.idDocument,
                                documentType = item.documentType,
                                qtyTotal = item.qtyTotal,
                                trackingNumber = item.trackingNumber,
                                returnNumber = item.returnNumber,
                                receivedDate = item.receivedDate,
                                receivedDateString = Convert.ToDateTime(item.receivedDate).ToString("dd-MM-yyyy HH:mm"),
                                senderName = item.senderName,
                                distributionTime = item.distributionTime,
                                documentTypeValue = item.documentTypeValue,
                                statusCode = item.statusCode,
                                statusCodeDocument = item.statusCodeDocument,
                                statusCodeValue = item.statusCodeValue,
                                modifiedOn = item.modifiedOn,
                                editableData = 1,
                                receiverDivisionName = item.receiverDivisionName,
                                createdByName = item.createdByName
                            });
                        }
                        continue;
                    }
                    docFormatFinal.Add(new DocumentOutput
                    {
                        idDocument = item.idDocument,
                        documentType = item.documentType,
                        qtyTotal = item.qtyTotal,
                        trackingNumber = item.trackingNumber,
                        returnNumber = item.returnNumber,
                        receivedDate = item.receivedDate,
                        receivedDateString = Convert.ToDateTime(item.receivedDate).ToString("dd-MM-yyyy HH:mm"),
                        senderName = item.senderName,
                        distributionTime = item.distributionTime,
                        documentTypeValue = item.documentTypeValue,
                        statusCode = item.statusCode,
                        statusCodeDocument = item.statusCodeDocument,
                        statusCodeValue = item.statusCodeValue,
                        modifiedOn = item.modifiedOn,
                        editableData = 0,
                        receiverDivisionName = item.receiverDivisionName,
                        createdByName = item.createdByName
                    });
                    //currentIdDoc = item.idDocument;
                }
                DocumentOutputWeb result = new DocumentOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = docFormatFinal.OrderBy(p => p.statusCode).OrderByDescending(p => p.receivedDate).ThenByDescending(p => p.modifiedOn).ToList();

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel InsertDataDocument(ParamInsertDocument pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                //check if tracking number exist
                var existTrackNumber = db.tr_document.Where(p => p.TRACKING_NUMBER == pr.trackingNumber).FirstOrDefault();
                if (existTrackNumber != null)
                {
                    output.Status = "NG";
                    output.Message = "Tracking Number " + pr.trackingNumber + " Already Exist";

                    return output;
                }

                //get string mapping
                var getStringMap = GetStringMapping("tr_document", "DOCUMENT_TYPE", pr.documentType);
                if (getStringMap == "NG")
                {
                    output.Status = "NG";
                    output.Message = "StringMap Not Found!";

                    return output;
                }
                if (pr.trackingNumber == null || pr.trackingNumber == "")
                {
                    pr.trackingNumber = GenerateNoDoc(1, "01", sessionUser);
                }
                //insert document
                Tr_Document_Table tdt = new Tr_Document_Table();
                tdt.DOCUMENT_TYPE = pr.documentType;
                tdt.TRACKING_NUMBER = pr.trackingNumber;
                tdt.QTY_TOTAL = Convert.ToInt32(pr.qtyTotal);
                tdt.SENDER_NAME = pr.senderName;
                tdt.DOC_RECEIVER = pr.docReceiver;
                tdt.RECEIVED_DATE = DateTime.Now;
                //tdt.DISTRIBUTION_TIME = pr.distributionTime;
                tdt.STATUS_CODE = 1;
                tdt.CREATED_ON = DateTime.Now;
                tdt.CREATED_BY = sessionUser.idUser;
                tdt.MODIFIED_ON = DateTime.Now;
                tdt.MODIFIED_BY = sessionUser.idUser;

                db.tr_document.Add(tdt);
                db.SaveChanges();

                if (tdt.ID_DOCUMENT != null)
                {
                    //insert receiver

                    Tr_Document_Receiver_Table tdr = new Tr_Document_Receiver_Table();
                    tdr.ID_DOCUMENT = tdt.ID_DOCUMENT;
                    tdr.ID_UNIT = pr.idUnit;
                    tdr.ID_USER_TU = pr.idUserTu;
                    tdr.STATUS_CODE = 1;
                    tdr.CREATED_ON = DateTime.Now;
                    tdr.CREATED_BY = sessionUser.idUser;
                    tdr.MODIFIED_ON = DateTime.Now;
                    tdr.MODIFIED_BY = sessionUser.idUser;

                    db.tr_document_receiver.Add(tdr);
                    db.SaveChanges();

                    //insert log
                    Tr_Document_Log_Table tdl = new Tr_Document_Log_Table();
                    tdl.ID_DOCUMENT = tdt.ID_DOCUMENT;
                    tdl.DESCRIPTION = "Dokumen Masuk (" + getStringMap + ") dibuat oleh " + sessionUser.nip + "-" + sessionUser.nama;
                    tdl.COMMENT = pr.comment;
                    tdl.CREATED_ON = DateTime.Now;
                    tdl.CREATED_BY = sessionUser.idUser;
                    tdl.MODIFIED_ON = DateTime.Now;
                    tdl.MODIFIED_BY = sessionUser.idUser;

                    db.tr_document_log.Add(tdl);
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Result = tdt.ID_DOCUMENT;
                    output.Message = "Insert Success";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Insert Document";
                }
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetDocumentByTrackingNumber(string trackingNumber)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                //check if tracking number exist
                var existTrackNumber = db.tr_document.Where(p => p.TRACKING_NUMBER == trackingNumber).FirstOrDefault();
                if (existTrackNumber != null)
                {
                    output.Status = "NG";
                    output.Message = "Tracking Number " + trackingNumber + " Already Exist";

                    return output;
                }
                else
                {
                    output.Status = "OK";
                    output.Message = "Tracking Number " + trackingNumber + " Available";

                    return output;
                }
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetAdminDivision()
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var getUnit = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP == "B")
                               join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on u.ID_POSITION equals tp.ID_POSITION
                               join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                on tp.ID_UNIT equals tu.ID_UNIT
                               select new AdminDivisionOutput
                               {
                                   idUnit = tu.ID_UNIT,
                                   unitName = tu.UNIT_NAME,
                                   idUser = u.ID_USER,
                                   userName = u.FULLNAME,
                                   idPosition = tp.ID_POSITION,
                                   positionName = tp.POSITION_NAME
                               }).Union(from tu in db.tm_unit.Where(p => p.UNIT_CODE == "CFO" || p.UNIT_CODE == "DCM" || p.UNIT_CODE == "DNC" || p.UNIT_CODE == "CEO" || p.UNIT_CODE == "BOD" || p.UNIT_CODE == "KOM" || p.UNIT_CODE == "DPS")
                                        join tp in db.tm_position
                                            on tu.ID_UNIT equals tp.ID_UNIT
                                        join tps in db.tr_setingseketaris
                                            on tp.ID_POSITION equals tps.ID_POSITION_DIRKOM
                                        join u in db.tm_user.Where(p => p.ID_GROUP == "S")
                                            on tps.ID_POSITION_SEKETARIS equals u.ID_POSITION
                                        select new AdminDivisionOutput
                                        {
                                            idUnit = tu.ID_UNIT,
                                            unitName = tu.UNIT_NAME,
                                            idUser = u.ID_USER,
                                            userName = u.FULLNAME,
                                            idPosition = tps.ID_POSITION_SEKETARIS,
                                            positionName = tp.POSITION_NAME
                                        }).ToList();

                //join tp in db.tm_position
                //    on tu.ID_UNIT equals tp.ID_UNIT
                //join tps in db.tm_position
                //    on tp.ID_POSITION equals tps.PARENT_ID
                //join u in db.tm_user.Where(p => p.ID_GROUP == "S")
                //    on tps.ID_POSITION equals u.ID_POSITION
                //select new AdminDivisionOutput
                //{
                //    idUnit = tu.ID_UNIT,
                //    unitName = tu.UNIT_NAME,
                //    idUser = u.ID_USER,
                //    userName = u.FULLNAME,
                //    idPosition = tps.ID_POSITION,
                //    positionName = tps.POSITION_NAME
                //}).ToList();


                output.Status = "OK";
                output.Result = getUnit;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetPosition()
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var getPosition = (from po in db.tm_position
                                   select new PositionOuput
                                   {
                                       idposition = po.ID_POSITION,
                                       Positionname = po.POSITION_NAME,
                                   }).ToList();

                output.Status = "OK";
                output.Result = getPosition;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailDocument(ParamGetDetailDocument pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                DocumentOutput data = new DocumentOutput();
                Guid id_unit_session = new Guid("d0d02aa8-7a27-ed11-89b0-3cf011a1a981");//unit mailingroom;
                var getDocument = (from td in db.tr_document.Where(p => p.ID_DOCUMENT == pr.idDocument).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join tdr in db.tr_document_receiver
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "STATUS_CODE",
                                       c = tdr.STATUS_CODE
                                   } equals new
                                   {
                                       a = st.OBJECTNAME,
                                       b = st.ATTRIBUTENAME,
                                       c = st.ATTRIBUTEVALUE
                                   }
                                   join dt in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "DOCUMENT_TYPE",
                                       c = td.DOCUMENT_TYPE
                                   } equals new
                                   {
                                       a = dt.OBJECTNAME,
                                       b = dt.ATTRIBUTENAME,
                                       c = dt.ATTRIBUTEVALUE
                                   }
                                   where tdr.ID_UNIT == sessionUser.idUnit || sessionUser.idUnit == id_unit_session
                                   select new
                                   {
                                       td.ID_DOCUMENT,
                                       td.DOCUMENT_TYPE,
                                       td.TRACKING_NUMBER,
                                       td.QTY_TOTAL,
                                       td.SENDER_NAME,
                                       td.DOC_RECEIVER,
                                       td.RECEIVED_DATE,
                                       td.DISTRIBUTION_TIME,
                                       tdr.STATUS_CODE,
                                       STATUS_CODE_VALUE = st.VALUE,
                                       DOCUMENT_TYPE_VALUE = dt.VALUE
                                   }).FirstOrDefault();
                if (sessionUser.idGroup == "S")
                {
                    getDocument = (from td in db.tr_document.Where(p => p.ID_DOCUMENT == pr.idDocument).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join tdr in db.tr_document_receiver.Where(p => p.ID_USER_TU == sessionUser.idUser)
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "STATUS_CODE",
                                       c = tdr.STATUS_CODE
                                   } equals new
                                   {
                                       a = st.OBJECTNAME,
                                       b = st.ATTRIBUTENAME,
                                       c = st.ATTRIBUTEVALUE
                                   }
                                   join dt in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "DOCUMENT_TYPE",
                                       c = td.DOCUMENT_TYPE
                                   } equals new
                                   {
                                       a = dt.OBJECTNAME,
                                       b = dt.ATTRIBUTENAME,
                                       c = dt.ATTRIBUTEVALUE
                                   }
                                   select new
                                   {
                                       td.ID_DOCUMENT,
                                       td.DOCUMENT_TYPE,
                                       td.TRACKING_NUMBER,
                                       td.QTY_TOTAL,
                                       td.SENDER_NAME,
                                       td.DOC_RECEIVER,
                                       td.RECEIVED_DATE,
                                       td.DISTRIBUTION_TIME,
                                       tdr.STATUS_CODE,
                                       STATUS_CODE_VALUE = st.VALUE,
                                       DOCUMENT_TYPE_VALUE = dt.VALUE
                                   }).FirstOrDefault();
                }
                if (getDocument != null)
                {
                    //insert log baca
                    var description = "Dokumen Masuk (" + getDocument.DOCUMENT_TYPE_VALUE + ") dibaca oleh " + sessionUser.nip + "-" + sessionUser.nama;
                    var insertLogDocument = InsertLogDocument(getDocument.ID_DOCUMENT, sessionUser, description, "");
                    if (!insertLogDocument)
                    {
                        output.Status = "NG";
                        output.Message = "Error Insert Log!";
                        return output;
                    }

                    var dataRecevier = (from tdr in db.tr_document_receiver.Where(p => p.ID_DOCUMENT == getDocument.ID_DOCUMENT).OrderBy(p => p.CREATED_ON)
                                        join u in db.tm_unit
                                            on tdr.ID_UNIT equals u.ID_UNIT
                                        join s in db.tm_user
                                            on tdr.ID_USER_TU equals s.ID_USER
                                        join st in db.tm_stringmap on new
                                        {
                                            a = "tr_document_receiver",
                                            b = "STATUS_CODE",
                                            c = tdr.STATUS_CODE
                                        } equals new
                                        {
                                            a = st.OBJECTNAME,
                                            b = st.ATTRIBUTENAME,
                                            c = st.ATTRIBUTEVALUE
                                        }
                                        select new DocumentReceiverOutput
                                        {
                                            idDocumentReceiver = tdr.ID_DOCUMENT_RECEIVER,
                                            idDocument = tdr.ID_DOCUMENT,
                                            idUnit = u.ID_UNIT,
                                            unitName = u.UNIT_NAME,
                                            idUserTu = tdr.ID_USER_TU,
                                            tuNip = s.NIP,
                                            tuName = s.FULLNAME,
                                            statusCode = tdr.STATUS_CODE,
                                            receivedDate = tdr.RECEIVED_DATE,
                                            receivedDocument = tdr.RECEIVED_DOCUMENT,
                                            returnedDocument = tdr.RETURNED_DOCUMENT,
                                            returnNumber = tdr.RETURN_NUMBER
                                        }).ToList();
                    var dataLog = (from tdl in db.tr_document_log.Where(p => p.ID_DOCUMENT == getDocument.ID_DOCUMENT).OrderByDescending(p => p.CREATED_ON)
                                   select new DocumentLogsOutput
                                   {
                                       idLogDocument = tdl.ID_LOG_DOCUMENT,
                                       idDocument = tdl.ID_DOCUMENT,
                                       description = tdl.DESCRIPTION,
                                       comment = tdl.COMMENT,
                                       createdOn = tdl.CREATED_ON
                                   }).ToList();

                    data.idDocument = getDocument.ID_DOCUMENT;
                    data.documentType = getDocument.DOCUMENT_TYPE;
                    data.documentTypeValue = getDocument.DOCUMENT_TYPE_VALUE;
                    data.trackingNumber = getDocument.TRACKING_NUMBER;
                    data.qtyTotal = getDocument.QTY_TOTAL;
                    data.senderName = getDocument.SENDER_NAME;
                    data.docReceiver = getDocument.DOC_RECEIVER;
                    data.receivedDate = getDocument.RECEIVED_DATE;
                    data.distributionTime = getDocument.DISTRIBUTION_TIME;
                    data.statusCode = getDocument.STATUS_CODE;
                    data.statusCodeValue = getDocument.STATUS_CODE_VALUE;
                    if (sessionUser.idGroup == "S")
                    {
                        data.currentDocumentReceiver = dataRecevier.Where(p => p.idUserTu == sessionUser.idUser).FirstOrDefault();
                    }
                    else
                    {
                        data.currentDocumentReceiver = dataRecevier.Where(p => p.idUnit == sessionUser.idUnit && p.idUserTu == sessionUser.idUser).FirstOrDefault();
                    }
                    data.documentReceiver = dataRecevier;
                    data.documentLog = dataLog;

                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Success";

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "No Data Found!";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetDetailDocumentDistribution(ParamGetDetailDocumentReceiver pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                DocumentDistributionOutput data = new DocumentDistributionOutput();

                var getDocument = (from tdr in db.tr_document_receiver.Where(p => p.ID_DOCUMENT_RECEIVER == pr.idDocumentReceiver)
                                   join td in db.tr_document
                                        on tdr.ID_DOCUMENT equals td.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "STATUS_CODE",
                                       c = td.STATUS_CODE
                                   } equals new
                                   {
                                       a = st.OBJECTNAME,
                                       b = st.ATTRIBUTENAME,
                                       c = st.ATTRIBUTEVALUE
                                   }
                                   join dt in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "DOCUMENT_TYPE",
                                       c = td.DOCUMENT_TYPE
                                   } equals new
                                   {
                                       a = dt.OBJECTNAME,
                                       b = dt.ATTRIBUTENAME,
                                       c = dt.ATTRIBUTEVALUE
                                   }
                                   where tdr.ID_UNIT == sessionUser.idUnit
                                   select new
                                   {
                                       td.ID_DOCUMENT,
                                       td.DOCUMENT_TYPE,
                                       td.TRACKING_NUMBER,
                                       tdr.RETURN_NUMBER,
                                       tdr.ID_DOCUMENT_RECEIVER,
                                       tdr.RECEIVED_DOCUMENT,
                                       td.QTY_TOTAL,
                                       td.SENDER_NAME,
                                       td.DOC_RECEIVER,
                                       td.RECEIVED_DATE,
                                       td.DISTRIBUTION_TIME,
                                       td.STATUS_CODE,
                                       STATUS_CODE_VALUE = st.VALUE,
                                       DOCUMENT_TYPE_VALUE = dt.VALUE
                                   }).FirstOrDefault();
                if (sessionUser.idGroup == "S")
                {
                    getDocument = (from tdr in db.tr_document_receiver.Where(p => p.ID_DOCUMENT_RECEIVER == pr.idDocumentReceiver && p.ID_USER_TU == sessionUser.idUser)
                                   join td in db.tr_document
                                        on tdr.ID_DOCUMENT equals td.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "STATUS_CODE",
                                       c = td.STATUS_CODE
                                   } equals new
                                   {
                                       a = st.OBJECTNAME,
                                       b = st.ATTRIBUTENAME,
                                       c = st.ATTRIBUTEVALUE
                                   }
                                   join dt in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "DOCUMENT_TYPE",
                                       c = td.DOCUMENT_TYPE
                                   } equals new
                                   {
                                       a = dt.OBJECTNAME,
                                       b = dt.ATTRIBUTENAME,
                                       c = dt.ATTRIBUTEVALUE
                                   }
                                   //where tdr.ID_UNIT == sessionUser.idUnit
                                   select new
                                   {
                                       td.ID_DOCUMENT,
                                       td.DOCUMENT_TYPE,
                                       td.TRACKING_NUMBER,
                                       tdr.RETURN_NUMBER,
                                       tdr.ID_DOCUMENT_RECEIVER,
                                       tdr.RECEIVED_DOCUMENT,
                                       td.QTY_TOTAL,
                                       td.SENDER_NAME,
                                       td.DOC_RECEIVER,
                                       td.RECEIVED_DATE,
                                       td.DISTRIBUTION_TIME,
                                       td.STATUS_CODE,
                                       STATUS_CODE_VALUE = st.VALUE,
                                       DOCUMENT_TYPE_VALUE = dt.VALUE
                                   }).FirstOrDefault();
                }
                if (getDocument != null)
                {
                    data.idDocument = getDocument.ID_DOCUMENT;
                    data.documentType = getDocument.DOCUMENT_TYPE;
                    data.documentTypeValue = getDocument.DOCUMENT_TYPE_VALUE;
                    data.trackingNumber = getDocument.RETURN_NUMBER == null ? getDocument.TRACKING_NUMBER : getDocument.RETURN_NUMBER;
                    data.qtyTotal = getDocument.QTY_TOTAL;
                    data.senderName = getDocument.SENDER_NAME;
                    data.docReceiver = getDocument.DOC_RECEIVER;
                    data.receivedDate = getDocument.RECEIVED_DATE;
                    data.distributionTime = getDocument.DISTRIBUTION_TIME;
                    data.statusCode = getDocument.STATUS_CODE;
                    data.statusCodeValue = getDocument.STATUS_CODE_VALUE;
                    data.idDocumentReceiver = getDocument.ID_DOCUMENT_RECEIVER;
                    data.receivedDocument = getDocument.RECEIVED_DOCUMENT;
                    data.letterByDoc = db.tm_letter.Where(p => p.ID_DOCUMENT == getDocument.ID_DOCUMENT_RECEIVER && p.STATUS_CODE == 4).Count();

                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Success";

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "No Data Found!";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel UpdateDataDocument(ParamUpdateDocument pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tr_document.Where(p => p.ID_DOCUMENT == pr.idDocument).FirstOrDefault();
                if (dtDocument == null)
                {
                    output.Status = "NG";
                    output.Message = "Document Not Found!";

                    return output;
                }
                dtDocument.DOCUMENT_TYPE = pr.documentType;
                dtDocument.TRACKING_NUMBER = pr.trackingNumber;
                //dtDocument.QTY_TOTAL = Convert.ToInt32(pr.qtyTotal);
                dtDocument.SENDER_NAME = pr.senderName;
                dtDocument.DOC_RECEIVER = pr.docReceiver;
                //dtDocument.RECEIVED_DATE = DateTime.Now;
                dtDocument.STATUS_CODE = 1;//at mailing room
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();

                var dtReceiver = db.tr_document_receiver.Where(p => p.ID_DOCUMENT == pr.idDocument && p.STATUS_CODE == 1).ToList();
                db.tr_document_receiver.RemoveRange(dtReceiver);
                db.SaveChanges();

                var receiver = JsonConvert.DeserializeObject<List<ParamUpdateReceiver>>(pr.receiverDocument);
                bool newReceiver = false;
                string newReceiverList = "";
                string newReturnNumber = "";
                foreach (var item in receiver)
                {
                    if (item.idDocumentReceiver != Guid.Empty)
                    {
                        var dtDocReceiver = db.tr_document_receiver.Where(p => p.ID_DOCUMENT_RECEIVER == item.idDocumentReceiver).FirstOrDefault();
                        if (dtDocReceiver != null)
                        {
                            dtDocReceiver.ID_UNIT = item.idUnit;
                            dtDocReceiver.RETURN_NUMBER = item.returnNumber;
                            dtDocReceiver.ID_USER_TU = item.idUserTu;
                            dtDocReceiver.MODIFIED_ON = DateTime.Now;
                            dtDocReceiver.MODIFIED_BY = sessionUser.idUser;
                            db.SaveChanges();
                        }
                        else
                        {
                            Tr_Document_Receiver_Table tdr = new Tr_Document_Receiver_Table();
                            tdr.ID_DOCUMENT = pr.idDocument;
                            tdr.ID_UNIT = item.idUnit;
                            tdr.ID_USER_TU = item.idUserTu;
                            tdr.RETURN_NUMBER = item.returnNumber;
                            tdr.STATUS_CODE = 1;
                            tdr.RECEIVED_DOCUMENT = 0;
                            tdr.RETURNED_DOCUMENT = 0;
                            tdr.CREATED_ON = DateTime.Now;
                            tdr.CREATED_BY = sessionUser.idUser;
                            tdr.MODIFIED_ON = DateTime.Now;
                            tdr.MODIFIED_BY = sessionUser.idUser;

                            db.tr_document_receiver.Add(tdr);
                            db.SaveChanges();
                        }
                    }
                    else
                    {
                        Tr_Document_Receiver_Table tdr = new Tr_Document_Receiver_Table();
                        tdr.ID_DOCUMENT = pr.idDocument;
                        tdr.ID_UNIT = item.idUnit;
                        tdr.ID_USER_TU = item.idUserTu;
                        tdr.RETURN_NUMBER = item.returnNumber;
                        tdr.STATUS_CODE = 1;
                        tdr.RECEIVED_DOCUMENT = 0;
                        tdr.RETURNED_DOCUMENT = 0;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_document_receiver.Add(tdr);
                        db.SaveChanges();

                        var unitReceiverDetail = db.tm_unit.Where(p => p.ID_UNIT == item.idUnit).FirstOrDefault();
                        if (newReceiverList == "")
                        {
                            newReceiverList = unitReceiverDetail.UNIT_NAME;
                        }
                        else
                        {
                            newReceiverList += ", " + unitReceiverDetail.UNIT_NAME;
                        }
                        if (newReturnNumber == "")
                        {
                            newReturnNumber = item.returnNumber;
                        }
                        else
                        {
                            newReturnNumber += ", " + item.returnNumber;
                        }
                        newReceiver = true;
                    }
                }

                var documentTypeValue = GetStringMapping("tr_document", "DOCUMENT_TYPE", dtDocument.DOCUMENT_TYPE);
                if (newReceiver)
                {
                    pr.comment += "( diteruskan ke Divisi " + newReceiverList + " ) dengan nomor return " + newReturnNumber;
                }
                var description = "Dokumen Masuk (" + documentTypeValue + ") diperbarui oleh " + sessionUser.nip + "-" + sessionUser.nama + " - " + pr.comment;

                //insert log
                var insertLogDocument = InsertLogDocument(dtDocument.ID_DOCUMENT, sessionUser, description, pr.comment);
                if (!insertLogDocument)
                {
                    output.Status = "NG";
                    output.Message = "Error Insert Log!";
                    return output;
                }

                output.Status = "OK";
                output.Result = dtDocument.ID_DOCUMENT;
                output.Message = "Success Update Document";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel ReceiveDocument(ParamReceiveDocument pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tr_document.Where(p => p.ID_DOCUMENT == pr.idDocument).FirstOrDefault();
                var dtDocReceiver = db.tr_document_receiver.Where(p => p.ID_DOCUMENT_RECEIVER == pr.idDocumentReceiver
                                    && p.ID_UNIT == sessionUser.idUnit && p.ID_USER_TU == sessionUser.idUser).FirstOrDefault();
                if (sessionUser.idGroup == "S")
                {
                    dtDocReceiver = db.tr_document_receiver.Where(p => p.ID_DOCUMENT_RECEIVER == pr.idDocumentReceiver
                                    && p.ID_USER_TU == sessionUser.idUser).FirstOrDefault();
                }
                if (dtDocument == null)
                {
                    output.Status = "NG";
                    output.Message = "Document Not Found!";

                    return output;
                }
                if (dtDocReceiver == null)
                {
                    output.Status = "NG";
                    output.Message = "Receive Wrong Document!";

                    return output;
                }

                dtDocument.QTY_TOTAL = pr.qtyTotal;
                dtDocument.STATUS_CODE = pr.flagReceive;
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;

                dtDocReceiver.RECEIVED_DOCUMENT = pr.receivedDocument;
                dtDocReceiver.RETURNED_DOCUMENT = pr.returnedDocument;
                dtDocReceiver.STATUS_CODE = pr.flagReceive;
                dtDocReceiver.RECEIVED_DATE = DateTime.Now;
                dtDocReceiver.MODIFIED_ON = DateTime.Now;
                dtDocReceiver.MODIFIED_BY = sessionUser.idUser;


                //var statusCodeValue = GetStringMapping("tr_document_receiver", "STATUS_CODE", pr.flagReceive);
                var documentTypeValue = GetStringMapping("tr_document", "DOCUMENT_TYPE", dtDocument.DOCUMENT_TYPE);
                var description = "";
                if (pr.flagReceive == 3)
                {
                    //var noReturn = GenerateNoDoc(2, "01", sessionUser);

                    //if (noReturn == "NG")
                    //{
                    //    output.Status = "NG";
                    //    output.Message = "Failed Generate Return Number!";

                    //    return output;
                    //}

                    //dtDocReceiver.RETURN_NUMBER = noReturn;

                    description = "Dokumen Masuk (" + documentTypeValue + ") dengan total " + pr.qtyTotal + " diterima sebagian oleh " + sessionUser.nip + "-"
                        + sessionUser.nama + " sebanyak " + pr.receivedDocument + " - " + pr.comment;
                }
                else if (pr.flagReceive == 4)
                {
                    //var noReturn = GenerateNoDoc(2, "01", sessionUser);

                    //if (noReturn == "NG")
                    //{
                    //    output.Status = "NG";
                    //    output.Message = "Failed Generate Return Number!";

                    //    return output;
                    //}

                    //dtDocReceiver.RETURN_NUMBER = noReturn;

                    description = "Dokumen Masuk (" + documentTypeValue + ") dengan total " + pr.returnedDocument + " ditolak oleh " + sessionUser.nip + "-"
                        + sessionUser.nama + " - " + pr.comment;
                }
                else if (pr.flagReceive == 6)
                {
                    description = "Dokumen Masuk (" + documentTypeValue + ") dengan total " + pr.receivedDocument + " diterima oleh " + sessionUser.nip + "-"
                        + sessionUser.nama + " - " + pr.comment;
                }

                db.SaveChanges();

                //insert log
                var insertLogDocument = InsertLogDocument(dtDocument.ID_DOCUMENT, sessionUser, description, pr.comment);
                if (!insertLogDocument)
                {
                    output.Status = "NG";
                    output.Message = "Error Insert Log!";
                    return output;
                }


                output.Status = "OK";
                output.Result = dtDocReceiver.ID_DOCUMENT_RECEIVER;
                output.Message = "Success Receive Document";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel UploadDataDocument(ParamUploadDocumentString pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<UploadDocumentOutput> returnData = new List<UploadDocumentOutput>();
                var dataUpload = JsonConvert.DeserializeObject<List<ParamUploadDocument>>(pr.jsonDataString);
                var isGagal = 0;
                foreach (var item in dataUpload)
                {
                    //get string mapping
                    var getStringMap = GetStringMappingByValue("tr_document", "DOCUMENT_TYPE", item.documentType);
                    if (getStringMap == "NG")
                    {
                        returnData.Add(new UploadDocumentOutput
                        {
                            documentType = item.documentType,
                            trackingNumber = item.trackingNumber,
                            receiverUnit = item.receiverUnit,
                            senderName = item.senderName,
                            docReceiver = item.docReceiver,
                            receivedDate = DateTime.Now,
                            statusUpload = "Gagal Tipe Dokumen " + item.documentType + " tidak ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    //check if tracking number exist
                    var existTrackNumber = db.tr_document.Where(p => p.TRACKING_NUMBER == item.trackingNumber).FirstOrDefault();
                    if (existTrackNumber != null)
                    {
                        returnData.Add(new UploadDocumentOutput
                        {
                            documentType = item.documentType,
                            trackingNumber = item.trackingNumber,
                            receiverUnit = item.receiverUnit,
                            senderName = item.senderName,
                            docReceiver = item.docReceiver,
                            receivedDate = DateTime.Now,
                            statusUpload = "Gagal Nomor Resi / AWB " + item.trackingNumber + " Sudah Ada"
                        });
                        isGagal++;
                        continue;
                    }
                    //check if division/department exist
                    var existDivision = db.tm_unit.Where(p => p.UNIT_CODE == item.receiverUnit).FirstOrDefault();
                    if (existDivision == null)
                    {
                        returnData.Add(new UploadDocumentOutput
                        {
                            documentType = item.documentType,
                            trackingNumber = item.trackingNumber,
                            receiverUnit = item.receiverUnit,
                            senderName = item.senderName,
                            docReceiver = item.docReceiver,
                            receivedDate = DateTime.Now,
                            statusUpload = "Gagal Divisi / Departemen " + item.receiverUnit + " Tidak Ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    //check if admin division/department exist
                    var existAdminDivision = (from u in db.tm_user.Where(p => p.ID_GROUP == "B")
                                              join j in db.tm_position
                                                on u.ID_POSITION equals j.ID_POSITION
                                              join d in db.tm_unit
                                                on j.ID_UNIT equals d.ID_UNIT
                                              where d.UNIT_CODE == item.receiverUnit
                                              select u).FirstOrDefault();
                    if (existAdminDivision == null)
                    {
                        returnData.Add(new UploadDocumentOutput
                        {
                            documentType = item.documentType,
                            trackingNumber = item.trackingNumber,
                            receiverUnit = item.receiverUnit,
                            senderName = item.senderName,
                            docReceiver = item.docReceiver,
                            receivedDate = DateTime.Now,
                            statusUpload = "Gagal Admin Divisi / Departemen " + item.receiverUnit + " Belum di setting"
                        });
                        isGagal++;
                        continue;
                    }

                    //insert document
                    Tr_Document_Table tdt = new Tr_Document_Table();
                    tdt.DOCUMENT_TYPE = Convert.ToInt32(getStringMap);
                    tdt.TRACKING_NUMBER = item.trackingNumber;
                    tdt.QTY_TOTAL = 0;
                    tdt.SENDER_NAME = item.senderName;
                    tdt.DOC_RECEIVER = item.docReceiver;
                    tdt.RECEIVED_DATE = DateTime.Now;
                    tdt.STATUS_CODE = 1;
                    tdt.CREATED_ON = DateTime.Now;
                    tdt.CREATED_BY = sessionUser.idUser;
                    tdt.MODIFIED_ON = DateTime.Now;
                    tdt.MODIFIED_BY = sessionUser.idUser;

                    db.tr_document.Add(tdt);
                    db.SaveChanges();

                    if (tdt.ID_DOCUMENT != null)
                    {
                        //insert receiver

                        Tr_Document_Receiver_Table tdr = new Tr_Document_Receiver_Table();
                        tdr.ID_DOCUMENT = tdt.ID_DOCUMENT;
                        tdr.ID_UNIT = existDivision.ID_UNIT;
                        tdr.ID_USER_TU = existAdminDivision.ID_USER;
                        tdr.STATUS_CODE = 1;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_document_receiver.Add(tdr);
                        db.SaveChanges();

                        //insert log
                        Tr_Document_Log_Table tdl = new Tr_Document_Log_Table();
                        tdl.ID_DOCUMENT = tdt.ID_DOCUMENT;
                        tdl.DESCRIPTION = "Dokumen Masuk (" + getStringMap + ") diupload oleh " + sessionUser.nip + "-" + sessionUser.nama;
                        tdl.COMMENT = "";
                        tdl.CREATED_ON = DateTime.Now;
                        tdl.CREATED_BY = sessionUser.idUser;
                        tdl.MODIFIED_ON = DateTime.Now;
                        tdl.MODIFIED_BY = sessionUser.idUser;

                        db.tr_document_log.Add(tdl);
                        db.SaveChanges();

                        returnData.Add(new UploadDocumentOutput
                        {
                            documentType = item.documentType,
                            trackingNumber = item.trackingNumber,
                            receiverUnit = item.receiverUnit,
                            senderName = item.senderName,
                            docReceiver = item.docReceiver,
                            receivedDate = DateTime.Now,
                            statusUpload = "Sukses"
                        });
                    }
                    else
                    {
                        returnData.Add(new UploadDocumentOutput
                        {
                            documentType = item.documentType,
                            trackingNumber = item.trackingNumber,
                            receiverUnit = item.receiverUnit,
                            senderName = item.senderName,
                            docReceiver = item.docReceiver,
                            receivedDate = DateTime.Now,
                            statusUpload = "Kesalahan Server Silahkan Hubungi Admin"//"Failed Insert Document"
                        });
                        isGagal++;
                        continue;
                    }
                }
                output.Status = "OK";
                output.Result = returnData;
                if (isGagal != 0)
                {
                    output.Message = "Terdapat Total " + isGagal + " Dokumen Gagal di Upload";
                }
                else
                {
                    output.Message = "Sukses mengunggah dokumen";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public bool InsertLogDocument(Guid idDocument, SessionUser sessionUser, string description, string comment)
        {
            try
            {
                Tr_Document_Log_Table tdl = new Tr_Document_Log_Table();

                tdl.ID_DOCUMENT = idDocument;
                tdl.DESCRIPTION = description;
                tdl.COMMENT = comment;
                tdl.CREATED_ON = DateTime.Now;
                tdl.CREATED_BY = sessionUser.idUser;
                tdl.MODIFIED_ON = DateTime.Now;
                tdl.MODIFIED_BY = sessionUser.idUser;

                db.tr_document_log.Add(tdl);
                db.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #endregion

        #region Menu
        public GeneralOutputModel GetDataMenu(string idGroup)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = new List<MenuOutput>();
                var datachild = new List<MenuOutput>();
                var getMenu = db.tm_menu.Where(p => p.AUTHORIZATIONS.Contains(idGroup) && p.PARENT_ID == null && p.STATUS_CODE == 1)
                                .OrderBy(p => p.MENU_ORDER).ToList();
                foreach (var item in getMenu)
                {
                    datachild = new List<MenuOutput>();
                    var getChildMenu = (from m in db.tm_menu.Where(p => p.AUTHORIZATIONS.Contains(idGroup) && p.PARENT_ID == item.ID_MENU && p.STATUS_CODE == 1)
                                .OrderBy(p => p.PARENT_ID).ThenBy(p => p.MENU_ORDER)
                                        select new MenuOutput
                                        {
                                            idMenu = m.ID_MENU,
                                            menu = m.MENU,
                                            link = m.LINK,
                                            authorizations = m.AUTHORIZATIONS,
                                            parentId = m.PARENT_ID,
                                            menuOrder = m.MENU_ORDER,
                                            hasChild = m.HAS_CHILD,
                                            icon = m.ICON,
                                            linkMobile = m.LINK_M,
                                            excludeMobile = m.EXCLUDE_M,
                                            iconMobile = m.ICON_M,
                                            menu_en = m.MENU_EN

                                        }).ToList();
                    foreach (var item2 in getChildMenu)
                    {
                        var getChildMenu2 = (from m in db.tm_menu.Where(p => p.AUTHORIZATIONS.Contains(idGroup) && p.PARENT_ID == item2.idMenu && p.STATUS_CODE == 1)
                                .OrderBy(p => p.PARENT_ID).ThenBy(p => p.MENU_ORDER)
                                             select new MenuOutput
                                             {
                                                 idMenu = m.ID_MENU,
                                                 menu = m.MENU,
                                                 link = m.LINK,
                                                 authorizations = m.AUTHORIZATIONS,
                                                 parentId = m.PARENT_ID,
                                                 menuOrder = m.MENU_ORDER,
                                                 hasChild = m.HAS_CHILD,
                                                 icon = m.ICON,
                                                 linkMobile = m.LINK_M,
                                                 excludeMobile = m.EXCLUDE_M,
                                                 iconMobile = m.ICON_M,
                                                 menu_en = m.MENU_EN
                                             }).ToList();
                        datachild.Add(new MenuOutput
                        {
                            idMenu = item2.idMenu,
                            menu = item2.menu,
                            link = item2.link,
                            authorizations = item2.authorizations,
                            parentId = item2.parentId,
                            menuOrder = item2.menuOrder,
                            hasChild = item2.hasChild,
                            icon = item2.icon,
                            linkMobile = item2.linkMobile,
                            excludeMobile = item2.excludeMobile,
                            iconMobile = item2.iconMobile,
                            childMenu = getChildMenu2,
                            menu_en = item2.menu_en

                        });
                    }
                    data.Add(new MenuOutput
                    {
                        idMenu = item.ID_MENU,
                        menu = item.MENU,
                        link = item.LINK,
                        authorizations = item.AUTHORIZATIONS,
                        parentId = item.PARENT_ID,
                        menuOrder = item.MENU_ORDER,
                        hasChild = item.HAS_CHILD,
                        icon = item.ICON,
                        linkMobile = item.LINK_M,
                        excludeMobile = item.EXCLUDE_M,
                        iconMobile = item.ICON_M,
                        childMenu = datachild,
                        menu_en = item.MENU_EN
                    });
                }
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDataMenuMobile()
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = new List<MenuMobileOutput>();
                var getMenu = db.tm_menu.Where(p => p.STATUS_CODE == 1 && p.EXCLUDE_M == "N")
                                .OrderBy(p => p.MENU_ORDER).ToList();
                foreach (var item in getMenu)
                {
                    data.Add(new MenuMobileOutput
                    {
                        idMenu = item.ID_MENU,
                        menu = item.MENU,
                        authorizations = item.AUTHORIZATIONS,
                        linkMobile = item.LINK_M == null ? "" : item.LINK_M,
                        excludeMobile = item.EXCLUDE_M,
                        iconMobile = item.ICON_M == null ? "" : item.ICON_M
                    });
                }
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        #endregion

        #region General
        public string GetStringMapping(string objectName, string attributeName, int attributeValue)
        {
            try
            {
                var getMapping = db.tm_stringmap.Where(p => p.OBJECTNAME == objectName && p.ATTRIBUTENAME == attributeName && p.ATTRIBUTEVALUE == attributeValue).FirstOrDefault();
                if (getMapping != null)
                {
                    return getMapping.VALUE;
                }
                return "NG";
            }
            catch (Exception ex)
            {
                return "NG";
            }
        }
        public string GetStringMappingByValue(string objectName, string attributeName, string value)
        {
            try
            {
                var getMapping = db.tm_stringmap.Where(p => p.OBJECTNAME == objectName && p.ATTRIBUTENAME == attributeName && p.VALUE == value).FirstOrDefault();
                if (getMapping != null)
                {
                    return getMapping.ATTRIBUTEVALUE.ToString();
                }
                return "NG";
            }
            catch (Exception ex)
            {
                return "NG";
            }
        }

        public string GenerateNoDoc(int type, string userCode, SessionUser sessionUser)
        {
            try
            {
                int year = Convert.ToInt32(DateTime.Now.ToString("yyyy"));
                int month = Convert.ToInt32(DateTime.Now.ToString("MM"));
                int date = Convert.ToInt32(DateTime.Now.ToString("dd"));
                string monthVal = month.ToString();
                var dateVal = DateTime.Now.ToString("dd");
                var getDtNumber = db.tr_document_number.Where(p => p.NUMBER_TYPE == type && p.YEAR == year
                                     && p.USER_CODE == userCode).FirstOrDefault();
                if (getDtNumber == null)
                {
                    //add new number
                    Tr_Document_Number_Table tdn = new Tr_Document_Number_Table();
                    tdn.NUMBER_TYPE = type;
                    tdn.USER_CODE = userCode;
                    tdn.YEAR = year;
                    tdn.MONTH = month;
                    tdn.DATE = date;
                    tdn.NUMBER = 1;
                    tdn.CREATED_ON = DateTime.Now;
                    tdn.CREATED_BY = sessionUser.idUser;
                    tdn.MODIFIED_ON = DateTime.Now;
                    tdn.MODIFIED_BY = sessionUser.idUser;

                    db.tr_document_number.Add(tdn);
                    db.SaveChanges();

                    var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + dateVal;
                    }


                    return getStringMap + userCode + "-MR-" + year + monthVal + dateVal +"000"+ 1;
                }
                else
                {
                    int numbers = getDtNumber.NUMBER + 1;

                    getDtNumber.NUMBER = numbers;
                    getDtNumber.MODIFIED_ON = DateTime.Now;
                    getDtNumber.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + dateVal;
                    }

                    if (numbers < 10)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "000" + nmbr;
                        return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + data;
                    }
                    else if (numbers < 100)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "00" + nmbr;
                        return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + data;
                    }
                    else if (numbers < 999)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "0" + nmbr;
                        return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + data;
                    }
                    return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + numbers;
                }

            }
            catch (Exception ex)
            {
                return "NG";
            }
        }

        public GeneralOutputModel GetStringMap(ParamGetStringmap pr)
        {
            try
            {
                var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                                    && p.STATUS_CODE == 1).OrderBy(p => p.ATTRIBUTEVALUE)
                                  select new StringmapOutput
                                  {
                                      
                                      attributeValue = s.ATTRIBUTEVALUE,
                                      value = s.VALUE
                                  }).ToList();

                output.Status = "OK";
                output.Result = getMapping;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetDataPenerima(string keyword, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var data = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on u.ID_POSITION equals tp.ID_POSITION
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                on tp.ID_UNIT equals tu.ID_UNIT
                            join l in db.tr_level_employee
                                on u.ID_USER equals l.ID_USER
                            where u.FULLNAME.ToUpper().Contains(keyword.ToUpper()) || tp.POSITION_NAME.ToUpper().Contains(keyword.ToUpper())
                            select new AdminDivisionOutput
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME,
                                idUser = u.ID_USER,
                                nip = u.NIP,
                                userName = u.FULLNAME,
                                idPosition = tp.ID_POSITION,
                                positionName = tp.POSITION_NAME,
                                idLevel = l.ID_LEVEL
                            }).Union(from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                                     join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                         on u.ID_POSITION equals tp.ID_POSITION
                                     join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                         on tp.ID_UNIT equals tu.ID_UNIT
                                     where u.FULLNAME.ToUpper().Contains(keyword.ToUpper()) || tp.POSITION_NAME.ToUpper().Contains(keyword.ToUpper())
                                     select new AdminDivisionOutput
                                     {
                                         idUnit = tu.ID_UNIT,
                                         unitName = tu.UNIT_NAME,
                                         idUser = u.ID_USER,
                                         nip = u.NIP,
                                         userName = u.FULLNAME,
                                         idPosition = tp.ID_POSITION,
                                         positionName = tp.POSITION_NAME,
                                         idLevel = 0
                                     }).ToList();

                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get User Penerima";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public string GenerateNoLetter(string letterType, SessionUser sessionUser, Guid idLetter, bool is_backdate, DateTime? letterDate, string memoType)
        {
            try
            {
                int year = Convert.ToInt32(DateTime.Now.ToString("yyyy"));
                int month = Convert.ToInt32(DateTime.Now.ToString("MM"));
                int date = Convert.ToInt32(DateTime.Now.ToString("dd"));
                string monthVal = month.ToString();
                string dateVal = date.ToString();
                string yearVal = DateTime.Now.ToString("yy");
                string numVal = "0";
                if (is_backdate)
                {
                    DateTime letter = Convert.ToDateTime(letterDate);
                    year = Convert.ToInt32(letter.ToString("yyyy"));
                    month = Convert.ToInt32(letter.ToString("MM"));
                    date = Convert.ToInt32(letter.ToString("dd"));
                    monthVal = month.ToString();
                    dateVal = date.ToString();
                    yearVal = DateTime.Now.ToString("yy");
                }
                var getDtNumber = db.tr_letter_number.Where(p => p.ID_UNIT == sessionUser.idUnit && p.YEAR == year
                                    && p.MONTH == month && p.DATE == date).FirstOrDefault();
                string unitCodeSender = sessionUser.unitCode;
                Guid idUnitSender = sessionUser.idUnit;
                if (letterType == "BL" || letterType == "Memo")
                {
                    var getsender = (from l in db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter)
                                     join p in db.tm_position
                                        on l.ID_POSITION_SENDER equals p.ID_POSITION
                                     join u in db.tm_unit
                                        on p.ID_UNIT equals u.ID_UNIT
                                     select u).FirstOrDefault();
                    getDtNumber = db.tr_letter_number.Where(p => p.ID_UNIT == getsender.ID_UNIT && p.YEAR == year
                                    && p.MONTH == month && p.DATE == date).FirstOrDefault();

                    unitCodeSender = getsender.UNIT_CODE;
                    idUnitSender = getsender.ID_UNIT;
                }
                if (getDtNumber == null)
                {
                    //add new number
                    Tr_Letter_Number letterNumber = new Tr_Letter_Number();
                    letterNumber.ID_UNIT = idUnitSender;
                    letterNumber.YEAR = year;
                    letterNumber.MONTH = month;
                    letterNumber.DATE = date;
                    letterNumber.NUMBER = 1;
                    letterNumber.CREATED_ON = DateTime.Now;
                    letterNumber.CREATED_BY = sessionUser.idUser;
                    letterNumber.MODIFIED_ON = DateTime.Now;
                    letterNumber.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_number.Add(letterNumber);
                    db.SaveChanges();

                    //var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + date;
                    }
                    if (memoType != "")
                    {
                        if (memoType == "POAOPS")
                        {
                            return "0001.POA." + letterType + ".DIR." + dateVal + "" + monthVal + "" + yearVal;
                        }
                        return "0001." + memoType + "." + letterType + "." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    return "0001." + letterType + "." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;

                }
                else
                {
                    int numbers = getDtNumber.NUMBER + 1;
                    getDtNumber.NUMBER = numbers;
                    getDtNumber.MODIFIED_ON = DateTime.Now;
                    getDtNumber.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    //var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + date;
                    }
                    if (numbers < 10)
                    {
                        numVal = "000" + numbers;
                    }
                    else if (numbers < 100)
                    {
                        numVal = "00" + numbers;
                    }
                    else if (numbers < 999)
                    {
                        numVal = "0" + numbers;
                    }
                    if (memoType != "")
                    {
                        if (memoType == "POAOPS")
                        {
                            return numVal + ".POA." + letterType + ".DIR." + dateVal + "" + monthVal + "" + yearVal;
                        }
                        return numVal + "." + memoType + "." + letterType + "." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    return numVal + "." + letterType + "." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                }

            }
            catch (Exception ex)
            {
                return "NG";
            }
        }
        #endregion

        #region Letter
        public GeneralOutputModel InsertDataAttachmentLetter(ParamInsertAttachment pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachment outputAttachment = new OutputInsertAttachment();
                Guid idLetter = pr.idLetter;
                if (pr.idLetter == Guid.Empty)
                {
                    //insert new dummy letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = "PROCESS_UPLOAD_SURAT";
                    letter.LETTER_DATE = DateTime.Now;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                //insert attachment
                Tr_Attachment_Table attachment = new Tr_Attachment_Table();
                attachment.ID_LETTER = idLetter;
                attachment.FILENAME = pr.filename;
                attachment.STATUS_CODE = 1;
                attachment.IS_DOC_LETTER = pr.isDocLetter;
                attachment.CREATED_ON = DateTime.Now;
                attachment.CREATED_BY = sessionUser.idUser;
                attachment.MODIFIED_ON = DateTime.Now;
                attachment.MODIFIED_BY = sessionUser.idUser;

                db.tr_attachment.Add(attachment);
                db.SaveChanges();

                outputAttachment.idLetter = idLetter;

                output.Status = "OK";
                output.Result = outputAttachment;
                output.Message = "SUCCESS INSERT ATTACHMENT";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel InsertLetter(ParamInsertLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachment outputAttachment = new OutputInsertAttachment();

                Guid idLetter = pr.idresponsesurat;
                string noLetter = pr.saveType == 4 ? GenerateNoLetter("SM", sessionUser, idLetter, false, DateTime.Now, "") : "NO_LETTER";
                //string letterType = GetStringMapping("tm_letter", "LETTER_TYPE_CODE", 1);
                if (pr.idresponsesurat == Guid.Empty)
                {
                    //insert new letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = noLetter;
                    letter.ID_DOCUMENT = pr.idDocument;
                    letter.ABOUT = pr.about;
                    letter.ATTACHMENT_DESC = pr.attachmentCount;
                    letter.PRIORITY = pr.priority;
                    letter.LETTER_TYPE_CODE = pr.letterTypeCode;
                    letter.STATUS_CODE = pr.saveType;
                    letter.SENDER_NAME = pr.senderName;
                    letter.SENDER_ADDRESS = pr.senderAddress;
                    letter.LETTER_DATE_IN = pr.senderLetterDate;
                    letter.LETTER_NUMBER_IN = pr.senderLetterNumber;
                    letter.DOCUMENT_TYPE_CODE = pr.documentType;
                    letter.LETTER_DATE = DateTime.Now;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                else
                {
                    var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idresponsesurat).FirstOrDefault();

                    dtLetter.LETTER_NUMBER = noLetter;
                    dtLetter.ID_DOCUMENT = pr.idDocument;
                    dtLetter.ABOUT = pr.about;
                    dtLetter.ATTACHMENT_DESC = pr.attachmentCount;
                    dtLetter.PRIORITY = pr.priority;
                    dtLetter.LETTER_TYPE_CODE = pr.letterTypeCode;
                    dtLetter.STATUS_CODE = pr.saveType;
                    dtLetter.SENDER_NAME = pr.senderName;
                    dtLetter.SENDER_ADDRESS = pr.senderAddress;
                    dtLetter.LETTER_DATE_IN = pr.senderLetterDate;
                    dtLetter.LETTER_NUMBER_IN = pr.senderLetterNumber;
                    dtLetter.DOCUMENT_TYPE_CODE = pr.documentType;
                    dtLetter.LETTER_DATE = DateTime.Now;
                    dtLetter.MODIFIED_ON = DateTime.Now;
                    dtLetter.MODIFIED_BY = sessionUser.idUser;

                    db.SaveChanges();
                }

                //INSERT ISI
                var dtContent = db.tr_content.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                if (dtContent != null)
                {
                    db.tr_content.Remove(dtContent);
                    db.SaveChanges();
                }

                Tr_Content_Table content = new Tr_Content_Table();
                content.ID_LETTER = idLetter;
                content.LETTER_CONTENT = pr.isiSurat;
                content.CREATED_ON = DateTime.Now;
                content.CREATED_BY = sessionUser.idUser;
                content.MODIFIED_ON = DateTime.Now;
                content.MODIFIED_BY = sessionUser.idUser;
                db.tr_content.Add(content);
                db.SaveChanges();

                //INSERT PENERIMA
                var dtReceiver = db.tr_receiver.Where(p => p.ID_LETTER == idLetter).ToList();
                if (dtReceiver != null)
                {
                    db.tr_receiver.RemoveRange(dtReceiver);
                    db.SaveChanges();
                }

                var receiver = JsonConvert.DeserializeObject<List<ParamInsertReceiver>>(pr.idUserReceiver);
                var receiverName = "";
                List<GetOuputIdSekdir> sekdirs = new List<GetOuputIdSekdir>();
                foreach (var item in receiver)
                {
                    //select detail user
                    var dtUserReceiver = db.tm_user.Where(p => p.ID_USER == item.idUserReceiver).FirstOrDefault();
                    var getSekDir = (from tu in db.tm_user.Where(p => p.ID_GROUP == "S")

                                     join tpp in db.tm_position on tu.ID_POSITION equals tpp.ID_POSITION
                                     where tpp.PARENT_ID == dtUserReceiver.ID_POSITION
                                     select new GetOuputIdSekdir
                                     {
                                         idPositionSeketaris = tu.ID_POSITION,
                                         IduserSeketaris = tu.ID_USER
                                     }).FirstOrDefault();
                    if (receiverName == "")
                    {
                        receiverName += dtUserReceiver.FULLNAME;
                    }
                    else
                    {
                        receiverName += ", " + dtUserReceiver.FULLNAME;
                    }



                    if (getSekDir != null)
                    {
                        sekdirs.Add(new GetOuputIdSekdir
                        {
                            IduserSeketaris = getSekDir.IduserSeketaris,
                            idPositionSeketaris = getSekDir.idPositionSeketaris
                        });
                    }


                    Tr_Receiver_Table tdr = new Tr_Receiver_Table();
                    tdr.ID_LETTER = idLetter;
                    tdr.ID_USER_RECEIVER = item.idUserReceiver;
                    tdr.ID_POSITION_RECEIVER = dtUserReceiver.ID_POSITION;
                    tdr.CREATED_ON = DateTime.Now;
                    tdr.CREATED_BY = sessionUser.idUser;
                    tdr.MODIFIED_ON = DateTime.Now;
                    tdr.MODIFIED_BY = sessionUser.idUser;

                    db.tr_receiver.Add(tdr);
                    db.SaveChanges();
                    if (pr.saveType == 4)
                    {
                        Tr_Tbl_Status_Table tblStatus = new Tr_Tbl_Status_Table();
                        tblStatus.ID_LETTER = idLetter;
                        tblStatus.ID_USER = item.idUserReceiver;
                        tblStatus.ID_POSITION = dtUserReceiver.ID_POSITION;
                        tblStatus.READ_STATUS = 99;
                        tblStatus.SEND_DATE = DateTime.Now;

                        db.tr_tbl_status.Add(tblStatus);
                        db.SaveChanges();
                    }
                }

                //INSERT Tembusan
                var dtCopy = db.tr_copy.Where(p => p.ID_LETTER == idLetter).ToList();
                if (dtCopy != null)
                {
                    db.tr_copy.RemoveRange(dtCopy);
                    db.SaveChanges();
                }

                var copy = JsonConvert.DeserializeObject<List<ParamInsertCopy>>(pr.idUserCopy);
                var copyName = "";
                foreach (var item in copy)
                {
                    //select detail user
                    var dtUserCopy = db.tm_user.Where(p => p.ID_USER == item.idUserCopy).FirstOrDefault();
                    var getSekDir = (from tu in db.tm_user.Where(p => p.ID_GROUP == "S")

                                     join tpp in db.tm_position on tu.ID_POSITION equals tpp.ID_POSITION
                                     where tpp.PARENT_ID == dtUserCopy.ID_POSITION
                                     select new GetOuputIdSekdir
                                     {
                                         idPositionSeketaris = tu.ID_POSITION,
                                         IduserSeketaris = tu.ID_USER
                                     }).FirstOrDefault();
                    if (receiverName == "")
                    {
                        copyName += dtUserCopy.FULLNAME;
                    }
                    else
                    {
                        copyName += ", " + dtUserCopy.FULLNAME;
                    }
                    if (getSekDir != null)
                    {
                        sekdirs.Add(new GetOuputIdSekdir
                        {
                            IduserSeketaris = getSekDir.IduserSeketaris,
                            idPositionSeketaris = getSekDir.idPositionSeketaris
                        });
                    }
                    Tr_Copy_Table tdr = new Tr_Copy_Table();
                    tdr.ID_LETTER = idLetter;
                    tdr.ID_USER_COPY = item.idUserCopy;
                    tdr.ID_POSITION_COPY = dtUserCopy.ID_POSITION;
                    tdr.CREATED_ON = DateTime.Now;
                    tdr.CREATED_BY = sessionUser.idUser;
                    tdr.MODIFIED_ON = DateTime.Now;
                    tdr.MODIFIED_BY = sessionUser.idUser;

                    db.tr_copy.Add(tdr);
                    db.SaveChanges();

                    if (pr.saveType == 4)
                    {
                        Tr_Tbl_Status_Table tblStatus = new Tr_Tbl_Status_Table();
                        tblStatus.ID_LETTER = idLetter;
                        tblStatus.ID_USER = item.idUserCopy;
                        tblStatus.ID_POSITION = dtUserCopy.ID_POSITION;
                        tblStatus.READ_STATUS = 99;
                        tblStatus.SEND_DATE = DateTime.Now;

                        db.tr_tbl_status.Add(tblStatus);
                        db.SaveChanges();
                    }
                }
                foreach (var item in sekdirs)
                {
                    Tr_Copy_Table tdr = new Tr_Copy_Table();
                    tdr.ID_LETTER = idLetter;
                    tdr.ID_USER_COPY = item.IduserSeketaris;
                    tdr.ID_POSITION_COPY = item.idPositionSeketaris;
                    tdr.CREATED_ON = DateTime.Now;
                    tdr.CREATED_BY = sessionUser.idUser;
                    tdr.MODIFIED_ON = DateTime.Now;
                    tdr.MODIFIED_BY = sessionUser.idUser;

                    db.tr_copy.Add(tdr);
                    db.SaveChanges();

                    if (pr.saveType == 4)
                    {
                        Tr_Tbl_Status_Table tblStatus = new Tr_Tbl_Status_Table();
                        tblStatus.ID_LETTER = idLetter;
                        tblStatus.ID_USER = item.IduserSeketaris;
                        tblStatus.ID_POSITION = item.idPositionSeketaris;
                        tblStatus.READ_STATUS = 99;
                        tblStatus.SEND_DATE = DateTime.Now;

                        db.tr_tbl_status.Add(tblStatus);
                        db.SaveChanges();
                    }

                }

                var description = "Surat Masuk disimpan";
                if (pr.saveType == 4)
                {
                    description = "Surat Masuk sudah didistribusi kepada " + receiverName;
                    if (copyName != "")
                    {
                        description += " CC: " + copyName;
                    }
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (pr.idDocument != null)
                {
                    Guid idDoc = new Guid(pr.idDocument.ToString());
                    var getIdDocument = db.tr_document_receiver.Where(p => p.ID_DOCUMENT_RECEIVER == idDoc).FirstOrDefault();
                    if (pr.saveType == 4)
                    {
                        description += description + " dengan nomor surat " + noLetter;
                    }
                    InsertLogDocument(getIdDocument.ID_DOCUMENT, sessionUser, description, "");
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "SUCCESS INSERT SURAT";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public bool InsertLogLetter(Guid idLetter, SessionUser sessionUser, string description, string comment)
        {
            try
            {
                //var dtDelg = (from u in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser)
                //              select param
                //              {
                //                  u.ID_USER_CHECKER,
                //                  u.ID_POSITION_CHECKER
                //              }).FirstOrDefault();
                var dtUser = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ID_USER_DELEGASI == sessionUser.idUser).ToList();
                Tr_Log_Letter tdl = new Tr_Log_Letter();

                tdl.ID_LETTER = idLetter;
                tdl.DESCRIPTION = description + " - " + comment;
                tdl.COMMENT = comment;
                tdl.CREATED_ON = DateTime.Now;
                if(dtUser.Count() == 0 )
                {
                    tdl.CREATED_BY =  sessionUser.idUser;
                    tdl.MODIFIED_BY = sessionUser.idUser;
                }
                else
                {
                    foreach(var item in dtUser)
                    {
                        tdl.CREATED_BY =  item.ID_USER_CHECKER;
                        tdl.MODIFIED_BY = item.ID_USER_CHECKER;
                    }
                   
                }
                tdl.MODIFIED_ON = DateTime.Now;
                

                db.tr_log_letter.Add(tdl);
                db.SaveChanges();

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        

        public GeneralOutputModel GetDetailReportDocument(ParamGetDetailReportDocument pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<DocumentOutput> data = new List<DocumentOutput>();
                Guid id_unit_session = new Guid("d0d02aa8-7a27-ed11-89b0-3cf011a1a981");//unit mailingroom;
                var getDocument = (from td in db.tr_document.OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join tdr in db.tr_document_receiver
                                    on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join st in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "STATUS_CODE",
                                       c = td.STATUS_CODE
                                   } equals new
                                   {
                                       a = st.OBJECTNAME,
                                       b = st.ATTRIBUTENAME,
                                       c = st.ATTRIBUTEVALUE
                                   }
                                   join dt in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "DOCUMENT_TYPE",
                                       c = td.DOCUMENT_TYPE
                                   } equals new
                                   {
                                       a = dt.OBJECTNAME,
                                       b = dt.ATTRIBUTENAME,
                                       c = dt.ATTRIBUTEVALUE
                                   }
                                   select new
                                   {
                                       td.ID_DOCUMENT,
                                       td.DOCUMENT_TYPE,
                                       td.TRACKING_NUMBER,
                                       tdr.RETURN_NUMBER,
                                       td.QTY_TOTAL,
                                       td.SENDER_NAME,
                                       td.RECEIVED_DATE,
                                       td.DISTRIBUTION_TIME,
                                       td.STATUS_CODE,
                                       STATUS_CODE_VALUE = st.VALUE,
                                       DOCUMENT_TYPE_VALUE = dt.VALUE
                                   }).AsQueryable();
                if (pr.trackingNumber != null)
                {
                    getDocument = getDocument.Where(p => p.TRACKING_NUMBER == pr.trackingNumber || p.RETURN_NUMBER == pr.trackingNumber);
                }
                if (pr.startDate != null && pr.endDate != null)
                {
                    getDocument = getDocument.Where(p => p.RECEIVED_DATE >= pr.startDate && p.RECEIVED_DATE <= pr.endDate);
                }
                var docFinal = getDocument.ToList();
                if (docFinal != null)
                {
                    var num = 0;
                    foreach (var item in docFinal)
                    {
                        var dataRecevier = (from tdr in db.tr_document_receiver.Where(p => p.ID_DOCUMENT == item.ID_DOCUMENT).OrderBy(p => p.CREATED_ON)
                                            join u in db.tm_unit
                                                on tdr.ID_UNIT equals u.ID_UNIT
                                            join s in db.tm_user
                                                on tdr.ID_USER_TU equals s.ID_USER
                                            join st in db.tm_stringmap on new
                                            {
                                                a = "tr_document_receiver",
                                                b = "STATUS_CODE",
                                                c = tdr.STATUS_CODE
                                            } equals new
                                            {
                                                a = st.OBJECTNAME,
                                                b = st.ATTRIBUTENAME,
                                                c = st.ATTRIBUTEVALUE
                                            }
                                            select new DocumentReceiverOutput
                                            {
                                                idDocumentReceiver = tdr.ID_DOCUMENT_RECEIVER,
                                                idDocument = tdr.ID_DOCUMENT,
                                                idUnit = u.ID_UNIT,
                                                unitName = u.UNIT_NAME,
                                                idUserTu = tdr.ID_USER_TU,
                                                tuNip = s.NIP,
                                                tuName = s.FULLNAME,
                                                statusCode = tdr.STATUS_CODE,
                                                statusCodeValue = st.VALUE,
                                                receivedDate = tdr.RECEIVED_DATE,
                                                receivedDocument = tdr.RECEIVED_DOCUMENT,
                                                returnedDocument = tdr.RETURNED_DOCUMENT,
                                                returnNumber = tdr.RETURN_NUMBER
                                            }).ToList();
                        if (num == 0)
                        {
                            data.Add(new DocumentOutput
                            {
                                idDocument = item.ID_DOCUMENT,
                                documentType = item.DOCUMENT_TYPE,
                                documentTypeValue = item.DOCUMENT_TYPE_VALUE,
                                trackingNumber = item.TRACKING_NUMBER,
                                qtyTotal = item.QTY_TOTAL,
                                senderName = item.SENDER_NAME,
                                receivedDate = item.RECEIVED_DATE,
                                statusCode = item.STATUS_CODE,
                                statusCodeValue = item.STATUS_CODE_VALUE,
                                //distributionTime = item.DISTRIBUTION_TIME,
                                documentReceiver = dataRecevier,
                                //documentLog = dataLog
                            });
                            num++;
                        }

                    }

                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Success";

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "No Data Found!";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetSearchDetailReportDocument(ParamGetDetailSearchoutgoingDocument pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<DocumentOutput> data = new List<DocumentOutput>();
                Guid id_unit_session = new Guid("d0d02aa8-7a27-ed11-89b0-3cf011a1a981");//unit mailingroom;
                var getDocument = (from td in db.tr_document.OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join st in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "STATUS_CODE",
                                       c = td.STATUS_CODE
                                   } equals new
                                   {
                                       a = st.OBJECTNAME,
                                       b = st.ATTRIBUTENAME,
                                       c = st.ATTRIBUTEVALUE
                                   }
                                   join dt in db.tm_stringmap on new
                                   {
                                       a = "tr_document",
                                       b = "DOCUMENT_TYPE",
                                       c = td.DOCUMENT_TYPE
                                   } equals new
                                   {
                                       a = dt.OBJECTNAME,
                                       b = dt.ATTRIBUTENAME,
                                       c = dt.ATTRIBUTEVALUE
                                   }
                                   select new
                                   {
                                       td.ID_DOCUMENT,
                                       td.DOCUMENT_TYPE,
                                       td.TRACKING_NUMBER,
                                       td.QTY_TOTAL,
                                       td.SENDER_NAME,
                                       td.RECEIVED_DATE,
                                       td.DISTRIBUTION_TIME,
                                       td.STATUS_CODE,
                                       STATUS_CODE_VALUE = st.VALUE,
                                       DOCUMENT_TYPE_VALUE = dt.VALUE
                                   }).AsQueryable();

                if (pr.startDate != null && pr.endDate != null)
                {
                    getDocument = getDocument.Where(p => p.RECEIVED_DATE >= pr.startDate && p.RECEIVED_DATE <= pr.endDate);
                }
                var docFinal = getDocument.ToList();
                if (docFinal != null)
                {
                    foreach (var item in docFinal)
                    {
                        var dataRecevier = (from tdr in db.tr_document_receiver.Where(p => p.ID_DOCUMENT == item.ID_DOCUMENT).OrderBy(p => p.CREATED_ON)
                                            join u in db.tm_unit
                                                on tdr.ID_UNIT equals u.ID_UNIT
                                            join s in db.tm_user
                                                on tdr.ID_USER_TU equals s.ID_USER
                                            join ss in db.tm_user
                                                on tdr.CREATED_BY equals ss.ID_USER
                                            join st in db.tm_stringmap on new
                                            {
                                                a = "tr_document_receiver",
                                                b = "STATUS_CODE",
                                                c = tdr.STATUS_CODE
                                            } equals new
                                            {
                                                a = st.OBJECTNAME,
                                                b = st.ATTRIBUTENAME,
                                                c = st.ATTRIBUTEVALUE
                                            }
                                            select new DocumentReceiverOutput
                                            {
                                                idDocumentReceiver = tdr.ID_DOCUMENT_RECEIVER,
                                                idDocument = tdr.ID_DOCUMENT,
                                                idUnit = u.ID_UNIT,
                                                unitName = u.UNIT_NAME,
                                                idUserTu = tdr.ID_USER_TU,
                                                tuNip = s.NIP,
                                                tuName = s.FULLNAME,
                                                statusCode = tdr.STATUS_CODE,
                                                statusCodeValue = st.VALUE,
                                                receivedDate = tdr.RECEIVED_DATE,
                                                receivedDocument = tdr.RECEIVED_DOCUMENT,
                                                returnedDocument = tdr.RETURNED_DOCUMENT,
                                                returnNumber = tdr.RETURN_NUMBER,
                                                mofied_by = ss.FULLNAME
                                            }).ToList();

                        data.Add(new DocumentOutput
                        {

                            idDocument = item.ID_DOCUMENT,
                            documentType = item.DOCUMENT_TYPE,
                            documentTypeValue = item.DOCUMENT_TYPE_VALUE,
                            trackingNumber = item.TRACKING_NUMBER,
                            qtyTotal = item.QTY_TOTAL,
                            senderName = item.SENDER_NAME,
                            receivedDate = item.RECEIVED_DATE,
                            statusCode = item.STATUS_CODE,
                            statusCodeValue = item.STATUS_CODE_VALUE,
                            //distributionTime = item.DISTRIBUTION_TIME,
                            documentReceiver = dataRecevier,
                            //documentLog = dataLog
                        });
                    }

                    output.Status = "OK";
                    output.Result = data.OrderByDescending(p => p.receivedDate).ToList();
                    output.Message = "Success";

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "No Data Found!";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        #endregion

        #region User



        public GeneralOutputModel GetUserDataWeb(SessionUser sessionUser, ParamGetUsertWeb pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                //var data = new List<DocumentOutput>();

                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from tu in db.tm_user.Where(p => p.ID_GROUP != "A" && p.ID_GROUP == "M").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                   on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                            on tu.ID_POSITION equals tp.ID_POSITION
                                   join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                               on tp.ID_UNIT equals u.ID_UNIT
                                   select new DataOuputUser
                                   {
                                       Iduser = tu.ID_USER,
                                       Nip = tu.NIP,
                                       Fullname = tu.FULLNAME,
                                       IdPosition = tu.ID_POSITION,
                                       Position_name = tp.POSITION_NAME,
                                       Unit_name = u.UNIT_NAME,
                                       Email = tu.EMAIL,
                                       Phone = tu.PHONE,
                                       IDgroup = tu.ID_GROUP,
                                       statusCode = tu.STATUS_CODE,
                                       //statusCodeValue = st.VALUE
                                   }).AsQueryable();

                recordsTotal = getDocument.Count();

                // search data when search value found
                if (!string.IsNullOrEmpty(pr.searchValue))
                {
                    getDocument = getDocument.Where(x => x.Nip.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Fullname.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Email.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.IDgroup.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Position_name.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Unit_name.ToLower().Contains(pr.searchValue.ToLower()));
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                UserOutputWeb result = new UserOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailUser(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                DataOuputUser data = new DataOuputUser();
                var getDocument = (from tu in db.tm_user.OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                   on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                            on tu.ID_POSITION equals tp.ID_POSITION
                                   join u in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                  on tp.ID_UNIT equals u.ID_UNIT
                                   where tu.ID_USER == pr.Iduser
                                   select new
                                   {
                                       tu.ID_USER,
                                       tu.NIP,
                                       tu.FULLNAME,
                                       tu.EMAIL,
                                       tu.ID_POSITION,
                                       tp.POSITION_NAME,
                                       u.UNIT_NAME,
                                       tu.ID_GROUP,
                                       tu.STATUS_CODE,
                                   }).FirstOrDefault();

                data.Iduser = getDocument.ID_USER;
                data.Nip = getDocument.NIP;
                data.Fullname = getDocument.FULLNAME;
                data.IdPosition = getDocument.ID_POSITION;
                data.Position_name = getDocument.POSITION_NAME;
                data.Unit_name = getDocument.UNIT_NAME;
                data.Email = getDocument.EMAIL;
                data.IDgroup = getDocument.ID_GROUP;
                data.statusCode = getDocument.STATUS_CODE;
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateDatauserSetting(ParamUpdateUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();


                dtDocument.ID_GROUP = pr.IDgroup;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        #endregion
        public GeneralOutputModel GetLetterDraft(ParamGetLetterWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<DocumentOutput> data = new List<DocumentOutput>();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;

                var getLetter = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1  && p.LETTER_TYPE_CODE == 2).OrderByDescending(p => p.MODIFIED_ON)
                                 join maker in db.tm_user
                                    on l.CREATED_BY equals maker.ID_USER
                                 join position in db.tm_position
                                    on maker.ID_POSITION equals position.ID_POSITION
                                 join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                 select new LetterOutput
                                 {
                                     idLetter = l.ID_LETTER,
                                     idDocument = l.ID_DOCUMENT,
                                     letterNumber = l.LETTER_NUMBER,
                                     letterDate = l.LETTER_DATE,
                                     about = l.ABOUT,
                                     attachmentDesc = l.ATTACHMENT_DESC,
                                     priority = l.PRIORITY,
                                     letterTypeValue = ltc.VALUE,
                                     letterTypeCode = l.LETTER_TYPE_CODE,
                                     senderName = l.SENDER_NAME,
                                     senderAddress = l.SENDER_ADDRESS,
                                     letterDateIn = l.LETTER_DATE_IN,
                                     letterNumberIn = l.LETTER_NUMBER_IN,
                                     createdBy = l.CREATED_BY,
                                     createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     fullname = maker.FULLNAME,
                                     positionName = position.POSITION_NAME,
                                     createdOn = l.CREATED_ON,
                                     modifiedOn = l.MODIFIED_ON
                                 }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1 && p.LETTER_TYPE_CODE ==6).OrderByDescending(p => p.MODIFIED_ON)
                                          join maker in db.tm_user
                                            on l.CREATED_BY equals maker.ID_USER
                                          join position in db.tm_position
                                             on maker.ID_POSITION equals position.ID_POSITION
                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                          select new LetterOutput
                                          {
                                              idLetter = l.ID_LETTER,
                                              idDocument = l.ID_DOCUMENT,
                                              letterNumber = l.LETTER_NUMBER,
                                              letterDate = l.LETTER_DATE,
                                              about = l.ABOUT,
                                              attachmentDesc = l.ATTACHMENT_DESC,
                                              priority = l.PRIORITY,
                                              letterTypeValue = ltc.VALUE,
                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                              senderName = l.SENDER_NAME,
                                              senderAddress = l.SENDER_ADDRESS,
                                              letterDateIn = l.LETTER_DATE_IN,
                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                              createdBy = l.CREATED_BY,
                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                              fullname = maker.FULLNAME,
                                              positionName = position.POSITION_NAME,
                                              createdOn = l.CREATED_ON,
                                              modifiedOn = l.MODIFIED_ON
                                          }).AsQueryable();

                if (pr.startDate != null && pr.endDate != null)
                {
                    DateTime startDate = Convert.ToDateTime(pr.startDate).Date;
                    DateTime endDate = Convert.ToDateTime(pr.endDate).Date;
                    getLetter = getLetter.Where(p => p.letterDate.Date >= startDate && p.letterDate.Date <= endDate);
                }
                if (pr.letterNumber != null)
                {
                    getLetter = getLetter.Where(p => p.letterNumber.Contains(pr.letterNumber) || p.letterNumberIn.Contains(pr.letterNumber));
                }
                if (pr.about != null)
                {
                    getLetter = getLetter.Where(p => p.about.Contains(pr.about));
                }
                if (pr.letterType != 0 && pr.letterType != null)
                {
                    getLetter = getLetter.Where(p => p.letterTypeCode == pr.letterType);
                }
                if (pr.readStatus != 1 && pr.readStatus != null)
                {
                    getLetter = getLetter.Where(p => p.readStatus == pr.readStatus);
                }
                recordsTotal = getLetter.Count();

                var letterList = getLetter.OrderByDescending(p => p.modifiedOn).Skip(skip).Take(20).ToList();
                int letterListCount = letterList.Count();
                var getLetterOutbox = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                 join maker in db.tm_user
                                    on l.CREATED_BY equals maker.ID_USER
                                 join position in db.tm_position
                                    on maker.ID_POSITION equals position.ID_POSITION
                                 join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                 join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                         on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                 select new LetterOutput
                                 {
                                     idLetter = l.ID_LETTER,
                                     idDocument = l.ID_DOCUMENT,
                                     letterNumber = l.LETTER_NUMBER,
                                     letterDate = l.LETTER_DATE,
                                     about = l.ABOUT,
                                     attachmentDesc = l.ATTACHMENT_DESC,
                                     priority = l.PRIORITY,
                                     letterTypeValue = ltc.VALUE,
                                     letterTypeCode = l.LETTER_TYPE_CODE,
                                     senderName = l.SENDER_NAME,
                                     senderAddress = l.SENDER_ADDRESS,
                                     letterDateIn = l.LETTER_DATE_IN,
                                     letterNumberIn = l.LETTER_NUMBER_IN,
                                     createdBy = l.CREATED_BY,
                                     createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     fullname = maker.FULLNAME,
                                     positionName = position.POSITION_NAME,
                                     createdOn = l.CREATED_ON,
                                     modifiedOn = l.MODIFIED_ON,
                                     statusCode = l.STATUS_CODE,
                                     statusCodeValue = stc.VALUE
                                 }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                          join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                            on l.ID_LETTER equals s.ID_LETTER
                                          join maker in db.tm_user
                                             on s.ID_USER_SENDER equals maker.ID_USER
                                          join position in db.tm_position
                                             on s.ID_POSITION_SENDER equals position.ID_POSITION
                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                          join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                 on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                          select new LetterOutput
                                          {
                                              idLetter = l.ID_LETTER,
                                              idDocument = l.ID_DOCUMENT,
                                              letterNumber = l.LETTER_NUMBER,
                                              letterDate = l.LETTER_DATE,
                                              about = l.ABOUT,
                                              attachmentDesc = l.ATTACHMENT_DESC,
                                              priority = l.PRIORITY,
                                              letterTypeValue = ltc.VALUE,
                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                              senderName = l.SENDER_NAME,
                                              senderAddress = l.SENDER_ADDRESS,
                                              letterDateIn = l.LETTER_DATE_IN,
                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                              createdBy = l.CREATED_BY,
                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                              fullname = maker.FULLNAME,
                                              positionName = position.POSITION_NAME,
                                              createdOn = l.CREATED_ON,
                                              modifiedOn = l.MODIFIED_ON,
                                              statusCode = l.STATUS_CODE,
                                              statusCodeValue = stc.VALUE
                                          }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                                   join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                     on l.ID_LETTER equals s.ID_LETTER
                                                   join maker in db.tm_user
                                                      on s.ID_USER_SENDER equals maker.ID_USER
                                                   join position in db.tm_position
                                                      on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                   join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                          on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                   join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                          on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                   select new LetterOutput
                                                   {
                                                       idLetter = l.ID_LETTER,
                                                       idDocument = l.ID_DOCUMENT,
                                                       letterNumber = l.LETTER_NUMBER,
                                                       letterDate = l.LETTER_DATE,
                                                       about = l.ABOUT,
                                                       attachmentDesc = l.ATTACHMENT_DESC,
                                                       priority = l.PRIORITY,
                                                       letterTypeValue = ltc.VALUE,
                                                       letterTypeCode = l.LETTER_TYPE_CODE,
                                                       senderName = l.SENDER_NAME,
                                                       senderAddress = l.SENDER_ADDRESS,
                                                       letterDateIn = l.LETTER_DATE_IN,
                                                       letterNumberIn = l.LETTER_NUMBER_IN,
                                                       createdBy = l.CREATED_BY,
                                                       createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                       fullname = maker.FULLNAME,
                                                       positionName = position.POSITION_NAME,
                                                       createdOn = l.CREATED_ON,
                                                       modifiedOn = l.MODIFIED_ON,
                                                       statusCode = l.STATUS_CODE,
                                                       statusCodeValue = stc.VALUE
                                                   }).Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                                            join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                              on l.ID_LETTER equals s.ID_LETTER
                                                            join maker in db.tm_user
                                                               on s.ID_USER_SENDER equals maker.ID_USER
                                                            join position in db.tm_position
                                                               on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                            join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                                   on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                            join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                                   on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                            join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS != 'X')
                                                               on l.ID_LETTER equals c.ID_LETTER
                                                            select new LetterOutput
                                                            {
                                                                idLetter = l.ID_LETTER,
                                                                idDocument = l.ID_DOCUMENT,
                                                                letterNumber = l.LETTER_NUMBER,
                                                                letterDate = l.LETTER_DATE,
                                                                about = l.ABOUT,
                                                                attachmentDesc = l.ATTACHMENT_DESC,
                                                                priority = l.PRIORITY,
                                                                letterTypeValue = ltc.VALUE,
                                                                letterTypeCode = l.LETTER_TYPE_CODE,
                                                                senderName = l.SENDER_NAME,
                                                                senderAddress = l.SENDER_ADDRESS,
                                                                letterDateIn = l.LETTER_DATE_IN,
                                                                letterNumberIn = l.LETTER_NUMBER_IN,
                                                                createdBy = l.CREATED_BY,
                                                                createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                                fullname = maker.FULLNAME,
                                                                positionName = position.POSITION_NAME,
                                                                createdOn = l.CREATED_ON,
                                                                modifiedOn = l.MODIFIED_ON,
                                                                statusCode = l.STATUS_CODE,
                                                                statusCodeValue = stc.VALUE
                                                            }).Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 0 && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                                                     join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                                       on l.ID_LETTER equals s.ID_LETTER
                                                                     join maker in db.tm_user
                                                                        on s.ID_USER_SENDER equals maker.ID_USER
                                                                     join position in db.tm_position
                                                                        on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                                     join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                                            on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                                     join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                                            on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                                     join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS != 'X')
                                                                        on l.ID_LETTER equals c.ID_LETTER
                                                                     select new LetterOutput
                                                                     {
                                                                         idLetter = l.ID_LETTER,
                                                                         idDocument = l.ID_DOCUMENT,
                                                                         letterNumber = l.LETTER_NUMBER,
                                                                         letterDate = l.LETTER_DATE,
                                                                         about = l.ABOUT,
                                                                         attachmentDesc = l.ATTACHMENT_DESC,
                                                                         priority = l.PRIORITY,
                                                                         letterTypeValue = ltc.VALUE,
                                                                         letterTypeCode = l.LETTER_TYPE_CODE,
                                                                         senderName = l.SENDER_NAME,
                                                                         senderAddress = l.SENDER_ADDRESS,
                                                                         letterDateIn = l.LETTER_DATE_IN,
                                                                         letterNumberIn = l.LETTER_NUMBER_IN,
                                                                         createdBy = l.CREATED_BY,
                                                                         createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                                         fullname = maker.FULLNAME,
                                                                         positionName = position.POSITION_NAME,
                                                                         createdOn = l.CREATED_ON,
                                                                         modifiedOn = l.MODIFIED_ON,
                                                                         statusCode = l.STATUS_CODE,
                                                                         statusCodeValue = stc.VALUE
                                                                     }).Count();

                //var getLetterOutbox = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE ==2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                //                       join maker in db.tm_user
                //                          on l.CREATED_BY equals maker.ID_USER
                //                       join position in db.tm_position
                //                          on maker.ID_POSITION equals position.ID_POSITION
                //                       //join tblStatus in db.tr_tbl_status.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition)
                //                       //   on l.ID_LETTER equals tblStatus.ID_LETTER
                //                       join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                //                              on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                //                       select new LetterOutput
                //                       {
                //                           idLetter = l.ID_LETTER,
                //                           idDocument = l.ID_DOCUMENT,
                //                           letterNumber = l.LETTER_NUMBER,
                //                           letterDate = l.LETTER_DATE,
                //                           about = l.ABOUT,
                //                           attachmentDesc = l.ATTACHMENT_DESC,
                //                           priority = l.PRIORITY,
                //                           letterTypeValue = ltc.VALUE,
                //                           letterTypeCode = l.LETTER_TYPE_CODE,
                //                           senderName = l.SENDER_NAME,
                //                           senderAddress = l.SENDER_ADDRESS,
                //                           letterDateIn = l.LETTER_DATE_IN,
                //                           letterNumberIn = l.LETTER_NUMBER_IN,
                //                           createdBy = l.CREATED_BY,
                //                           createdByPositionId = l.CREATED_BY_POSITION_ID,
                //                           fullname = maker.FULLNAME,
                //                           positionName = position.POSITION_NAME,
                //                           createdOn = l.CREATED_ON
                //                       }).Count();
                float pageLengthCoumt = (float)recordsTotal / (float)20;
                int pageLength = (int)Math.Ceiling(pageLengthCoumt);
                LetterOutputWeb result = new LetterOutputWeb();
                result.draw = pr.draw == "0" ? "1" : pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.pagelength = pageLength;
                result.limit = letterListCount < 20 ? skip + letterListCount : skip + 20;
                result.draftCount = recordsTotal;
                result.outboxCount = getLetterOutbox;
                result.data = letterList.OrderByDescending(p => p.modifiedOn).ToList();

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetInboxLetter(ParamGetLetterWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<DocumentOutput> data = new List<DocumentOutput>();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;

                var dtlSekre = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                    //join s in db.tr_setingseketaris
                                    //    on u.ID_USER equals s.ID_SEKETARIS
                                select new SessionUser
                                {
                                    idUser = u.ID_POSITION
                                }).ToList();

                if (sessionUser.idGroup == "S")
                {
                    dtlSekre = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                join s in db.tr_setingseketaris
                                    on u.ID_USER equals s.ID_SEKETARIS
                                select new SessionUser
                                {
                                    idUser = s.ID_DIRKOM
                                }).ToList();
                }
                List<Guid> ListDir = new List<Guid>();
                foreach (var item in dtlSekre)
                {
                    ListDir.Add(item.idUser);
                }


                //var dtDelg = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                //             join s in db.tr_checker
                //                 on u.ID_USER equals s.ID_SEKETARIS
                //             select new SessionUser
                //             {
                //                 idUser = s.ID_DIRKOM
                //             }).ToList();

                DateTime today = DateTime.Now;
                string formattedDate = today.ToString("yyyy-MM-dd");
                DateTime NowDate = Convert.ToDateTime(formattedDate).Date;



                

                var getLetter = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                 join maker in db.tm_user
                                    on l.CREATED_BY equals maker.ID_USER
                                 join position in db.tm_position
                                    on maker.ID_POSITION equals position.ID_POSITION
                                 join tblStatus in db.tr_tbl_status.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition)
                                    on l.ID_LETTER equals tblStatus.ID_LETTER
                                 join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                 join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                     on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                 select new LetterOutput
                                 {
                                     idLetter = l.ID_LETTER,
                                     idDocument = l.ID_DOCUMENT,
                                     letterNumber = l.LETTER_NUMBER,
                                     letterDate = l.LETTER_DATE,
                                     about = l.ABOUT,
                                     attachmentDesc = l.ATTACHMENT_DESC,
                                     priority = l.PRIORITY,
                                     letterTypeValue = ltc.VALUE,
                                     letterTypeCode = l.LETTER_TYPE_CODE,
                                     senderName = l.SENDER_NAME,
                                     senderAddress = l.SENDER_ADDRESS,
                                     letterDateIn = l.LETTER_DATE_IN,
                                     letterNumberIn = l.LETTER_NUMBER_IN,
                                     createdBy = l.CREATED_BY,
                                     createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     fullname = maker.FULLNAME,
                                     positionName = position.POSITION_NAME,
                                     createdOn = l.CREATED_ON,
                                     modifiedOn = l.MODIFIED_ON,
                                     //readStatus = tblStatus.READ_STATUS,
                                     statusCode = l.STATUS_CODE,
                                     statusCodeValue = stc.VALUE
                                 })
                                 .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                          join maker in db.tm_user
                                             on l.CREATED_BY equals maker.ID_USER
                                          join position in db.tm_position
                                             on maker.ID_POSITION equals position.ID_POSITION
                                          join dh in db.tr_disposition_header
                                             on l.ID_LETTER equals dh.ID_LETTER
                                          join dd in db.tr_disposition_child.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition)
                                            on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                          join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                              on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                          select new LetterOutput
                                          {
                                              idLetter = l.ID_LETTER,
                                              idDocument = l.ID_DOCUMENT,
                                              letterNumber = l.LETTER_NUMBER,
                                              letterDate = l.LETTER_DATE,
                                              about = l.ABOUT,
                                              attachmentDesc = l.ATTACHMENT_DESC,
                                              priority = l.PRIORITY,
                                              letterTypeValue = ltc.VALUE,
                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                              senderName = l.SENDER_NAME,
                                              senderAddress = l.SENDER_ADDRESS,
                                              letterDateIn = l.LETTER_DATE_IN,
                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                              createdBy = l.CREATED_BY,
                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                              fullname = maker.FULLNAME,
                                              positionName = position.POSITION_NAME,
                                              createdOn = dd.CREATED_ON,
                                              modifiedOn = dd.MODIFIED_ON,
                                              //readStatus = dd.READ_STATUS,
                                              statusCode = l.STATUS_CODE,
                                              statusCodeValue = stc.VALUE
                                          })
                                 .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2  && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 2).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                        join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                             on l.ID_LETTER equals s.ID_LETTER
                                        join maker in db.tm_user
                                          on s.ID_USER_SENDER equals maker.ID_USER
                                        join position in db.tm_position
                                           on s.ID_POSITION_SENDER equals position.ID_POSITION
                                        join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS == 'Y')
                                           on l.ID_LETTER equals c.ID_LETTER
                                        join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                           on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                        join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                            on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                        select new LetterOutput
                                        {
                                            idLetter = l.ID_LETTER,
                                            idDocument = l.ID_DOCUMENT,
                                            letterNumber = l.LETTER_NUMBER,
                                            letterDate = l.LETTER_DATE,
                                            about = l.ABOUT,
                                            attachmentDesc = l.ATTACHMENT_DESC,
                                            priority = l.PRIORITY,
                                            letterTypeValue = ltc.VALUE,
                                            letterTypeCode = l.LETTER_TYPE_CODE,
                                            senderName = l.SENDER_NAME,
                                            senderAddress = l.SENDER_ADDRESS,
                                            letterDateIn = l.LETTER_DATE_IN,
                                            letterNumberIn = l.LETTER_NUMBER_IN,
                                            createdBy = l.CREATED_BY,
                                            createdByPositionId = l.CREATED_BY_POSITION_ID,
                                            fullname = maker.FULLNAME,
                                            positionName = position.POSITION_NAME,
                                            createdOn = l.CREATED_ON,
                                            modifiedOn = l.MODIFIED_ON,
                                            //readStatus = 99,
                                            statusCode = l.STATUS_CODE,
                                            statusCodeValue = stc.VALUE
                                        })
                                 // delegasi surat keluar
                                 .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2)).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                        join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                             on l.ID_LETTER equals s.ID_LETTER
                                        join maker in db.tm_user
                                          on s.ID_USER_SENDER equals maker.ID_USER
                                        join position in db.tm_position
                                           on s.ID_POSITION_SENDER equals position.ID_POSITION
                                        join c in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && (p.APPROVAL_STATUS == 'Y' || p.APPROVAL_STATUS == 'Z'))
                                           on l.ID_LETTER equals c.ID_LETTER
                                        join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                           on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                        join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                            on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                        select new LetterOutput
                                        {
                                            idLetter = l.ID_LETTER,
                                            idDocument = l.ID_DOCUMENT,
                                            letterNumber = l.LETTER_NUMBER,
                                            letterDate = l.LETTER_DATE,
                                            about = l.ABOUT,
                                            attachmentDesc = l.ATTACHMENT_DESC,
                                            priority = l.PRIORITY,
                                            letterTypeValue = ltc.VALUE,
                                            letterTypeCode = l.LETTER_TYPE_CODE,
                                            senderName = l.SENDER_NAME,
                                            senderAddress = l.SENDER_ADDRESS,
                                            letterDateIn = l.LETTER_DATE_IN,
                                            letterNumberIn = l.LETTER_NUMBER_IN,
                                            createdBy = l.CREATED_BY,
                                            createdByPositionId = l.CREATED_BY_POSITION_ID,
                                            fullname = maker.FULLNAME,
                                            positionName = position.POSITION_NAME,
                                            createdOn = l.CREATED_ON,
                                            modifiedOn = l.MODIFIED_ON,
                                            //readStatus = 99,
                                            statusCode = l.STATUS_CODE,
                                            statusCodeValue = stc.VALUE
                                        })
                                 .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2|| p.LETTER_TYPE_CODE == 3  || p.LETTER_TYPE_CODE == 4 || p.LETTER_TYPE_CODE == 5)).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                        join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                             on l.ID_LETTER equals s.ID_LETTER
                                        join maker in db.tm_user
                                          on s.ID_USER_SENDER equals maker.ID_USER
                                        join position in db.tm_position
                                           on s.ID_POSITION_SENDER equals position.ID_POSITION
                                        join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && (p.APPROVAL_STATUS == 'Y' || p.APPROVAL_STATUS == 'Z'))
                                           on l.ID_LETTER equals c.ID_LETTER
                                        join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                           on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                        join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                            on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                        select new LetterOutput
                                        {
                                            idLetter = l.ID_LETTER,
                                            idDocument = l.ID_DOCUMENT,
                                            letterNumber = l.LETTER_NUMBER,
                                            letterDate = l.LETTER_DATE,
                                            about = l.ABOUT,
                                            attachmentDesc = l.ATTACHMENT_DESC,
                                            priority = l.PRIORITY,
                                            letterTypeValue = ltc.VALUE,
                                            letterTypeCode = l.LETTER_TYPE_CODE,
                                            senderName = l.SENDER_NAME,
                                            senderAddress = l.SENDER_ADDRESS,
                                            letterDateIn = l.LETTER_DATE_IN,
                                            letterNumberIn = l.LETTER_NUMBER_IN,
                                            createdBy = l.CREATED_BY,
                                            createdByPositionId = l.CREATED_BY_POSITION_ID,
                                            fullname = maker.FULLNAME,
                                            positionName = position.POSITION_NAME,
                                            createdOn = l.CREATED_ON,
                                            modifiedOn = l.MODIFIED_ON,
                                            //readStatus = 99,
                                            statusCode = l.STATUS_CODE,
                                            statusCodeValue = stc.VALUE
                                        })



                                 .Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 5 && p.LETTER_TYPE_CODE == 2).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.LETTER_DATE)
                                        join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                          on l.ID_LETTER equals s.ID_LETTER
                                        join maker in db.tm_user
                                           on s.ID_USER_SENDER equals maker.ID_USER
                                        join position in db.tm_position
                                           on s.ID_POSITION_SENDER equals position.ID_POSITION
                                        join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                               on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                        join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                               on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                        select new LetterOutput
                                        {
                                            idLetter = l.ID_LETTER,
                                            idDocument = l.ID_DOCUMENT,
                                            letterNumber = l.LETTER_NUMBER,
                                            letterDate = l.LETTER_DATE,
                                            about = l.ABOUT,
                                            attachmentDesc = l.ATTACHMENT_DESC,
                                            priority = l.PRIORITY,
                                            letterTypeValue = ltc.VALUE,
                                            letterTypeCode = l.LETTER_TYPE_CODE,
                                            senderName = l.SENDER_NAME,
                                            senderAddress = l.SENDER_ADDRESS,
                                            letterDateIn = l.LETTER_DATE_IN,
                                            letterNumberIn = l.LETTER_NUMBER_IN,
                                            createdBy = l.CREATED_BY,
                                            createdByPositionId = l.CREATED_BY_POSITION_ID,
                                            fullname = maker.FULLNAME,
                                            positionName = position.POSITION_NAME,
                                            createdOn = l.CREATED_ON,
                                            modifiedOn = l.MODIFIED_ON,
                                            //readStatus = 99,
                                            statusCode = l.STATUS_CODE,
                                            statusCodeValue = stc.VALUE
                                        })
                                 .Union(from l in db.tm_letter.Where(p => ( p.STATUS_CODE == 2 || p.STATUS_CODE == 4) && p.STATUS_CODE != 0).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                        join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                             on l.ID_LETTER equals s.ID_LETTER
                                        join maker in db.tm_user
                                          on s.ID_USER_SENDER equals maker.ID_USER
                                        join position in db.tm_position
                                           on s.ID_POSITION_SENDER equals position.ID_POSITION
                                        join c in db.tr_checker.Where(p => ListDir.Contains(p.ID_USER_CHECKER) && p.APPROVAL_STATUS != 'X')
                                           on l.ID_LETTER equals c.ID_LETTER
                                        join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                           on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                        join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                            on l.STATUS_CODE equals stc.ATTRIBUTEVALUE

                                        select new LetterOutput
                                        {
                                            idLetter = l.ID_LETTER,
                                            idDocument = l.ID_DOCUMENT,
                                            letterNumber = l.LETTER_NUMBER,
                                            letterDate = l.LETTER_DATE,
                                            about = l.ABOUT,
                                            attachmentDesc = l.ATTACHMENT_DESC,
                                            priority = l.PRIORITY,
                                            letterTypeValue = ltc.VALUE,
                                            letterTypeCode = l.LETTER_TYPE_CODE,
                                            senderName = l.SENDER_NAME,
                                            senderAddress = l.SENDER_ADDRESS,
                                            letterDateIn = l.LETTER_DATE_IN,
                                            letterNumberIn = l.LETTER_NUMBER_IN,
                                            createdBy = l.CREATED_BY,
                                            createdByPositionId = l.CREATED_BY_POSITION_ID,
                                            fullname = maker.FULLNAME,
                                            positionName = position.POSITION_NAME,
                                            createdOn = l.CREATED_ON,
                                            modifiedOn = l.MODIFIED_ON,
                                            //readStatus = 99,
                                            statusCode = l.STATUS_CODE,
                                            statusCodeValue = stc.VALUE
                                        }) .Union(from l in db.tm_letter.Where(p => (p.STATUS_CODE == 2 || p.STATUS_CODE == 4) && p.STATUS_CODE != 0).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                        join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                             on l.ID_LETTER equals s.ID_LETTER
                                        join maker in db.tm_user
                                          on s.ID_USER_SENDER equals maker.ID_USER
                                        join position in db.tm_position
                                           on s.ID_POSITION_SENDER equals position.ID_POSITION
                                        join c in db.tr_checker.Where(p => ListDir.Contains(p.ID_USER_CHECKER) && p.APPROVAL_STATUS == 'Y')
                                           on l.ID_LETTER equals c.ID_LETTER
                                        join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                           on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                        join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                            on l.STATUS_CODE equals stc.ATTRIBUTEVALUE

                                        select new LetterOutput
                                        {
                                            idLetter = l.ID_LETTER,
                                            idDocument = l.ID_DOCUMENT,
                                            letterNumber = l.LETTER_NUMBER,
                                            letterDate = l.LETTER_DATE,
                                            about = l.ABOUT,
                                            attachmentDesc = l.ATTACHMENT_DESC,
                                            priority = l.PRIORITY,
                                            letterTypeValue = ltc.VALUE,
                                            letterTypeCode = l.LETTER_TYPE_CODE,
                                            senderName = l.SENDER_NAME,
                                            senderAddress = l.SENDER_ADDRESS,
                                            letterDateIn = l.LETTER_DATE_IN,
                                            letterNumberIn = l.LETTER_NUMBER_IN,
                                            createdBy = l.CREATED_BY,
                                            createdByPositionId = l.CREATED_BY_POSITION_ID,
                                            fullname = maker.FULLNAME,
                                            positionName = position.POSITION_NAME,
                                            createdOn = l.CREATED_ON,
                                            modifiedOn = l.MODIFIED_ON,
                                            //readStatus = 99,
                                            statusCode = l.STATUS_CODE,
                                            statusCodeValue = stc.VALUE
                                        })
                                         //delegasi pemeriksa, pemeriksa lainya dan kepada
                                        .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 3  || p.LETTER_TYPE_CODE == 4 || p.LETTER_TYPE_CODE == 5)).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                               join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                    on l.ID_LETTER equals s.ID_LETTER
                                               join maker in db.tm_user
                                                 on s.ID_USER_SENDER equals maker.ID_USER
                                               join position in db.tm_position
                                                  on s.ID_POSITION_SENDER equals position.ID_POSITION
                                               join c in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && (p.APPROVAL_STATUS == 'Y' || p.APPROVAL_STATUS == 'Z'))
                                                  on l.ID_LETTER equals c.ID_LETTER
                                               join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                  on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                               join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                   on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                               select new LetterOutput
                                               {
                                                   idLetter = l.ID_LETTER,
                                                   idDocument = l.ID_DOCUMENT,
                                                   letterNumber = l.LETTER_NUMBER,
                                                   letterDate = l.LETTER_DATE,
                                                   about = l.ABOUT,
                                                   attachmentDesc = l.ATTACHMENT_DESC,
                                                   priority = l.PRIORITY,
                                                   letterTypeValue = ltc.VALUE,
                                                   letterTypeCode = l.LETTER_TYPE_CODE,
                                                   senderName = l.SENDER_NAME,
                                                   senderAddress = l.SENDER_ADDRESS,
                                                   letterDateIn = l.LETTER_DATE_IN,
                                                   letterNumberIn = l.LETTER_NUMBER_IN,
                                                   createdBy = l.CREATED_BY,
                                                   createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                   fullname = maker.FULLNAME,
                                                   positionName = position.POSITION_NAME,
                                                   createdOn = l.CREATED_ON,
                                                   modifiedOn = l.MODIFIED_ON,
                                                   //readStatus = 99,
                                                   statusCode = l.STATUS_CODE,
                                                   statusCodeValue = stc.VALUE
                                               })
                                                   ////get surat masuk memo penerima
                                                   //.Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderByDescending(p => p.CREATED_ON)
                                                   //       join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   //            on l.ID_LETTER equals s.ID_LETTER

                                                   //       join position in db.tm_position
                                                   //          on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                   //       join c in db.tr_receiver.Where(p => p.ID_USER_RECEIVER == sessionUser.idUser)
                                                   //          on l.ID_LETTER equals c.ID_LETTER
                                                   //       join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                                   //      on c.ID_USER_RECEIVER equals maker.ID_USER
                                                   //       join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                   //          on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                   //       join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                   //           on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                   //       select new LetterOutput
                                                   //       {
                                                   //           idLetter = l.ID_LETTER,
                                                   //           idDocument = l.ID_DOCUMENT,
                                                   //           letterNumber = l.LETTER_NUMBER,
                                                   //           letterDate = l.LETTER_DATE,
                                                   //           about = l.ABOUT,
                                                   //           attachmentDesc = l.ATTACHMENT_DESC,
                                                   //           priority = l.PRIORITY,
                                                   //           letterTypeValue = ltc.VALUE,
                                                   //           letterTypeCode = l.LETTER_TYPE_CODE,
                                                   //           senderName = l.SENDER_NAME,
                                                   //           senderAddress = l.SENDER_ADDRESS,
                                                   //           letterDateIn = l.LETTER_DATE_IN,
                                                   //           letterNumberIn = l.LETTER_NUMBER_IN,
                                                   //           createdBy = l.CREATED_BY,
                                                   //           createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                   //           fullname = maker.FULLNAME,
                                                   //           positionName = position.POSITION_NAME,
                                                   //           createdOn = l.CREATED_ON,
                                                   //           modifiedOn = l.MODIFIED_ON,
                                                   //           readStatus = 99,
                                                   //           statusCode = l.STATUS_CODE,
                                                   //           statusCodeValue = stc.VALUE
                                                   //       })

                                                   //get surat masuk memo Cc
                                                   .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                                          join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                               on l.ID_LETTER equals s.ID_LETTER

                                                          join position in db.tm_position
                                                             on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                          join c in db.tr_copy.Where(p => p.ID_USER_COPY == sessionUser.idUser)
                                                             on l.ID_LETTER equals c.ID_LETTER
                                                          join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                                         on c.ID_USER_COPY equals maker.ID_USER
                                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                             on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                          join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                              on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                          select new LetterOutput
                                                          {
                                                              idLetter = l.ID_LETTER,
                                                              idDocument = l.ID_DOCUMENT,
                                                              letterNumber = l.LETTER_NUMBER,
                                                              letterDate = l.LETTER_DATE,
                                                              about = l.ABOUT,
                                                              attachmentDesc = l.ATTACHMENT_DESC,
                                                              priority = l.PRIORITY,
                                                              letterTypeValue = ltc.VALUE,
                                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                                              senderName = l.SENDER_NAME,
                                                              senderAddress = l.SENDER_ADDRESS,
                                                              letterDateIn = l.LETTER_DATE_IN,
                                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                                              createdBy = l.CREATED_BY,
                                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                              fullname = maker.FULLNAME,
                                                              positionName = position.POSITION_NAME,
                                                              createdOn = l.CREATED_ON,
                                                              modifiedOn = l.MODIFIED_ON,
                                                              //readStatus = 99,
                                                              statusCode = l.STATUS_CODE,
                                                              statusCodeValue = stc.VALUE
                                                          })
                                                   .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 0 && p.STATUS_CODE != 4 && p.STATUS_CODE != 5).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                                                   join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                                        on l.ID_LETTER equals s.ID_LETTER
                                                                   join position in db.tm_position
                                                                      on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                                   join c in db.tr_deliberation.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE != 1)
                                                                      on l.ID_LETTER equals c.ID_LETTER
                                                                   join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                                                  on c.ID_USER equals maker.ID_USER
                                                                   join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                                      on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                                   join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                                       on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                                   select new LetterOutput
                                                                   {
                                                                       idLetter = l.ID_LETTER,
                                                                       idDocument = l.ID_DOCUMENT,
                                                                       letterNumber = l.LETTER_NUMBER,
                                                                       letterDate = l.LETTER_DATE,
                                                                       about = l.ABOUT,
                                                                       attachmentDesc = l.ATTACHMENT_DESC,
                                                                       priority = l.PRIORITY,
                                                                       letterTypeValue = ltc.VALUE,
                                                                       letterTypeCode = l.LETTER_TYPE_CODE,
                                                                       senderName = l.SENDER_NAME,
                                                                       senderAddress = l.SENDER_ADDRESS,
                                                                       letterDateIn = l.LETTER_DATE_IN,
                                                                       letterNumberIn = l.LETTER_NUMBER_IN,
                                                                       createdBy = l.CREATED_BY,
                                                                       createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                                       fullname = maker.FULLNAME,
                                                                       positionName = position.POSITION_NAME,
                                                                       createdOn = l.CREATED_ON,
                                                                       modifiedOn = l.MODIFIED_ON,
                                                                       //readStatus = 99,
                                                                       statusCode = l.STATUS_CODE,
                                                                       statusCodeValue = stc.VALUE,
                                                                       
                                                        })
                                                   //delegasi delibration
                                                   .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 0 && p.STATUS_CODE != 4 && p.STATUS_CODE != 5).OrderBy(p => p.STATUS_CODE).OrderByDescending(p => p.CREATED_ON)
                                                          join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                               on l.ID_LETTER equals s.ID_LETTER
                                                          join position in db.tm_position
                                                             on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                          join c in db.tr_deliberation.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && p.STATUS_CODE != 1)
                                                             on l.ID_LETTER equals c.ID_LETTER
                                                          join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                                         on c.ID_USER_DELEGASI equals maker.ID_USER
                                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                             on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                          join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                              on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                          //join dgl in db.tr_delegasi.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && NowDate >= p.STARTDATE.Date && NowDate <= p.ENDDATE.Date)
                                                          //   on c.ID_USER_DELEGASI equals dgl.ID_USER_DELEGASI
                                                          select new LetterOutput
                                                          {
                                                              idLetter = l.ID_LETTER,
                                                              idDocument = l.ID_DOCUMENT,
                                                              letterNumber = l.LETTER_NUMBER,
                                                              letterDate = l.LETTER_DATE,
                                                              about = l.ABOUT,
                                                              attachmentDesc = l.ATTACHMENT_DESC,
                                                              priority = l.PRIORITY,
                                                              letterTypeValue = ltc.VALUE,
                                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                                              senderName = l.SENDER_NAME,
                                                              senderAddress = l.SENDER_ADDRESS,
                                                              letterDateIn = l.LETTER_DATE_IN,
                                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                                              createdBy = l.CREATED_BY,
                                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                              fullname = maker.FULLNAME,
                                                              positionName = position.POSITION_NAME,
                                                              createdOn = l.CREATED_ON,
                                                              modifiedOn = l.MODIFIED_ON,
                                                              //readStatus = 99,
                                                              statusCode = l.STATUS_CODE,
                                                              statusCodeValue = stc.VALUE,

                                                          })
                                                   .AsQueryable();



                if (pr.startDate != null && pr.endDate != null)
                {
                    DateTime startDate = Convert.ToDateTime(pr.startDate).Date;
                    DateTime endDate = Convert.ToDateTime(pr.endDate).Date;
                    getLetter = getLetter.Where(p => p.letterDate.Date >= startDate && p.letterDate.Date <= endDate);
                }
                if (pr.letterNumber != null)
                {
                    getLetter = getLetter.Where(p => p.letterNumber.Contains(pr.letterNumber) || p.letterNumberIn.Contains(pr.letterNumber));
                }
                if (pr.about != null) 
                {
                    getLetter = getLetter.Where(p => p.about.Contains(pr.about));
                }
                if (pr.letterType != 0 && pr.letterType != null) 
                {
                    getLetter = getLetter.Where(p => p.letterTypeCode == pr.letterType);
                }
                //if (pr.readStatus != 1 && pr.readStatus != null)
                //{
                //    getLetter = getLetter.Where(p => p.readStatus == pr.readStatus);
                //}
                if (pr.onprogress =="2")
                {

                    getLetter = getLetter.Where(p => p.letterNumber == null || p.letterNumber == "NO_LETTER");

                }
                recordsTotal = getLetter.Count();

                var letterList = getLetter.OrderBy(p => p.statusCode).OrderByDescending(p => p.modifiedOn).Skip(skip).Take(pr.pageSize).OrderByDescending(p => p.createdOn).ToList();
                int letterListCount = letterList.Count();
                List<LetterOutput> letterListFinal = new List<LetterOutput>();
                foreach (var item in letterList)
                {
                    //get count checker done/ongoing approve
                    var allChecker = db.tr_checker.Where(p => p.ID_LETTER == item.idLetter).AsQueryable();
                    var countCheckerDO = allChecker.Where(p => p.APPROVAL_STATUS == 'Y' || p.APPROVAL_STATUS == 'Z').Count();
                    var countChecker = allChecker.Count();
                    letterListFinal.Add(new LetterOutput
                    {
                        idLetter = item.idLetter,
                        idDocument = item.idDocument,
                        letterNumber = item.letterNumber,
                        letterDate = item.letterDate,
                        about = item.about,
                        attachmentDesc = item.attachmentDesc,
                        priority = item.priority,
                        letterTypeValue = item.letterTypeValue,
                        letterTypeCode = item.letterTypeCode,
                        senderName = item.senderName,
                        senderAddress = item.senderAddress,
                        letterDateIn = item.letterDateIn,
                        letterNumberIn = item.letterNumberIn,
                        createdBy = item.createdBy,
                        createdByPositionId = item.createdByPositionId,
                        fullname = item.fullname,
                        positionName = item.positionName,
                        createdOn = item.createdOn,
                        modifiedOn = item.modifiedOn,
                        statusCode = item.statusCode,
                        statusCodeValue = item.statusCodeValue,
                        approvalcounter = countCheckerDO + " / " + countChecker
                    });
                }
                float pageLengthCoumt = (float)recordsTotal / (float)20;
                int pageLength = (int)Math.Ceiling(pageLengthCoumt);
                LetterOutputWeb result = new LetterOutputWeb();
                result.draw = pr.draw == "0" ? "1": pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.pagelength = pageLength;
                result.limit = letterListCount < 20 ? skip + letterListCount : skip + 20;
                result.data = letterListFinal.OrderBy(p => p.statusCode).ToList();

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DeleteLetter(ParamDeleteLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter).FirstOrDefault();
                if (dtLetter != null)
                {
                    dtLetter.STATUS_CODE = 0;
                    dtLetter.MODIFIED_ON = DateTime.Now;
                    dtLetter.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Result = pr.idLetter;
                    output.Message = "Success delete letter";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed delete letter";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetOutboxLetter(ParamGetLetterWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<DocumentOutput> data = new List<DocumentOutput>();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                
                var getLetter = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 1 &&(p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6 )).OrderByDescending(p => p.LETTER_DATE)
                                 join maker in db.tm_user
                                    on l.CREATED_BY equals maker.ID_USER
                                 join position in db.tm_position
                                    on maker.ID_POSITION equals position.ID_POSITION
                                 //join tblStatus in db.tr_tbl_status.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition)
                                 //    on l.ID_LETTER equals tblStatus.ID_LETTER
                                 join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                 join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                         on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                 select new LetterOutput
                                 {
                                     idLetter = l.ID_LETTER,
                                     idDocument = l.ID_DOCUMENT,
                                     letterNumber = l.LETTER_NUMBER,
                                     letterDate = l.LETTER_DATE,
                                     about = l.ABOUT,
                                     attachmentDesc = l.ATTACHMENT_DESC,
                                     priority = l.PRIORITY,
                                     letterTypeValue = ltc.VALUE,
                                     letterTypeCode = l.LETTER_TYPE_CODE,
                                     senderName = l.SENDER_NAME,
                                     senderAddress = l.SENDER_ADDRESS,
                                     letterDateIn = l.LETTER_DATE_IN,
                                     letterNumberIn = l.LETTER_NUMBER_IN,
                                     createdBy = l.CREATED_BY,
                                     createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     fullname = maker.FULLNAME,
                                     positionName = position.POSITION_NAME,
                                     createdOn = l.CREATED_ON,
                                     modifiedOn = l.MODIFIED_ON,
                                     statusCode = l.STATUS_CODE,
                                     statusCodeValue = stc.VALUE,
                                    
                                     //readStatus=tblStatus.READ_STATUS
                                 }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser  && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6 )).OrderByDescending(p => p.LETTER_DATE)
                                          join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                            on l.ID_LETTER equals s.ID_LETTER
                                          join maker in db.tm_user
                                             on s.ID_USER_SENDER equals maker.ID_USER
                                          join position in db.tm_position
                                             on s.ID_POSITION_SENDER equals position.ID_POSITION
                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                          join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                 on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                          select new LetterOutput
                                          {
                                              idLetter = l.ID_LETTER,
                                              idDocument = l.ID_DOCUMENT,
                                              letterNumber = l.LETTER_NUMBER,
                                              letterDate = l.LETTER_DATE,
                                              about = l.ABOUT,
                                              attachmentDesc = l.ATTACHMENT_DESC,
                                              priority = l.PRIORITY,
                                              letterTypeValue = ltc.VALUE,
                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                              senderName = l.SENDER_NAME,
                                              senderAddress = l.SENDER_ADDRESS,
                                              letterDateIn = l.LETTER_DATE_IN,
                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                              createdBy = l.CREATED_BY,
                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                              fullname = maker.FULLNAME,
                                              positionName = position.POSITION_NAME,
                                              createdOn = l.CREATED_ON,
                                              modifiedOn = l.MODIFIED_ON,
                                              statusCode = l.STATUS_CODE,
                                              statusCodeValue = stc.VALUE,
                                             
                                          }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser  && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                                   join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                     on l.ID_LETTER equals s.ID_LETTER
                                                   join maker in db.tm_user
                                                      on s.ID_USER_SENDER equals maker.ID_USER
                                                   join position in db.tm_position
                                                      on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                   join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                          on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                   join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                          on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                   select new LetterOutput
                                                   {
                                                       idLetter = l.ID_LETTER,
                                                       idDocument = l.ID_DOCUMENT,
                                                       letterNumber = l.LETTER_NUMBER,
                                                       letterDate = l.LETTER_DATE,
                                                       about = l.ABOUT,
                                                       attachmentDesc = l.ATTACHMENT_DESC,
                                                       priority = l.PRIORITY,
                                                       letterTypeValue = ltc.VALUE,
                                                       letterTypeCode = l.LETTER_TYPE_CODE,
                                                       senderName = l.SENDER_NAME,
                                                       senderAddress = l.SENDER_ADDRESS,
                                                       letterDateIn = l.LETTER_DATE_IN,
                                                       letterNumberIn = l.LETTER_NUMBER_IN,
                                                       createdBy = l.CREATED_BY,
                                                       createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                       fullname = maker.FULLNAME,
                                                       positionName = position.POSITION_NAME,
                                                       createdOn = l.CREATED_ON,
                                                       modifiedOn = l.MODIFIED_ON,
                                                       statusCode = l.STATUS_CODE,
                                                       statusCodeValue = stc.VALUE,
                                                   }).Union(from l in db.tm_letter.Where(p =>  p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                                   join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                     on l.ID_LETTER equals s.ID_LETTER
                                                   join maker in db.tm_user
                                                      on s.ID_USER_SENDER equals maker.ID_USER
                                                   join position in db.tm_position
                                                      on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                   join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                          on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                   join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                          on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                   join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS != 'X')
                                                      on l.ID_LETTER equals c.ID_LETTER
                                                   select new LetterOutput
                                                   {
                                                       idLetter = l.ID_LETTER,
                                                       idDocument = l.ID_DOCUMENT,
                                                       letterNumber = l.LETTER_NUMBER,
                                                       letterDate = l.LETTER_DATE,
                                                       about = l.ABOUT,
                                                       attachmentDesc = l.ATTACHMENT_DESC,
                                                       priority = l.PRIORITY,
                                                       letterTypeValue = ltc.VALUE,
                                                       letterTypeCode = l.LETTER_TYPE_CODE,
                                                       senderName = l.SENDER_NAME,
                                                       senderAddress = l.SENDER_ADDRESS,
                                                       letterDateIn = l.LETTER_DATE_IN,
                                                       letterNumberIn = l.LETTER_NUMBER_IN,
                                                       createdBy = l.CREATED_BY,
                                                       createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                       fullname = maker.FULLNAME,
                                                       positionName = position.POSITION_NAME,
                                                       createdOn = l.CREATED_ON,
                                                       modifiedOn = l.MODIFIED_ON,
                                                       statusCode = l.STATUS_CODE,
                                                       statusCodeValue = stc.VALUE,
                                                       //approvalstatus = c.APPROVAL_STATUS

                                                   }).Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 0 && p.STATUS_CODE != 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                                            join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                              on l.ID_LETTER equals s.ID_LETTER
                                                            join maker in db.tm_user
                                                               on s.ID_USER_SENDER equals maker.ID_USER
                                                            join position in db.tm_position
                                                               on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                            join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                                   on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                            join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                                   on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                            join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS != 'X')
                                                               on l.ID_LETTER equals c.ID_LETTER
                                                            select new LetterOutput
                                                            {
                                                                idLetter = l.ID_LETTER,
                                                                idDocument = l.ID_DOCUMENT,
                                                                letterNumber = l.LETTER_NUMBER,
                                                                letterDate = l.LETTER_DATE,
                                                                about = l.ABOUT,
                                                                attachmentDesc = l.ATTACHMENT_DESC,
                                                                priority = l.PRIORITY,
                                                                letterTypeValue = ltc.VALUE,
                                                                letterTypeCode = l.LETTER_TYPE_CODE,
                                                                senderName = l.SENDER_NAME,
                                                                senderAddress = l.SENDER_ADDRESS,
                                                                letterDateIn = l.LETTER_DATE_IN,
                                                                letterNumberIn = l.LETTER_NUMBER_IN,
                                                                createdBy = l.CREATED_BY,
                                                                createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                                fullname = maker.FULLNAME,
                                                                positionName = position.POSITION_NAME,
                                                                createdOn = l.CREATED_ON,
                                                                modifiedOn = l.MODIFIED_ON,
                                                                statusCode = l.STATUS_CODE,
                                                                statusCodeValue = stc.VALUE,
                                                                //approvalstatus = c.APPROVAL_STATUS
                                                            }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    DateTime startDate = Convert.ToDateTime(pr.startDate).Date;
                    DateTime endDate = Convert.ToDateTime(pr.endDate).Date;
                    getLetter = getLetter.Where(p => p.letterDate.Date >= startDate && p.letterDate.Date <= endDate);
                }
                if (pr.letterNumber != null)
                {
                    getLetter = getLetter.Where(p => p.letterNumber.Contains(pr.letterNumber) || p.letterNumberIn.Contains(pr.letterNumber));
                }
                if (pr.about != null)
                {
                    getLetter = getLetter.Where(p => p.about.Contains(pr.about));
                }
                if (pr.letterType != 0 && pr.letterType != null)
                {
                    getLetter = getLetter.Where(p => p.letterTypeCode == pr.letterType);
                }
                
                //if (pr.readStatus != 1 && pr.readStatus != null)
                //{

                //    getLetter = getLetter.Where(p => p.readStatus == pr.readStatus);
                    
                //}
				if (pr.onprogress =="2")
				{

					getLetter = getLetter.Where(p => p.letterNumber == null || p.letterNumber =="NO_LETTER");

				}


				recordsTotal = getLetter.Count();

                var letterList = getLetter.OrderByDescending(p => p.modifiedOn).Skip(skip).Take(pr.pageSize).ToList();
                int letterListCount = letterList.Count();
                List<LetterOutput> letterListFinal = new List<LetterOutput>();
                foreach (var item in letterList)
                {
                    //get count checker done/ongoing approve
                    var allChecker = db.tr_checker.Where(p => p.ID_LETTER == item.idLetter).AsQueryable();
                    var countCheckerDO = allChecker.Where(p => p.APPROVAL_STATUS == 'Y' || p.APPROVAL_STATUS == 'Z').Count();
                    var countChecker = allChecker.Count();
                    letterListFinal.Add(new LetterOutput
                    {
                        idLetter = item.idLetter,
                        idDocument = item.idDocument,
                        letterNumber = item.letterNumber,
                        letterDate = item.letterDate,
                        about = item.about,
                        attachmentDesc = item.attachmentDesc,
                        priority = item.priority,
                        letterTypeValue = item.letterTypeValue,
                        letterTypeCode = item.letterTypeCode,
                        senderName = item.senderName,
                        senderAddress = item.senderAddress,
                        letterDateIn = item.letterDateIn,
                        letterNumberIn = item.letterNumberIn,
                        createdBy = item.createdBy,
                        createdByPositionId = item.createdByPositionId,
                        fullname = item.fullname,
                        positionName = item.positionName,
                        createdOn = item.createdOn,
                        modifiedOn = item.modifiedOn,
                        statusCode = item.statusCode,
                        statusCodeValue = item.statusCodeValue,
                        approvalcounter = countCheckerDO + " / " + countChecker
                    });
                }
                var getLetterDraft = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1 && p.LETTER_TYPE_CODE == 2).OrderByDescending(p => p.MODIFIED_ON)
                                 join maker in db.tm_user
                                    on l.CREATED_BY equals maker.ID_USER
                                 join position in db.tm_position
                                    on maker.ID_POSITION equals position.ID_POSITION
                                 join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                 select new LetterOutput
                                 {
                                     idLetter = l.ID_LETTER,
                                     idDocument = l.ID_DOCUMENT,
                                     letterNumber = l.LETTER_NUMBER,
                                     letterDate = l.LETTER_DATE,
                                     about = l.ABOUT,
                                     attachmentDesc = l.ATTACHMENT_DESC,
                                     priority = l.PRIORITY,
                                     letterTypeValue = ltc.VALUE,
                                     letterTypeCode = l.LETTER_TYPE_CODE,
                                     senderName = l.SENDER_NAME,
                                     senderAddress = l.SENDER_ADDRESS,
                                     letterDateIn = l.LETTER_DATE_IN,
                                     letterNumberIn = l.LETTER_NUMBER_IN,
                                     createdBy = l.CREATED_BY,
                                     createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     fullname = maker.FULLNAME,
                                     positionName = position.POSITION_NAME,
                                     createdOn = l.CREATED_ON,
                                     modifiedOn = l.MODIFIED_ON
                                 }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1 && p.LETTER_TYPE_CODE == 6).OrderByDescending(p => p.MODIFIED_ON)
                                          join maker in db.tm_user
                                             on l.CREATED_BY equals maker.ID_USER
                                          join position in db.tm_position
                                             on maker.ID_POSITION equals position.ID_POSITION
                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                          select new LetterOutput
                                          {
                                              idLetter = l.ID_LETTER,
                                              idDocument = l.ID_DOCUMENT,
                                              letterNumber = l.LETTER_NUMBER,
                                              letterDate = l.LETTER_DATE,
                                              about = l.ABOUT,
                                              attachmentDesc = l.ATTACHMENT_DESC,
                                              priority = l.PRIORITY,
                                              letterTypeValue = ltc.VALUE,
                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                              senderName = l.SENDER_NAME,
                                              senderAddress = l.SENDER_ADDRESS,
                                              letterDateIn = l.LETTER_DATE_IN,
                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                              createdBy = l.CREATED_BY,
                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                              fullname = maker.FULLNAME,
                                              positionName = position.POSITION_NAME,
                                              createdOn = l.CREATED_ON,
                                              modifiedOn = l.MODIFIED_ON
                                          }).Count();
                //var getLetterDraft = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.MODIFIED_ON)
                //                      join maker in db.tm_user
                //                         on l.CREATED_BY equals maker.ID_USER
                //                      join position in db.tm_position
                //                         on maker.ID_POSITION equals position.ID_POSITION
                //                      join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                //                             on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                //                      select new LetterOutput
                //                      {
                //                          idLetter = l.ID_LETTER,
                //                          idDocument = l.ID_DOCUMENT,
                //                          letterNumber = l.LETTER_NUMBER,
                //                          letterDate = l.LETTER_DATE,
                //                          about = l.ABOUT,
                //                          attachmentDesc = l.ATTACHMENT_DESC,
                //                          priority = l.PRIORITY,
                //                          letterTypeValue = ltc.VALUE,
                //                          letterTypeCode = l.LETTER_TYPE_CODE,
                //                          senderName = l.SENDER_NAME,
                //                          senderAddress = l.SENDER_ADDRESS,
                //                          letterDateIn = l.LETTER_DATE_IN,
                //                          letterNumberIn = l.LETTER_NUMBER_IN,
                //                          createdBy = l.CREATED_BY,
                //                          createdByPositionId = l.CREATED_BY_POSITION_ID,
                //                          fullname = maker.FULLNAME,
                //                          positionName = position.POSITION_NAME,
                //                          createdOn = l.CREATED_ON,
                //                          modifiedOn = l.MODIFIED_ON
                //                      }).Count();
                float pageLengthCoumt = (float)recordsTotal / (float)20;
                int pageLength = (int)Math.Ceiling(pageLengthCoumt);
              
                LetterOutputWeb result = new LetterOutputWeb();
                result.draw = pr.draw == "0" ? "1" : pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.pagelength = pageLength;
                result.limit = letterListCount < 20 ? skip + letterListCount : skip + 20;
                result.outboxCount = recordsTotal;
                result.draftCount = getLetterDraft;
                result.data = letterListFinal.OrderBy(p => p.statusCode).ToList();

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel ResetPassword(ParamUpdatePassword pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var dtUser = db.tm_user.Where(p => p.ID_USER == sessionUser.idUser).FirstOrDefault();
                if (dtUser != null)
                {
                    var passwordBytes = System.Text.Encoding.UTF8.GetBytes(pr.newPassword);
                    var passwordEncode = System.Convert.ToBase64String(passwordBytes);

                    var passwordLamaBytes = System.Text.Encoding.UTF8.GetBytes(pr.passLama);
                    var passwordLamaEncode = System.Convert.ToBase64String(passwordLamaBytes);

                    if (passwordLamaEncode == dtUser.PASSWORD)
                    {
                        dtUser.PASSWORD = passwordEncode;
                        dtUser.MODIFIED_ON = DateTime.Now;
                        dtUser.MODIFIED_BY = sessionUser.idUser;
                        db.SaveChanges();

                        output.Status = "OK";
                        output.Result = sessionUser.idUser;
                        output.Message = "Berhasil merubah password";
                    }
                    else
                    {
                        output.Status = "NG";
                        output.Message = "Password lama salah";
                    }

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Gagal merubah password";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailLetterSM(ParamGetDetailLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailLetter letter = new OutputDetailLetter();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join dtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "DOCUMENT_TYPE_CODE")
                                        on l.DOCUMENT_TYPE_CODE equals dtc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                select new LetterOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    letterDateIn = l.LETTER_DATE_IN,
                                    letterNumberIn = l.LETTER_NUMBER_IN,
                                    documentTypeCode = l.DOCUMENT_TYPE_CODE,
                                    documentTypeCodeValue = dtc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;

                    InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");

                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        select new OutputListReceiver
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    select new OutputListCopy
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetter
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachment
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionLetter
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();

                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;

                    //update status baca
                    var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                    if (tblStatus != null)
                    {
                        tblStatus.READ_STATUS = 0;
                        tblStatus.MODIFIED_ON = DateTime.Now;
                        tblStatus.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Letter";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail letter";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DeleteAttachment(ParamDeleteAttachment pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var dtAttachment = db.tr_attachment.Where(p => p.ID_ATTACHMENT == pr.idAttachment).FirstOrDefault();
                
                var dtLetterAtt = db.tr_attachment.Where(p => p.ID_LETTER == dtAttachment.ID_LETTER).Count();

                var dtletter = db.tm_letter.Where(p => p.ID_LETTER == dtAttachment.ID_LETTER).FirstOrDefault();


                if (dtAttachment != null)
                {
                    dtAttachment.STATUS_CODE = 0;
                    dtAttachment.MODIFIED_BY = sessionUser.idUser;
                    dtAttachment.MODIFIED_ON = DateTime.Now;
                    db.SaveChanges();

                    dtletter.ATTACHMENT_DESC =Convert.ToString(dtLetterAtt - 1);
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Result = sessionUser.idUser;
                    output.Message = "Success Delete attachment";

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed delete attachment";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel ReceiveCheckedDoc(ParamReceiveCheckedDoc pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<Guid> LisId = pr.listIdDoc.Split(',').Select(Guid.Parse).ToList();

                for (int i = 0; i < LisId.Count(); i++)
                {
                    var dtDocument = db.tr_document.Where(p => p.ID_DOCUMENT == LisId[i]).FirstOrDefault();
                    var dtDocReceiver = db.tr_document_receiver.Where(p => p.ID_DOCUMENT == LisId[i]
                                    && p.ID_UNIT == sessionUser.idUnit && p.ID_USER_TU == sessionUser.idUser).FirstOrDefault();
                    if (sessionUser.idGroup == "S")
                    {
                        dtDocReceiver = db.tr_document_receiver.Where(p => p.ID_DOCUMENT == LisId[i]
                                    && p.ID_USER_TU == sessionUser.idUser).FirstOrDefault();
                    }
                    if (dtDocument != null && dtDocReceiver != null)
                    {
                        dtDocument.STATUS_CODE = 5;
                        dtDocument.MODIFIED_ON = DateTime.Now;
                        dtDocument.MODIFIED_BY = sessionUser.idUser;

                        dtDocReceiver.STATUS_CODE = 5;
                        dtDocReceiver.RECEIVED_DATE = DateTime.Now;
                        dtDocReceiver.MODIFIED_ON = DateTime.Now;
                        dtDocReceiver.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();

                        var documentTypeValue = GetStringMapping("tr_document", "DOCUMENT_TYPE", dtDocument.DOCUMENT_TYPE);
                        var description = "Dokumen Masuk (" + documentTypeValue + ") diterima oleh " + sessionUser.nip + "-" + sessionUser.nama + " - " + "Sudah diterima";
                        //insert log
                        var insertLogDocument = InsertLogDocument(dtDocument.ID_DOCUMENT, sessionUser, description, "Sudah diterima");
                        if (!insertLogDocument)
                        {
                            output.Status = "NG";
                            output.Message = "Error Insert Log!";
                            return output;
                        }
                    }
                }

                output.Status = "OK";
                //output.Result = dtDocReceiver.ID_DOCUMENT_RECEIVER;
                output.Message = "Success Receive Document";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDivision(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            select new AdminDivisionOutput
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllUserAdminDivision(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on tu.ID_UNIT equals tp.ID_UNIT
                            join u in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP == "B")
                                on tp.ID_POSITION equals u.ID_POSITION
                            select new AdminDivisionOutput
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME,
                                idUser = u.ID_USER,
                                nip = u.NIP,
                                userName = u.FULLNAME,
                                idPosition = tp.ID_POSITION,
                                positionName = tp.POSITION_NAME
                            }).ToList();

                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all User Admin";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetUserByUnit(ParamGetUserByUnit pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on u.ID_POSITION equals tp.ID_POSITION
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.ID_UNIT == pr.idUnit)
                                on tp.ID_UNIT equals tu.ID_UNIT
                            select new AdminDivisionOutput
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME,
                                idUser = u.ID_USER,
                                nip = u.NIP,
                                userName = u.FULLNAME,
                                idPosition = tp.ID_POSITION,
                                positionName = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all user divisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateAdminDivisi(ParamUpdateAdminDivisi pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tm_user.Where(p => p.ID_USER == pr.idUser).FirstOrDefault();

                dtUser.ID_GROUP = "B";
                dtUser.MODIFIED_ON = DateTime.Now;
                dtUser.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                //var dtAdminExist = (from tp in db.tm_position.Where(p => p.ID_UNIT == pr.idUnit)
                //                    join u in db.tm_user.Where(p => p.ID_GROUP == "B")
                //                        on tp.ID_POSITION equals u.ID_POSITION
                //                    select u).FirstOrDefault();
                //if (dtAdminExist != null)
                //{

                //    dtAdminExist.ID_GROUP = "U";
                //    dtAdminExist.MODIFIED_ON = DateTime.Now;
                //    dtAdminExist.MODIFIED_BY = sessionUser.idUser;
                //    db.SaveChanges();
                //}
                //else
                //{
                //    var dtUser = db.tm_user.Where(p => p.ID_USER == pr.idUser).FirstOrDefault();

                //    dtUser.ID_GROUP = "B";
                //    dtUser.MODIFIED_ON = DateTime.Now;
                //    dtUser.MODIFIED_BY = sessionUser.idUser;
                //    db.SaveChanges();
                //}

                output.Status = "OK";
                output.Message = "Success Update setting admin divisi";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel DeleteAdminDivisi(ParamUpdateAdminDivisi pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tm_user.Where(p => p.ID_USER == pr.idUser).FirstOrDefault();

                dtUser.ID_GROUP = "U";
                dtUser.MODIFIED_ON = DateTime.Now;
                dtUser.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();


                output.Status = "OK";
                output.Message = "Success Hapus admin divisi";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel PreviewNoDoc(string letterType, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                int year = Convert.ToInt32(DateTime.Now.ToString("yyyy"));
                int month = Convert.ToInt32(DateTime.Now.ToString("MM"));
                int date = Convert.ToInt32(DateTime.Now.ToString("dd"));
                string monthVal = month.ToString();
                string dateVal = date.ToString();
                string yearVal = DateTime.Now.ToString("yy");
                string numVal = "0";
                var getDtNumber = db.tr_letter_number.Where(p => p.ID_UNIT == sessionUser.idUnit && p.YEAR == year
                                    && p.MONTH == month).FirstOrDefault();
                if (getDtNumber == null)
                {
                    //add new number
                    //Tr_Letter_Number letterNumber = new Tr_Letter_Number();
                    //letterNumber.ID_UNIT = sessionUser.idUnit;
                    //letterNumber.YEAR = year;
                    //letterNumber.MONTH = month;
                    //letterNumber.DATE = date;
                    //letterNumber.NUMBER = 1;
                    //letterNumber.CREATED_ON = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    //letterNumber.CREATED_BY = sessionUser.idUser;
                    //letterNumber.MODIFIED_ON = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    //letterNumber.MODIFIED_BY = sessionUser.idUser;

                    //db.tr_letter_number.Add(letterNumber);
                    //db.SaveChanges();

                    //var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 9)
                    {
                        dateVal = "0" + date;
                    }
                    output.Status = "OK";
                    output.Message = "Success Generate no Letter";
                    output.Result = "0001." + letterType + "." + sessionUser.unitCode + "." + monthVal + "" + yearVal;
                    return output;
                }
                else
                {
                    int numbers = getDtNumber.NUMBER + 1;
                    //getDtNumber.NUMBER = numbers;
                    //getDtNumber.MODIFIED_ON = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    //getDtNumber.MODIFIED_BY = sessionUser.idUser;
                    //db.SaveChanges();

                    //var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (numbers < 10)
                    {
                        numVal = "000" + numbers;
                    }
                    else if (numbers < 100)
                    {
                        numVal = "00" + numbers;
                    }
                    else if (numbers < 999)
                    {
                        numVal = "0" + numbers;
                    }
                    output.Status = "OK";
                    output.Message = "Success Generate no Letter";
                    output.Result = numVal + "." + letterType + "." + sessionUser.unitCode + "." + monthVal + "" + yearVal;
                    return output;
                }

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();
                return output;
            }
        }

       
        public GeneralOutputModel GenerateRecoveryToken(ParamForgotPassword pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tm_user.Where(p => p.EMAIL == pr.email).FirstOrDefault();
                if (dtUser != null)
                {
                    Guid recoveryToken = Guid.NewGuid();
                    dtUser.RECOVERY_TOKEN = recoveryToken;
                    dtUser.MODIFIED_ON = DateTime.Now;
                    //dtUser.MODIFIED_BY = sessionUser.idUser;

                    db.SaveChanges();

                    var detailUser = db.tm_user.Where(p => p.EMAIL == pr.email).FirstOrDefault();

                    output.Status = "OK";
                    output.Result = detailUser;
                    output.Message = "Success Set Recovery Token";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "User Not Found";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDashboardContent(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                DashboardOutput result = new DashboardOutput();
                DateTime dateNowTime = DateTime.Now;
                DateTime dateNow = dateNowTime.Date;
                Guid id_unit_mailing = new Guid("d0d02aa8-7a27-ed11-89b0-3cf011a1a981");
                Guid id_branch_pusat = new Guid("8609d446-6024-ed11-89ae-3cf011a1a981");
                DateTime today = DateTime.Now;
                string formattedDate = today.ToString("yyyy-MM-dd");
                DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                var inboxCount = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderByDescending(p => p.CREATED_ON)
                                  join maker in db.tm_user
                                     on l.CREATED_BY equals maker.ID_USER
                                  join position in db.tm_position
                                     on maker.ID_POSITION equals position.ID_POSITION
                                  join tblStatus in db.tr_tbl_status.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition && p.READ_STATUS == 99)
                                         on l.ID_LETTER equals tblStatus.ID_LETTER
                                  join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                         on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                  select l).Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderByDescending(p => p.CREATED_ON)
                                                  join maker in db.tm_user
                                                     on l.CREATED_BY equals maker.ID_USER
                                                  join position in db.tm_position
                                                     on maker.ID_POSITION equals position.ID_POSITION
                                                  join dh in db.tr_disposition_header
                                                     on l.ID_LETTER equals dh.ID_LETTER
                                                  join dd in db.tr_disposition_child.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition && p.READ_STATUS == 99)
                                                    on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                                  join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                         on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                  select l).Count();
                //var documentInCount = (from td in db.tr_document
                //                       join tdr in db.tr_document_receiver.Where(p => p.ID_UNIT == sessionUser.idUnit && p.ID_USER_TU == sessionUser.idUser && (p.STATUS_CODE == 1 || p.STATUS_CODE == 5))
                //                            on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                //                       join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                //                            on tdr.ID_UNIT equals tu.ID_UNIT
                //                       join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                //                            on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                //                       join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                //                            on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                //                       select td).Count();

                var getLetterList = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderByDescending(p => p.CREATED_ON)
                                     join maker in db.tm_user
                                        on l.CREATED_BY equals maker.ID_USER
                                     join position in db.tm_position
                                        on maker.ID_POSITION equals position.ID_POSITION
                                     join tblStatus in db.tr_tbl_status.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition && p.READ_STATUS == 99)
                                            on l.ID_LETTER equals tblStatus.ID_LETTER
                                     join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                            on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                     select new LetterOutput
                                     {
                                         idLetter = l.ID_LETTER,
                                         idDocument = l.ID_DOCUMENT,
                                         letterNumber = l.LETTER_NUMBER,
                                         letterDate = l.LETTER_DATE,
                                         about = l.ABOUT,
                                         attachmentDesc = l.ATTACHMENT_DESC,
                                         priority = l.PRIORITY,
                                         letterTypeValue = ltc.VALUE,
                                         letterTypeCode = l.LETTER_TYPE_CODE,
                                         senderName = l.SENDER_NAME,
                                         senderAddress = l.SENDER_ADDRESS,
                                         letterDateIn = l.LETTER_DATE_IN,
                                         letterNumberIn = l.LETTER_NUMBER_IN,
                                         createdBy = l.CREATED_BY,
                                         createdByPositionId = l.CREATED_BY_POSITION_ID,
                                         fullname = maker.FULLNAME,
                                         positionName = position.POSITION_NAME,
                                         createdOn = l.CREATED_ON,
                                         readStatus = tblStatus.READ_STATUS,
                                         is_disposisi = 0
                                     }).Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderByDescending(p => p.CREATED_ON)
                                              join maker in db.tm_user
                                                 on l.CREATED_BY equals maker.ID_USER
                                              join position in db.tm_position
                                                 on maker.ID_POSITION equals position.ID_POSITION
                                              join dh in db.tr_disposition_header
                                                 on l.ID_LETTER equals dh.ID_LETTER
                                              join dd in db.tr_disposition_child.Where(p => p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition && p.READ_STATUS == 99)
                                                on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                     on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              select new LetterOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = dd.CREATED_ON,
                                                  readStatus = dd.READ_STATUS,
                                                  is_disposisi = 1
                                              }).OrderByDescending(p => p.createdOn).ToList();

                var getDocument = (from td in db.tr_document.OrderByDescending(p => p.CREATED_ON)
                                   join tdr in db.tr_document_receiver.Where(p => p.ID_UNIT == sessionUser.idUnit && p.ID_USER_TU == sessionUser.idUser && (p.STATUS_CODE == 1 || p.STATUS_CODE == 5))
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       returnNumber = tdr.RETURN_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = tdr.STATUS_CODE,
                                       statusCodeDocument = td.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       descLog = "",
                                       modifiedOn = td.MODIFIED_ON,
                                       createdOnLog = td.CREATED_ON
                                   }).AsQueryable();
                var dtlSekre = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                    //join s in db.tr_setingseketaris
                                    //    on u.ID_USER equals s.ID_SEKETARIS
                                select new SessionUser
                                {
                                    idUser = u.ID_POSITION
                                }).ToList();

                if (sessionUser.idGroup == "S")
                {
                    dtlSekre = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                join s in db.tr_setingseketaris
                                    on u.ID_USER equals s.ID_SEKETARIS
                                select new SessionUser
                                {
                                    idUser = s.ID_DIRKOM
                                }).ToList();
                }
                List<Guid> ListDir = new List<Guid>();
                foreach (var item in dtlSekre)
                {
                    ListDir.Add(item.idUser);
                }
                var getLetterOutbox = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6 )).OrderByDescending(p => p.CREATED_ON)
                                       join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                            on l.ID_LETTER equals s.ID_LETTER
                                       join maker in db.tm_user
                                         on s.ID_USER_SENDER equals maker.ID_USER
                                       join position in db.tm_position
                                          on s.ID_POSITION_SENDER equals position.ID_POSITION
                                       join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS == 'Y')
                                          on l.ID_LETTER equals c.ID_LETTER
                                       join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                          on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                       join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                           on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                       select new LetterOutput
                                       {
                                           idLetter = l.ID_LETTER,
                                           idDocument = l.ID_DOCUMENT,
                                           letterNumber = l.LETTER_NUMBER,
                                           letterDate = l.LETTER_DATE,
                                           about = l.ABOUT,
                                           attachmentDesc = l.ATTACHMENT_DESC,
                                           priority = l.PRIORITY,
                                           letterTypeValue = ltc.VALUE,
                                           letterTypeCode = l.LETTER_TYPE_CODE,
                                           senderName = l.SENDER_NAME,
                                           senderAddress = l.SENDER_ADDRESS,
                                           letterDateIn = l.LETTER_DATE_IN,
                                           letterNumberIn = l.LETTER_NUMBER_IN,
                                           createdBy = l.CREATED_BY,
                                           createdByPositionId = l.CREATED_BY_POSITION_ID,
                                           fullname = maker.FULLNAME,
                                           positionName = position.POSITION_NAME,
                                           createdOn = l.CREATED_ON,
                                           modifiedOn = l.MODIFIED_ON,
                                           readStatus = 99,
                                           statusCode = l.STATUS_CODE,
                                           statusCodeValue = stc.VALUE
                                       }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 5 && ( p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.LETTER_DATE)
                                                join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                  on l.ID_LETTER equals s.ID_LETTER
                                                join maker in db.tm_user
                                                   on s.ID_USER_SENDER equals maker.ID_USER
                                                join position in db.tm_position
                                                   on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                       on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                       on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                select new LetterOutput
                                                {
                                                    idLetter = l.ID_LETTER,
                                                    idDocument = l.ID_DOCUMENT,
                                                    letterNumber = l.LETTER_NUMBER,
                                                    letterDate = l.LETTER_DATE,
                                                    about = l.ABOUT,
                                                    attachmentDesc = l.ATTACHMENT_DESC,
                                                    priority = l.PRIORITY,
                                                    letterTypeValue = ltc.VALUE,
                                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                                    senderName = l.SENDER_NAME,
                                                    senderAddress = l.SENDER_ADDRESS,
                                                    letterDateIn = l.LETTER_DATE_IN,
                                                    letterNumberIn = l.LETTER_NUMBER_IN,
                                                    createdBy = l.CREATED_BY,
                                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                    fullname = maker.FULLNAME,
                                                    positionName = position.POSITION_NAME,
                                                    createdOn = l.CREATED_ON,
                                                    modifiedOn = l.MODIFIED_ON,
                                                    readStatus = 99,
                                                    statusCode = l.STATUS_CODE,
                                                    statusCodeValue = stc.VALUE
                                                }).Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && ( p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6)).OrderByDescending(p => p.CREATED_ON)
                                                         join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                              on l.ID_LETTER equals s.ID_LETTER
                                                         join maker in db.tm_user
                                                           on s.ID_USER_SENDER equals maker.ID_USER
                                                         join position in db.tm_position
                                                            on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                         join c in db.tr_checker.Where(p => ListDir.Contains(p.ID_USER_CHECKER) && p.APPROVAL_STATUS == 'Y')
                                                            on l.ID_LETTER equals c.ID_LETTER
                                                         join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                            on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                         join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                             on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                         select new LetterOutput
                                                         {
                                                             idLetter = l.ID_LETTER,
                                                             idDocument = l.ID_DOCUMENT,
                                                             letterNumber = l.LETTER_NUMBER,
                                                             letterDate = l.LETTER_DATE,
                                                             about = l.ABOUT,
                                                             attachmentDesc = l.ATTACHMENT_DESC,
                                                             priority = l.PRIORITY,
                                                             letterTypeValue = ltc.VALUE,
                                                             letterTypeCode = l.LETTER_TYPE_CODE,
                                                             senderName = l.SENDER_NAME,
                                                             senderAddress = l.SENDER_ADDRESS,
                                                             letterDateIn = l.LETTER_DATE_IN,
                                                             letterNumberIn = l.LETTER_NUMBER_IN,
                                                             createdBy = l.CREATED_BY,
                                                             createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                             fullname = maker.FULLNAME,
                                                             positionName = position.POSITION_NAME,
                                                             createdOn = l.CREATED_ON,
                                                             modifiedOn = l.MODIFIED_ON,
                                                             readStatus = 99,
                                                             statusCode = l.STATUS_CODE,
                                                             statusCodeValue = stc.VALUE
                                                         })
                                                //delegasi
                                                .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 2).OrderByDescending(p => p.CREATED_ON)
                                                join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                     on l.ID_LETTER equals s.ID_LETTER
                                                join maker in db.tm_user
                                                  on s.ID_USER_SENDER equals maker.ID_USER
                                                join position in db.tm_position
                                                   on s.ID_POSITION_SENDER equals position.ID_POSITION
                                                join c in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && p.APPROVAL_STATUS == 'Y')
                                                   on l.ID_LETTER equals c.ID_LETTER
                                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                   on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                    on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                select new LetterOutput
                                                {
                                                    idLetter = l.ID_LETTER,
                                                    idDocument = l.ID_DOCUMENT,
                                                    letterNumber = l.LETTER_NUMBER,
                                                    letterDate = l.LETTER_DATE,
                                                    about = l.ABOUT,
                                                    attachmentDesc = l.ATTACHMENT_DESC,
                                                    priority = l.PRIORITY,
                                                    letterTypeValue = ltc.VALUE,
                                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                                    senderName = l.SENDER_NAME,
                                                    senderAddress = l.SENDER_ADDRESS,
                                                    letterDateIn = l.LETTER_DATE_IN,
                                                    letterNumberIn = l.LETTER_NUMBER_IN,
                                                    createdBy = l.CREATED_BY,
                                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                    fullname = maker.FULLNAME,
                                                    positionName = position.POSITION_NAME,
                                                    createdOn = l.CREATED_ON,
                                                    modifiedOn = l.MODIFIED_ON,
                                                    readStatus = 99,
                                                    statusCode = l.STATUS_CODE,
                                                    statusCodeValue = stc.VALUE
                                                }).AsQueryable();
                if (sessionUser.idGroup == "S")
                {
                    getDocument = (from td in db.tr_document.OrderByDescending(p => p.CREATED_ON)
                                   join tdr in db.tr_document_receiver.Where(p => p.ID_USER_TU == sessionUser.idUser && (p.STATUS_CODE == 1 || p.STATUS_CODE == 5))
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join tu in db.tm_unit.Where(p => p.ID_BRANCH == sessionUser.idBranch)
                                        on tdr.ID_UNIT equals tu.ID_UNIT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       returnNumber = tdr.RETURN_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = tdr.STATUS_CODE,
                                       statusCodeDocument = td.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       descLog = "",
                                       modifiedOn = td.MODIFIED_ON,
                                       createdOnLog = td.CREATED_ON
                                   }).AsQueryable();
                }
                #region Approval Tanda Tangan
                if (sessionUser.idGroup == "H")
                {
                    var getDataSignature = (from ti in db.tr_img_signature.Where(p => p.APPROVAL_REQUEST == sessionUser.idGroup && p.STATUS_CODE == 2 && p.STATUS_CODE != 9)
                                            join tu in db.tm_user.Where(p => p.ID_GROUP == sessionUser.idGroup && p.ID_USER == sessionUser.idUser) on ti.APPROVAL_REQUEST equals tu.ID_GROUP
                                            join tm in db.tm_user on ti.ID_USER equals tm.ID_USER
                                            select new OuputSignature
                                            {
                                                idMg = ti.ID_IMG,
                                                idUser = ti.ID_USER,
                                                nip = tm.NIP,
                                                fullname = tm.FULLNAME,
                                                NameImage = ti.NAME_IMAGE,
                                                LenghtImage = ti.LENGHT_IMAGE,
                                                TypeImage = ti.TYPE_IMAGE,
                                                status_code = ti.STATUS_CODE,
                                            }).AsQueryable();
                    var getDataSignatureCount = (from ti in db.tr_img_signature.Where(p => p.APPROVAL_REQUEST == sessionUser.idGroup && p.STATUS_CODE == 2 && p.STATUS_CODE != 9)
                                                 join tu in db.tm_user.Where(p => p.ID_GROUP == sessionUser.idGroup && p.ID_USER == sessionUser.idUser) on ti.APPROVAL_REQUEST equals tu.ID_GROUP
                                                 join tm in db.tm_user on ti.ID_USER equals tm.ID_USER
                                                 select new OuputSignature
                                                 {
                                                     idMg = ti.ID_IMG,
                                                     idUser = ti.ID_USER,
                                                     nip = tm.NIP,
                                                     fullname = tm.FULLNAME,
                                                     NameImage = ti.NAME_IMAGE,
                                                     LenghtImage = ti.LENGHT_IMAGE,
                                                     TypeImage = ti.TYPE_IMAGE,
                                                     status_code = ti.STATUS_CODE
                                                 }).Count();
                    var listDataSignature = new List<OuputSignature>();
                    var listSignature = getDataSignature.OrderByDescending(p => p.nip).ToList();
                    var signatureInCount = getDataSignatureCount;
                    result.listSignature = listSignature;
                    result.signatureInCount = getDataSignatureCount;

                }
                else
                {
                    var getDataSignature = (from ti in db.tr_img_signature.Where(p => p.ID_USER == sessionUser.idUser && (p.STATUS_CODE == 1 || p.STATUS_CODE == 2 || p.STATUS_CODE == 3) && p.READ_STATUS != 9)
                                            join tu in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser) on ti.ID_USER equals tu.ID_USER
                                            select new OuputSignature
                                            {
                                                idMg = ti.ID_IMG,
                                                idUser = ti.ID_USER,
                                                nip = tu.NIP,
                                                fullname = tu.FULLNAME,
                                                NameImage = ti.NAME_IMAGE,
                                                LenghtImage = ti.LENGHT_IMAGE,
                                                TypeImage = ti.TYPE_IMAGE,
                                                status_code = ti.STATUS_CODE,
                                                idgroup = tu.ID_GROUP
                                            }).AsQueryable();
                    var getDataSignatureCount = (from ti in db.tr_img_signature.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE != 2 && p.STATUS_CODE != 9 && p.READ_STATUS != 9)
                                                 join tu in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser) on ti.ID_USER equals tu.ID_USER
                                                 select new OuputSignature
                                                 {
                                                     idMg = ti.ID_IMG,
                                                     idUser = ti.ID_USER,
                                                     nip = tu.NIP,
                                                     fullname = tu.FULLNAME,
                                                     NameImage = ti.NAME_IMAGE,
                                                     LenghtImage = ti.LENGHT_IMAGE,
                                                     TypeImage = ti.TYPE_IMAGE,
                                                     status_code = ti.STATUS_CODE,
                                                     idgroup = tu.ID_GROUP
                                                 }).Count();
                    var listDataSignature = new List<OuputSignature>();
                    var listSignature = getDataSignature.OrderByDescending(p => p.nip).ToList();
                    var signatureInCount = getDataSignatureCount;
                    result.listSignature = listSignature;
                    result.signatureInCount = getDataSignatureCount;
                }
                #endregion

                #region Non-Eoffice
                var getDataNonEoffice = (from a in db.tr_letter_noneoffice.Where(p => p.NIP == sessionUser.nip && p.DELIVERY_TYPE == 1 && p.STATUS_CODE == 1 && p.READ_STATUS != 9)

                                         select new OutputletterNonEoffice
                                         {
                                             idmailingnoneoffice = a.ID_MAILING_NON_EOFFICE,
                                             delivery_type = a.DELIVERY_TYPE,
                                             nip = a.NIP,
                                             letter_number = a.LETTER_NUMBER,
                                             nmrawb = a.NO_AWB,
                                             nmrreferen = a.REFERENCE_NUMBER,
                                             type_report = a.REPORT_TYPE,
                                             statuskirim = a.STATUS_SENDER

                                         }).Union(from c in db.tr_letter_noneoffice.Where(p => p.NIP == sessionUser.nip && p.DELIVERY_TYPE == 2 && p.STATUS_CODE == 1 && p.READ_STATUS != 9)
                                                  join d in db.tr_letter_noneoffice on c.NIP equals d.NIP
                                                  select new OutputletterNonEoffice
                                                  {
                                                      idmailingnoneoffice = c.ID_MAILING_NON_EOFFICE,
                                                      delivery_type = c.DELIVERY_TYPE,
                                                      nip = c.NIP,
                                                      letter_number = c.LETTER_NUMBER,
                                                      nmrawb = c.NO_AWB,
                                                      nmrreferen = c.REFERENCE_NUMBER,
                                                      type_report = c.REPORT_TYPE,
                                                      statuskirim = c.STATUS_SENDER

                                                  }).AsQueryable();
                var getDataNonEofficeCount = (from a in db.tr_letter_noneoffice.Where(p => p.NIP == sessionUser.nip && p.DELIVERY_TYPE == 1 && p.STATUS_CODE == 1 && p.READ_STATUS != 9)

                                              select new OutputletterNonEoffice
                                              {
                                                  idmailingnoneoffice = a.ID_MAILING_NON_EOFFICE,
                                                  nip = a.NIP,
                                                  letter_number = a.LETTER_NUMBER,
                                                  nmrawb = a.NO_AWB,
                                                  nmrreferen = a.REFERENCE_NUMBER,
                                                  type_report = a.REPORT_TYPE,
                                                  statuskirim = a.STATUS_SENDER

                                              }).Union(from c in db.tr_letter_noneoffice.Where(p => p.NIP == sessionUser.nip && p.DELIVERY_TYPE == 2 && p.STATUS_CODE == 1 && p.READ_STATUS != 9)
                                                       join d in db.tr_letter_noneoffice on c.NIP equals d.NIP
                                                       select new OutputletterNonEoffice
                                                       {
                                                           idmailingnoneoffice = c.ID_MAILING_NON_EOFFICE,
                                                           nip = c.NIP,
                                                           letter_number = c.LETTER_NUMBER,
                                                           nmrawb = c.NO_AWB,
                                                           nmrreferen = c.REFERENCE_NUMBER,
                                                           type_report = c.REPORT_TYPE,
                                                           statuskirim = c.STATUS_SENDER

                                                       }).Count();
                var listDataNonEoffice = new List<OutputletterNonEoffice>();
                var listNonEoffice = getDataNonEoffice.OrderByDescending(p => p.nip).ToList();
                var NonEofficeInCount = getDataNonEofficeCount;


                #endregion

                #region Memo
                
                    var getLetterMemo = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 3  ).OrderByDescending(p => p.CREATED_ON)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS == 'Y')
                                                 on l.ID_LETTER equals c.ID_LETTER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                     })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 4).OrderByDescending(p => p.CREATED_ON)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS == 'Y')
                                                 on l.ID_LETTER equals c.ID_LETTER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                     })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.CREATED_ON)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join c in db.tr_checker.Where(p => p.ID_USER_CHECKER == sessionUser.idUser && p.APPROVAL_STATUS == 'Y')
                                                 on l.ID_LETTER equals c.ID_LETTER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                               })

                                     .Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 5 && p.LETTER_TYPE_CODE == 3).OrderByDescending(p => p.LETTER_DATE)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                 on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                     on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                     on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                     })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 5 && p.LETTER_TYPE_CODE == 4).OrderByDescending(p => p.LETTER_DATE)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                 on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                     on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                     on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                              })

                                     .Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 5 && p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.LETTER_DATE)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                 on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                     on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                     on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                              })
                                     // sekretaris
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 3).OrderByDescending(p => p.CREATED_ON)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join c in db.tr_checker.Where(p => ListDir.Contains(p.ID_USER_CHECKER) && p.APPROVAL_STATUS == 'Y')
                                                 on l.ID_LETTER equals c.ID_LETTER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                     })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 4).OrderByDescending(p => p.CREATED_ON)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join c in db.tr_checker.Where(p => ListDir.Contains(p.ID_USER_CHECKER) && p.APPROVAL_STATUS == 'Y')
                                                 on l.ID_LETTER equals c.ID_LETTER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                     })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.CREATED_ON)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   on l.ID_LETTER equals s.ID_LETTER
                                              join maker in db.tm_user
                                                on s.ID_USER_SENDER equals maker.ID_USER
                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join c in db.tr_checker.Where(p => ListDir.Contains(p.ID_USER_CHECKER) && p.APPROVAL_STATUS == 'Y')
                                                 on l.ID_LETTER equals c.ID_LETTER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                      })
                                        // end sekretaris



                                        // delegasi Kepada,pemeriksa,dan pemeriksa lainya
                                        .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 2 && p.STATUS_CODE != 0 && p.LETTER_TYPE_CODE == 3 || p.LETTER_TYPE_CODE == 4 || p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.CREATED_ON)
                                               join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                    on l.ID_LETTER equals s.ID_LETTER
                                               join maker in db.tm_user
                                                 on s.ID_USER_SENDER equals maker.ID_USER
                                               join position in db.tm_position
                                                  on s.ID_POSITION_SENDER equals position.ID_POSITION
                                               join c in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && p.APPROVAL_STATUS == 'Y')
                                                  on l.ID_LETTER equals c.ID_LETTER
                                               join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                  on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                               join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                   on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                               select new MemoOutput
                                               {
                                                   idLetter = l.ID_LETTER,
                                                   idDocument = l.ID_DOCUMENT,
                                                   letterNumber = l.LETTER_NUMBER,
                                                   letterDate = l.LETTER_DATE,
                                                   about = l.ABOUT,
                                                   attachmentDesc = l.ATTACHMENT_DESC,
                                                   priority = l.PRIORITY,
                                                   letterTypeValue = ltc.VALUE,
                                                   letterTypeCode = l.LETTER_TYPE_CODE,
                                                   senderName = l.SENDER_NAME,
                                                   senderAddress = l.SENDER_ADDRESS,
                                                   letterDateIn = l.LETTER_DATE_IN,
                                                   letterNumberIn = l.LETTER_NUMBER_IN,
                                                   createdBy = l.CREATED_BY,
                                                   createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                   fullname = maker.FULLNAME,
                                                   positionName = position.POSITION_NAME,
                                                   createdOn = l.CREATED_ON,
                                                   modifiedOn = l.MODIFIED_ON,
                                                   readStatus = 99,
                                                   statusCode = l.STATUS_CODE,
                                                   statusCodeValue = stc.VALUE
                                               })
                                     // end

                                     //.Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderByDescending(p => p.CREATED_ON)
                                     //         join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                     //              on l.ID_LETTER equals s.ID_LETTER
                                     //         join position in db.tm_position
                                     //             on s.ID_POSITION_SENDER equals position.ID_POSITION
                                     //         join c in db.tr_receiver.Where(p => p.ID_USER_RECEIVER == sessionUser.idUser)
                                     //             on l.ID_LETTER equals c.ID_LETTER
                                     //         join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                     //             on c.ID_USER_RECEIVER equals maker.ID_USER
                                     //         join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                     //            on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                     //         join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                     //             on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                     //         select new MemoOutput
                                     //         {
                                     //             idLetter = l.ID_LETTER,
                                     //             idDocument = l.ID_DOCUMENT,
                                     //             letterNumber = l.LETTER_NUMBER,
                                     //             letterDate = l.LETTER_DATE,
                                     //             about = l.ABOUT,
                                     //             attachmentDesc = l.ATTACHMENT_DESC,
                                     //             priority = l.PRIORITY,
                                     //             letterTypeValue = ltc.VALUE,
                                     //             letterTypeCode = l.LETTER_TYPE_CODE,
                                     //             senderName = l.SENDER_NAME,
                                     //             senderAddress = l.SENDER_ADDRESS,
                                     //             letterDateIn = l.LETTER_DATE_IN,
                                     //             letterNumberIn = l.LETTER_NUMBER_IN,
                                     //             createdBy = l.CREATED_BY,
                                     //             createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     //             fullname = maker.FULLNAME,
                                     //             positionName = position.POSITION_NAME,
                                     //             createdOn = l.CREATED_ON,
                                     //             modifiedOn = l.MODIFIED_ON,
                                     //             readStatus = 99,
                                     //             statusCode = l.STATUS_CODE,
                                     //             statusCodeValue = stc.VALUE
                                     //         })

                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.STATUS_CODE != 0).OrderByDescending(p => p.CREATED_ON)
                                              join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                   on l.ID_LETTER equals s.ID_LETTER

                                              join position in db.tm_position
                                                 on s.ID_POSITION_SENDER equals position.ID_POSITION
                                              join c in db.tr_copy.Where(p => p.ID_USER_COPY == sessionUser.idUser)
                                                 on l.ID_LETTER equals c.ID_LETTER
                                              join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                                 on c.ID_USER_COPY equals maker.ID_USER
                                              join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                              join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                              select new MemoOutput
                                              {
                                                  idLetter = l.ID_LETTER,
                                                  idDocument = l.ID_DOCUMENT,
                                                  letterNumber = l.LETTER_NUMBER,
                                                  letterDate = l.LETTER_DATE,
                                                  about = l.ABOUT,
                                                  attachmentDesc = l.ATTACHMENT_DESC,
                                                  priority = l.PRIORITY,
                                                  letterTypeValue = ltc.VALUE,
                                                  letterTypeCode = l.LETTER_TYPE_CODE,
                                                  senderName = l.SENDER_NAME,
                                                  senderAddress = l.SENDER_ADDRESS,
                                                  letterDateIn = l.LETTER_DATE_IN,
                                                  letterNumberIn = l.LETTER_NUMBER_IN,
                                                  createdBy = l.CREATED_BY,
                                                  createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                  fullname = maker.FULLNAME,
                                                  positionName = position.POSITION_NAME,
                                                  createdOn = l.CREATED_ON,
                                                  modifiedOn = l.MODIFIED_ON,
                                                  readStatus = 99,
                                                  statusCode = l.STATUS_CODE,
                                                  statusCodeValue = stc.VALUE
                                     })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 0 && p.STATUS_CODE != 4 && p.STATUS_CODE != 5 && p.LETTER_TYPE_CODE == 3).OrderByDescending(p => p.CREATED_ON)
                                               join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                  on l.ID_LETTER equals s.ID_LETTER
                                               join position in db.tm_position
                                                  on s.ID_POSITION_SENDER equals position.ID_POSITION
                                               join c in db.tr_deliberation.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 2)
                                                  on l.ID_LETTER equals c.ID_LETTER
                                               join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                                   on c.ID_USER equals maker.ID_USER
                                               join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                  on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                               join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                   on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                               select new MemoOutput
                                               {
                                                   idLetter = l.ID_LETTER,
                                                   idDocument = l.ID_DOCUMENT,
                                                   letterNumber = l.LETTER_NUMBER,
                                                   letterDate = l.LETTER_DATE,
                                                   about = l.ABOUT,
                                                   attachmentDesc = l.ATTACHMENT_DESC,
                                                   priority = l.PRIORITY,
                                                   letterTypeValue = ltc.VALUE,
                                                   letterTypeCode = l.LETTER_TYPE_CODE,
                                                   senderName = l.SENDER_NAME,
                                                   senderAddress = l.SENDER_ADDRESS,
                                                   letterDateIn = l.LETTER_DATE_IN,
                                                   letterNumberIn = l.LETTER_NUMBER_IN,
                                                   createdBy = l.CREATED_BY,
                                                   createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                   fullname = maker.FULLNAME,
                                                   positionName = position.POSITION_NAME,
                                                   createdOn = l.CREATED_ON,
                                                   modifiedOn = l.MODIFIED_ON,
                                                   readStatus = 99,
                                                   statusCode = l.STATUS_CODE,
                                                   statusCodeValue = stc.VALUE
                                      })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 0 && p.STATUS_CODE != 4 && p.STATUS_CODE != 5 && p.LETTER_TYPE_CODE == 4).OrderByDescending(p => p.CREATED_ON)
                                               join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                    on l.ID_LETTER equals s.ID_LETTER
                                               join position in db.tm_position
                                                  on s.ID_POSITION_SENDER equals position.ID_POSITION
                                               join c in db.tr_deliberation.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 2)
                                                  on l.ID_LETTER equals c.ID_LETTER
                                               join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                               on c.ID_USER equals maker.ID_USER
                                               join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                  on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                               join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                   on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                               select new MemoOutput
                                               {
                                                   idLetter = l.ID_LETTER,
                                                   idDocument = l.ID_DOCUMENT,
                                                   letterNumber = l.LETTER_NUMBER,
                                                   letterDate = l.LETTER_DATE,
                                                   about = l.ABOUT,
                                                   attachmentDesc = l.ATTACHMENT_DESC,
                                                   priority = l.PRIORITY,
                                                   letterTypeValue = ltc.VALUE,
                                                   letterTypeCode = l.LETTER_TYPE_CODE,
                                                   senderName = l.SENDER_NAME,
                                                   senderAddress = l.SENDER_ADDRESS,
                                                   letterDateIn = l.LETTER_DATE_IN,
                                                   letterNumberIn = l.LETTER_NUMBER_IN,
                                                   createdBy = l.CREATED_BY,
                                                   createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                   fullname = maker.FULLNAME,
                                                   positionName = position.POSITION_NAME,
                                                   createdOn = l.CREATED_ON,
                                                   modifiedOn = l.MODIFIED_ON,
                                                   readStatus = 99,
                                                   statusCode = l.STATUS_CODE,
                                                   statusCodeValue = stc.VALUE
                                                })
                                     
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 0 && p.STATUS_CODE != 4 && p.STATUS_CODE != 5 && p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.CREATED_ON)
                                               join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                    on l.ID_LETTER equals s.ID_LETTER
                                               join position in db.tm_position
                                                  on s.ID_POSITION_SENDER equals position.ID_POSITION
                                               join c in db.tr_deliberation.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 2)
                                                  on l.ID_LETTER equals c.ID_LETTER
                                               join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                               on c.ID_USER equals maker.ID_USER
                                               join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                  on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                               join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                   on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                               select new MemoOutput
                                               {
                                                   idLetter = l.ID_LETTER,
                                                   idDocument = l.ID_DOCUMENT,
                                                   letterNumber = l.LETTER_NUMBER,
                                                   letterDate = l.LETTER_DATE,
                                                   about = l.ABOUT,
                                                   attachmentDesc = l.ATTACHMENT_DESC,
                                                   priority = l.PRIORITY,
                                                   letterTypeValue = ltc.VALUE,
                                                   letterTypeCode = l.LETTER_TYPE_CODE,
                                                   senderName = l.SENDER_NAME,
                                                   senderAddress = l.SENDER_ADDRESS,
                                                   letterDateIn = l.LETTER_DATE_IN,
                                                   letterNumberIn = l.LETTER_NUMBER_IN,
                                                   createdBy = l.CREATED_BY,
                                                   createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                   fullname = maker.FULLNAME,
                                                   positionName = position.POSITION_NAME,
                                                   createdOn = l.CREATED_ON,
                                                   modifiedOn = l.MODIFIED_ON,
                                                   readStatus = 99,
                                                   statusCode = l.STATUS_CODE,
                                                   statusCodeValue = stc.VALUE
                                               })
                                     //delegasi delibration
                                     .Union(from l in db.tm_letter.Where(p => p.STATUS_CODE != 0 && p.STATUS_CODE != 4 && p.STATUS_CODE != 5 && p.LETTER_TYPE_CODE == 3 || p.LETTER_TYPE_CODE == 4 || p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.CREATED_ON)
                                            join s in db.tr_letter_sender.Where(p => p.IS_MAIN == 1)
                                                 on l.ID_LETTER equals s.ID_LETTER
                                            join position in db.tm_position
                                               on s.ID_POSITION_SENDER equals position.ID_POSITION
                                            join c in db.tr_deliberation.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && p.STATUS_CODE == 2)
                                               on l.ID_LETTER equals c.ID_LETTER
                                            join maker in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                            on c.ID_USER_DELEGASI equals maker.ID_USER
                                            join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                               on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                            join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                            //join dgl in db.tr_delegasi.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser && NowDate >= p.STARTDATE.Date && NowDate <= p.ENDDATE.Date)
                                            //    on c.ID_USER_DELEGASI equals dgl.ID_USER_DELEGASI
                                            select new MemoOutput
                                            {
                                                idLetter = l.ID_LETTER,
                                                idDocument = l.ID_DOCUMENT,
                                                letterNumber = l.LETTER_NUMBER,
                                                letterDate = l.LETTER_DATE,
                                                about = l.ABOUT,
                                                attachmentDesc = l.ATTACHMENT_DESC,
                                                priority = l.PRIORITY,
                                                letterTypeValue = ltc.VALUE,
                                                letterTypeCode = l.LETTER_TYPE_CODE,
                                                senderName = l.SENDER_NAME,
                                                senderAddress = l.SENDER_ADDRESS,
                                                letterDateIn = l.LETTER_DATE_IN,
                                                letterNumberIn = l.LETTER_NUMBER_IN,
                                                createdBy = l.CREATED_BY,
                                                createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                fullname = maker.FULLNAME,
                                                positionName = position.POSITION_NAME,
                                                createdOn = l.CREATED_ON,
                                                modifiedOn = l.MODIFIED_ON,
                                                readStatus = 99,
                                                statusCode = l.STATUS_CODE,
                                                statusCodeValue = stc.VALUE
                                            }).AsQueryable();

                #endregion


                var listDocReceive = new List<DocumentOutput>();
                var listDocReceiveFinal = new List<DocumentOutput>();

                if (sessionUser.idUnit == id_unit_mailing && sessionUser.idBranch == id_branch_pusat && sessionUser.idGroup == "M")
                {
                    getDocument = (from td in db.tr_document.Where(p => p.STATUS_CODE == 3 || p.STATUS_CODE == 4).OrderByDescending(p => p.CREATED_ON)
                                   join tdr in db.tr_document_receiver.Where(p => p.STATUS_CODE == 3 || p.STATUS_CODE == 4)
                                        on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                        on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                   select new DocumentOutput
                                   {
                                       idDocument = td.ID_DOCUMENT,
                                       documentType = td.DOCUMENT_TYPE,
                                       qtyTotal = td.QTY_TOTAL,
                                       trackingNumber = td.TRACKING_NUMBER,
                                       returnNumber = tdr.RETURN_NUMBER,
                                       receivedDate = td.RECEIVED_DATE,
                                       senderName = td.SENDER_NAME,
                                       distributionTime = td.DISTRIBUTION_TIME,
                                       documentTypeValue = dt.VALUE,
                                       statusCode = tdr.STATUS_CODE,
                                       statusCodeDocument = td.STATUS_CODE,
                                       statusCodeValue = st.VALUE,
                                       descLog = "",
                                       modifiedOn = td.MODIFIED_ON,
                                       createdOnLog = td.CREATED_ON
                                   }).AsQueryable();
                    listDocReceive = (from td in db.tr_document.Where(p => p.STATUS_CODE == 5).OrderByDescending(p => p.CREATED_ON)
                                      join tdr in db.tr_document_receiver.Where(p => p.STATUS_CODE == 5)
                                           on td.ID_DOCUMENT equals tdr.ID_DOCUMENT
                                      join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document_receiver" && p.ATTRIBUTENAME == "STATUS_CODE")
                                           on tdr.STATUS_CODE equals st.ATTRIBUTEVALUE
                                      join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_document" && p.ATTRIBUTENAME == "DOCUMENT_TYPE")
                                           on td.DOCUMENT_TYPE equals dt.ATTRIBUTEVALUE
                                      join log in db.tr_document_log.OrderByDescending(p => p.CREATED_ON).Take(1)
                                          on td.ID_DOCUMENT equals log.ID_DOCUMENT
                                      select new DocumentOutput
                                      {
                                          idDocument = td.ID_DOCUMENT,
                                          documentType = td.DOCUMENT_TYPE,
                                          qtyTotal = td.QTY_TOTAL,
                                          trackingNumber = td.TRACKING_NUMBER,
                                          returnNumber = tdr.RETURN_NUMBER,
                                          receivedDate = td.RECEIVED_DATE,
                                          senderName = td.SENDER_NAME,
                                          distributionTime = td.DISTRIBUTION_TIME,
                                          documentTypeValue = dt.VALUE,
                                          statusCode = tdr.STATUS_CODE,
                                          statusCodeDocument = td.STATUS_CODE,
                                          statusCodeValue = st.VALUE,
                                          descLog = log.DESCRIPTION,
                                          modifiedOn = td.MODIFIED_ON,
                                          createdOnLog = log.CREATED_ON
                                      }).ToList();
                    foreach (var item in listDocReceive)
                    {
                        if (!item.descLog.Contains(sessionUser.nama))
                        {
                            listDocReceiveFinal.Add(new DocumentOutput
                            {
                                idDocument = item.idDocument,
                                documentType = item.documentType,
                                qtyTotal = item.qtyTotal,
                                trackingNumber = item.trackingNumber,
                                returnNumber = item.returnNumber,
                                receivedDate = item.receivedDate,
                                senderName = item.senderName,
                                distributionTime = item.distributionTime,
                                documentTypeValue = item.documentTypeValue,
                                statusCode = item.statusCode,
                                statusCodeDocument = item.statusCodeDocument,
                                statusCodeValue = item.statusCodeValue,
                                descLog = item.descLog,
                                modifiedOn = item.modifiedOn,
                                createdOnLog = item.createdOnLog
                            });
                        }
                    }
                }
                var dataDelivery = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.LETTER_TYPE_CODE == 2)
                                    join r in db.tr_letter_sender
                                        on l.ID_LETTER equals r.ID_LETTER
                                    join u in db.tm_user
                                        on r.ID_USER_SENDER equals u.ID_USER
                                    join p in db.tm_position
                                        on u.ID_POSITION equals p.ID_POSITION
                                    join rc in db.tr_outgoing_recipient
                                        on l.ID_LETTER equals rc.ID_LETTER
                                    join tu in db.tm_unit
                                        on p.ID_UNIT equals tu.ID_UNIT
                                    join ld in db.tr_letter_delivery
                                         on l.ID_LETTER equals ld.ID_LETTER
                                    join d in db.tr_delivery.Where(p => p.MODIFIED_ON >= dateNow && p.MODIFIED_ON <= dateNowTime)
                                        on ld.ID_DELIVERY equals d.ID_DELIVERY
                                    join sc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "STATUS_CODE")
                                        on d.STATUS_CODE equals sc.ATTRIBUTEVALUE
                                    join sh in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "SHIPPING_TYPE_CODE")
                                        on d.SHIPPING_TYPE_CODE equals sh.ATTRIBUTEVALUE
                                    join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "DELIVERY_TYPE_CODE")
                                        on d.DELIVERY_TYPE_CODE equals dt.ATTRIBUTEVALUE into dt2
                                    from dt3 in dt2.DefaultIfEmpty()
                                    orderby l.MODIFIED_ON descending
                                    select new DeliveryReportOutputDashboard
                                    {
                                        letterNumber = l.LETTER_NUMBER,
                                        receiveDate = d.CREATED_ON,
                                        sender = u.FULLNAME,
                                        senderDivision = tu.UNIT_NAME,
                                        receiver = rc.RECIPIENT_NAME,
                                        destination_receiver_name = d.DESTINATION_RECEIVER_NAME,
                                        drafterReadStatus = d.DRAFTER_READ_STATUS,
                                        senderReadStatus = d.SENDER_READ_STATUS,
                                        receiverAddress = rc.RECIPIENT_ADDRESS,
                                        statusCode = d.STATUS_CODE,
                                        statusCodeValue = sc.VALUE,
                                        deliveryTypeCode = d.DELIVERY_TYPE_CODE,
                                        deliveryTypeCodeValue = dt3.VALUE,
                                        idDelivery = ld.ID_DELIVERY,
                                        shippingTypeCode = d.SHIPPING_TYPE_CODE,
                                        shippingTypeCodeValue = sh.VALUE,
                                        deliveryNumber = d.DELIVERY_NUMBER,
                                        modifiedOn = l.MODIFIED_ON,
                                        receiptNumber = d.RECEIPT_NUMBER,
                                        referenceNumber = d.REFERENCE_NUMBER,
                                        expedition = d.EXPEDITION,
                                        createdBy = l.CREATED_BY,
                                        sendBy = r.ID_USER_SENDER
                                    }).AsQueryable();


                var dataLainya = (from l in db.tr_notifikasi.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_READ == 0)
                                  join u in db.tm_user
                                  on l.ID_USER equals u.ID_USER
                                  join a in db.tm_user
                                  on l.ID_USER_APPROVAL equals a.ID_USER
                                 
                                    select new OutputNotifikasiLainnya
                                    {
                                        ID_NOTIFIKASI = l.ID_NOTIFIKASI,
                                        NOTIFIKASI = l.NOTIFIKASI,
                                        STATUS_DOC = l.STATUS_DOC,
                                        CREATED_ON = Convert.ToDateTime(l.CREATED_ON),
                                        STATUS_READ = l.STATUS_READ,
                                        ID_USER = l.ID_USER,
                                        NAME_USER = u.FULLNAME,
                                        ID_USER_APPROVAL = l.ID_USER_APPROVAL,
                                        USER_APPROVAL = a.FULLNAME
                                    }).ToList();

                var listDocFinal = new List<DocumentOutput>();
                var listDocument = getDocument.OrderByDescending(p => p.modifiedOn).ToList();

                if (listDocument != null && listDocReceiveFinal != null)
                {
                    listDocFinal = listDocument.Union(listDocReceiveFinal).ToList();

                }
                else if (listDocument != null && listDocReceiveFinal == null)
                {
                    listDocFinal = getDocument.OrderByDescending(p => p.modifiedOn).ToList();
                }
                else if (listDocument == null && listDocReceiveFinal != null)
                {
                    listDocFinal = listDocReceiveFinal.OrderByDescending(p => p.modifiedOn).ToList();
                }
                var documentInCount = listDocFinal.Count();

                result.inboxCount = inboxCount;
                result.documentInCount = documentInCount;

                result.outboxCount = getLetterOutbox.Count();
                result.listLetterOutbox = getLetterOutbox.OrderByDescending(p => p.modifiedOn).ToList();

                result.MemoCount = getLetterMemo.Count();

                result.LainnyaCount = dataLainya.Count();

                result.listlainnya = dataLainya.OrderByDescending(p => p.CREATED_ON).ToList();

                //getLetterMemo.Count();
                result.listLetterMemo = getLetterMemo.OrderByDescending(p => p.modifiedOn).ToList();
                


                result.listLetter = getLetterList;
                result.listDocument = listDocFinal.OrderByDescending(p => p.modifiedOn).ToList();
                result.deliveryCount = dataDelivery.Where(p => (p.createdBy == sessionUser.idUser && p.drafterReadStatus == 99) || (p.sendBy == sessionUser.idUser && p.senderReadStatus == 99)).Count();
                result.listDelivery = dataDelivery.Where(p => (p.createdBy == sessionUser.idUser && p.drafterReadStatus == 99) || (p.sendBy == sessionUser.idUser && p.senderReadStatus == 99)).OrderByDescending(p => p.modifiedOn).ToList();
                //Guid asd = dtlSekre.idUser;

                result.listNonEoffice = listNonEoffice;
                result.NonEofficeInCount = NonEofficeInCount;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetValidationNoresi(ParamGetDetailNoresi pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                DataOuputValidasiBarcode data = new DataOuputValidasiBarcode();
                var getDocument = (from tu in db.tm_nmbr
                                   where tu.NMR_BRCD == pr.nmr_brcd
                                   select new
                                   {
                                       tu.TYPE_BRCD,
                                       tu.NMR_BRCD
                                   }).FirstOrDefault();

                if (getDocument == null)
                {
                    output.Status = "NG";
                    return output;
                }
                output.Status = "OK";
                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public string InsrtBrcd(string BarodeCode, int type, SessionUser sessionUser)
        {
            try
            {
                //int d= 43434;
                Tm_Nmbr_Table tdn = new Tm_Nmbr_Table();
                //tdn.id_temp_brcd = d;

                tdn.TYPE_BRCD = type;
                tdn.NMR_BRCD = BarodeCode;
                db.tm_nmbr.Add(tdn);
                db.SaveChanges();
                return "OK";

            }
            catch (Exception ex)
            {
                return "NG";
            }
        }

        public GeneralOutputModel InsertDisposition(ParamInsertLetterDisposition pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var userList = JsonConvert.DeserializeObject<List<ListInsertUserDisposition>>(pr.listUser);
                var number = 1;
                foreach (var item in userList)
                {
                    var getHeader = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();

                    //insert header
                    Tr_Disposition_Header_Table hdr = new Tr_Disposition_Header_Table();
                    hdr.ID_LETTER = new Guid(pr.idLetter.ToString());
                    hdr.ID_USER = new Guid(sessionUser.idUser.ToString());
                    hdr.ID_POSITION = new Guid(sessionUser.idPosition.ToString());
                    hdr.DISPOSITION_DATE = DateTime.Now;
                    if (getHeader != null)
                    {
                        hdr.PARENT_ID = new Guid(getHeader.ID_DISPOSITION_HEADER.ToString());
                    }
                    hdr.CREATED_ON = DateTime.Now;
                    hdr.CREATED_BY = new Guid(sessionUser.idUser.ToString());
                    hdr.MODIFIED_ON = DateTime.Now;
                    hdr.MODIFIED_BY = new Guid(sessionUser.idUser.ToString());


                    db.tr_disposition_header.Add(hdr);
                    db.SaveChanges();

                    //insert disposition child
                    Tr_Disposition_Child_Table child = new Tr_Disposition_Child_Table();
                    child.ID_DISPOSITION_HEADER = hdr.ID_DISPOSITION_HEADER;
                    child.ID_USER = item.idUser;
                    child.ID_POSITION = item.idPosition;
                    child.NOTES = item.notes;
                    child.READ_STATUS = 99;
                    child.CREATED_ON = DateTime.Now;
                    child.CREATED_BY = sessionUser.idUser;
                    child.MODIFIED_ON = DateTime.Now;
                    child.MODIFIED_BY = sessionUser.idUser;

                    db.tr_disposition_child.Add(child);
                    db.SaveChanges();

                    var detailUserDisposisi = (from u in db.tm_user.Where(p => p.ID_USER == item.idUser)
                                               join p in db.tm_position
                                                on u.ID_POSITION equals p.ID_POSITION
                                               select new
                                               {
                                                   u.FULLNAME,
                                                   p.POSITION_NAME
                                               }).FirstOrDefault();

                    var description = sessionUser.nip + " - " + sessionUser.nama + " Disposisi ke " + detailUserDisposisi.FULLNAME + " - " + detailUserDisposisi.POSITION_NAME;

                    InsertLogLetter(pr.idLetter, sessionUser, description, item.notes);

                }

                output.Status = "OK";
                output.Result = pr.idLetter;
                output.Message = "Success Insert Disposition";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateForgotPasswordUser(ParamUpdateForgotPassword pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tm_user.Where(p => p.RECOVERY_TOKEN == pr.recoveryToken).FirstOrDefault();

                if (dtUser != null)
                {
                    var passwordBytes = System.Text.Encoding.UTF8.GetBytes(pr.newPassword);
                    var passwordEncode = System.Convert.ToBase64String(passwordBytes);

                    dtUser.PASSWORD = passwordEncode;
                    dtUser.RECOVERY_TOKEN = Guid.Empty;
                    dtUser.MODIFIED_ON = DateTime.Now;
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Result = dtUser;
                    output.Message = "Berhasil merubah password silahkan login kembali";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Recovery Token Tidak Valid";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetAllPGAUser(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.ID_GROUP != "A" && p.ID_GROUP != "M").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                        on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputUserPGA
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDirekturUser(SessionUser sessionUser)
        {
            try
            {
                var getSeketaris = db.tr_setingseketaris.ToList();

                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.ID_GROUP != "A" && p.ID_GROUP != "M" && p.NIP !="333").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                    on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                    on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "CFO" || p.UNIT_CODE == "DCM" || p.UNIT_CODE == "DNC" || p.UNIT_CODE == "CEO" || p.UNIT_CODE == "BOD" || p.UNIT_CODE == "KOM" || p.UNIT_CODE == "DPS" || p.UNIT_CODE =="DIR-01"|| p.UNIT_CODE =="DIR-02"|| p.UNIT_CODE =="DIR-03" || p.UNIT_CODE=="DIR-05")
                                    on tp.ID_UNIT equals u.ID_UNIT
                            //where !(from ts in db.tr_setingseketaris
                            //        select ts.ID_DIRKOM).Contains(tu.ID_USER)
                            select new DataOuputUserDirektur
                            {
                                IdDirektur = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                idPositionDirektur = tp.ID_POSITION,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();


                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all direktur";
                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetUserBySeketaris(ParamUpdateUserSekdirWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                


                var chekDirkomtmuser = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.IdDirektur)
                                        join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                            on u.ID_POSITION equals tp.ID_POSITION
                                        join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "KOM" || p.UNIT_CODE == "DPS" )
                                            on tp.ID_UNIT equals tu.ID_UNIT
                                        select new AdminDivisionOutput
                                        {
                                            unitName = tu.UNIT_CODE,
                                        }).AsQueryable();
                var jumdata = chekDirkomtmuser.Count();
                if (jumdata > 0)
                {
                    var getpositiounidirkom = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.IdDirektur)
                                               join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                                   on u.ID_POSITION equals tp.ID_POSITION
                                               join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "KOM" || p.UNIT_CODE == "DPS")
                                                   on tp.ID_UNIT equals tu.ID_UNIT
                                               select new AdminDivisionOutput
                                               {
                                                   unitName = tu.UNIT_CODE,
                                                   idUnit = tu.ID_UNIT,
                                                   idPosition = u.ID_POSITION
                                               }).FirstOrDefault();
                    var ouputpositiounidirkom = db.tr_setingseketaris.Where(p => p.ID_POSITION_DIRKOM == getpositiounidirkom.idPosition && p.ID_UNIT_DIRKOM == getpositiounidirkom.idUnit).AsQueryable();

                    var jumouputdirkom = ouputpositiounidirkom.Count();
                    if (jumouputdirkom <= 0)
                    {
                        var getAllseketaris = (from tu in db.tm_user.Where(p => p.ID_GROUP != "A" && p.ID_GROUP != "M").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                               join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                               on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                               join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                                        on tu.ID_POSITION equals tp.ID_POSITION
                                               join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "CLC" || p.UNIT_CODE=="SHR")
                                           on tp.ID_UNIT equals u.ID_UNIT
                                               select new AdminDivisionOutput
                                               {
                                                   idUnit = u.ID_UNIT,
                                                   unitName = u.UNIT_NAME,
                                                   idUser = tu.ID_USER,
                                                   userName = tu.FULLNAME,
                                                   idPosition = tp.ID_POSITION,
                                                   positionName = tp.POSITION_NAME
                                               }).ToList();
                        output.Status = "OK";
                        output.Result = getAllseketaris;
                        output.Message = "Success get all user divisi";

                        return output;
                    }
                    else
                    {
                        var getpositioID_unitID_dirkom = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.IdDirektur)
                                                          join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                                              on u.ID_POSITION equals tp.ID_POSITION
                                                          join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "KOM" || p.UNIT_CODE == "DPS")
                                                              on tp.ID_UNIT equals tu.ID_UNIT
                                                          select new AdminDivisionOutput
                                                          {
                                                              unitName = tu.UNIT_CODE,
                                                              idUnit = tu.ID_UNIT,
                                                              idPosition = u.ID_POSITION
                                                          }).FirstOrDefault();

                        var getdataIdseketarisKom = (from u in db.tr_setingseketaris.Where(p => p.STATUS_CODE == 1 && p.ID_UNIT_DIRKOM == getpositioID_unitID_dirkom.idUnit && p.ID_POSITION_DIRKOM == getpositioID_unitID_dirkom.idPosition)
                                                     select new AdminDivisionOutput
                                                     {

                                                         idUser = u.ID_SEKETARIS

                                                     }).FirstOrDefault();
                        var getDataSeketarisKom = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == getdataIdseketarisKom.idUser)
                                                   join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                                       on u.ID_POSITION equals tp.ID_POSITION
                                                   join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                                       on tp.ID_UNIT equals tu.ID_UNIT
                                                   select new AdminDivisionOutput
                                                   {
                                                       idUnit = tu.ID_UNIT,
                                                       unitName = tu.UNIT_NAME,
                                                       idUser = u.ID_USER,
                                                       userName = u.FULLNAME,
                                                       idPosition = tp.ID_POSITION,
                                                       positionName = tp.POSITION_NAME
                                                   }).ToList();
                        output.Status = "OK";
                        output.Result = getDataSeketarisKom;
                        output.Message = "Success get all user divisi";
                        return output;
                    }



                }
                else
                {
                    var DataAllSeketaris = (from tu in db.tm_user.Where(p => p.ID_GROUP != "A" && p.ID_GROUP != "M").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                       on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                                       on tu.ID_POSITION equals tp.ID_POSITION
                                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "CLC" || p.UNIT_CODE=="SHR")
                                                       on tp.ID_UNIT equals u.ID_UNIT
                                            //where !(from ts in db.tr_setingseketaris
                                            //        select ts.ID_SEKETARIS).Contains(tu.ID_USER)
                                            select new AdminDivisionOutput
                                            {
                                                idUnit = u.ID_UNIT,
                                                unitName = u.UNIT_NAME,
                                                idUser = tu.ID_USER,
                                                userName = tu.FULLNAME,
                                                idPosition = tp.ID_POSITION,
                                                positionName = tp.POSITION_NAME
                                            }).ToList();
                    output.Status = "OK";
                    output.Result = DataAllSeketaris;
                    output.Message = "Success get all user divisi";

                    return output;
                }
                output.Status = "OK";
                output.Result = chekDirkomtmuser;
                output.Message = "Success get all user divisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetUserSekDirDataWeb(SessionUser sessionUser)
        {

            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var getDocument = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                   on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                            on tu.ID_POSITION equals tp.ID_POSITION
                                   join u in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                            on tp.ID_UNIT equals u.ID_UNIT
                                   join ts in db.tr_setingseketaris on tu.ID_USER equals ts.ID_DIRKOM
                                   join tuu in db.tm_user.Where(p => p.ID_GROUP == "S" || p.ID_GROUP !="S") on ts.ID_SEKETARIS equals tuu.ID_USER
                                   join tpp in db.tm_position on ts.ID_POSITION_SEKETARIS equals tpp.ID_POSITION
                                   join uu in db.tm_unit on ts.ID_UNIT_SEKETARIS equals uu.ID_UNIT
                                   select new DataOuputSekdir
                                   {
                                       ID_SETDIRKOM = ts.ID_SETDIRKOM,

                                       //idPositionDirektur=tp.ID_POSITION,
                                       FullnameDirektur = tu.FULLNAME,
                                       Position_NameDirektur = tp.POSITION_NAME,

                                       //idPositionSeketaris=tpp.ID_POSITION,
                                       FullnameSeketaris = tuu.FULLNAME,
                                       Position_NameSeketaris = tpp.POSITION_NAME


                                   }).ToList();



                output.Status = "OK";
                output.Result = getDocument;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel ValidasiDatauserSeketaris(ParamUpdateUserSekdirWeb pr, SessionUser sessionUser)
        {
            GeneralOutputModel output = new GeneralOutputModel();
            var chekSeketaris = db.tr_setingseketaris.Where(p => p.ID_SEKETARIS == pr.Iduser).AsQueryable();
            var Countcek = chekSeketaris.Count();
            if (Countcek > 0)
            {
                var getDataIdDrikonIdunit = (from tu in db.tr_setingseketaris.Where(p => p.STATUS_CODE == 1 && p.ID_SEKETARIS == pr.Iduser)
                                             select new DataOuputUserDirektur
                                             {
                                                 IdDirektur = tu.ID_DIRKOM,
                                                 idUnit = tu.ID_UNIT_DIRKOM


                                             }).FirstOrDefault();
                var chekvalidasi = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.IdDirektur)
                                    join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                        on u.ID_POSITION equals tp.ID_POSITION
                                    join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.ID_UNIT == getDataIdDrikonIdunit.idUnit)
                                        on tp.ID_UNIT equals tu.ID_UNIT
                                    select new AdminDivisionOutput
                                    {
                                        unitName = tu.UNIT_CODE,
                                    }).AsQueryable();

                var Countcek2 = chekvalidasi.Count();
                if (Countcek2 > 0)
                {
                    output.Status = "OK";
                    return output;
                }
                else
                {
                    output.Status = "NOTOK";
                    return output;
                }


            }
            else if (Countcek > 0)
            {
                output.Status = "OK";
                return output;

            }

            output.Status = "OK";
            return output;
        }

        public GeneralOutputModel UpdateDatauserSeketaringSetting(ParamUpdateUserSekdirWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_GROUP = "S";
                db.SaveChanges();
                var getIdposisiDir = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.IdDirektur)
                                      select new DataOuputUser
                                      {
                                          IdPosition = tu.ID_POSITION
                                      }).FirstOrDefault();
                string getposisiDir = getIdposisiDir.IdPosition.ToString();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.Iduser)
                            select new DataOuputUser
                            {
                                IdPosition = tu.ID_POSITION
                            }).FirstOrDefault();

                if (data.IdPosition != null)
                {
                    string idPosision = data.IdPosition.ToString();
                    var dtPosition = db.tm_position.Where(p => p.ID_POSITION == Guid.Parse(idPosision)).FirstOrDefault();
                    dtPosition.PARENT_ID = Guid.Parse(getposisiDir);
                    dtPosition.FLAG = pr.IdDirektur;
                    dtDocument.MODIFIED_ON = DateTime.Now;
                    dtDocument.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();
                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Sukses tambah seketaris";
                }

                // step 2

                var dataSeketaris = (from tu in db.tm_user.Where(p => p.ID_GROUP != "A" && p.ID_GROUP != "M" && p.ID_USER == pr.Iduser).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                     join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                     on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                     join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                              on tu.ID_POSITION equals tp.ID_POSITION
                                     join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "CLC" || p.UNIT_CODE == "SHR")
                                 on tp.ID_UNIT equals u.ID_UNIT
                                     select new DataOuputUserSeketaris
                                     {
                                         Iduser = tu.ID_USER,
                                         idPositionSeketaris = tu.ID_POSITION,
                                         idUnit = u.ID_UNIT
                                     }).FirstOrDefault();
                var dataDirektur = (from tu in db.tm_user.Where(p => p.ID_GROUP != "A" && p.ID_GROUP != "M" && p.ID_USER == pr.IdDirektur).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                    join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                    on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                    join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                             on tu.ID_POSITION equals tp.ID_POSITION
                                    join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "CFO" || p.UNIT_CODE == "DCM" || p.UNIT_CODE == "DNC" || p.UNIT_CODE == "CEO" || p.UNIT_CODE == "BOD" || p.UNIT_CODE == "KOM" || p.UNIT_CODE == "DPS"|| p.UNIT_CODE =="DIR-01"|| p.UNIT_CODE =="DIR-02"|| p.UNIT_CODE =="DIR-03" || p.UNIT_CODE=="DIR-05")
                                    on tp.ID_UNIT equals u.ID_UNIT
                                    select new DataOuputUserDirektur
                                    {
                                        IdDirektur = tu.ID_USER,
                                        idPositionDirektur = tu.ID_POSITION,
                                        idUnit = u.ID_UNIT
                                    }).FirstOrDefault();

                Tr_SettingSeketaris_Table trst = new Tr_SettingSeketaris_Table();
                // seketaris
                trst.ID_UNIT_SEKETARIS = dataSeketaris.idUnit;
                trst.ID_POSITION_SEKETARIS = dataSeketaris.idPositionSeketaris;
                trst.ID_SEKETARIS = dataSeketaris.Iduser;
                // Dirkom
                trst.ID_UNIT_DIRKOM = dataDirektur.idUnit;
                trst.ID_POSITION_DIRKOM = dataDirektur.idPositionDirektur;
                trst.ID_DIRKOM = dataDirektur.IdDirektur;
                trst.STATUS_CODE = 1;
                trst.CREATED_ON = DateTime.Now;
                trst.CREATED_BY = sessionUser.idUser;
                trst.MODIFIED_ON = DateTime.Now;
                trst.MODIFIED_BY = sessionUser.idUser;

                db.tr_setingseketaris.Add(trst);
                db.SaveChanges();


                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DeleteDatauserSekdirSetting(ParamUpdateSekdirWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtsetdirkom = db.tr_setingseketaris.Where(p => p.ID_SETDIRKOM == pr.ID_SETDIRKOM && p.STATUS_CODE == 1).ToList();
                db.tr_setingseketaris.RemoveRange(dtsetdirkom);
                db.SaveChanges();
                //GeneralOutputModel output = new GeneralOutputModel();
                //var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.IduserSeketaris).FirstOrDefault();
                //dtDocument.ID_GROUP = "U";
                //dtDocument.MODIFIED_ON = DateTime.Now;
                //dtDocument.MODIFIED_BY = sessionUser.idUser;
                //db.SaveChanges();

                //var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.IduserSeketaris)
                //            select new DataOuputUser
                //            {
                //                IdPosition = tu.ID_POSITION
                //            }).FirstOrDefault();

                //if (data.IdPosition != null)
                //{
                //    string idPosision = data.IdPosition.ToString();
                //    var dtPosition = db.tm_position.Where(p => p.ID_POSITION == Guid.Parse(idPosision)).FirstOrDefault();
                //    //dtPosition.PARENT_ID = null;
                //    //dtPosition.FLAG = null;
                //    db.RemoveRange(db.);
                //    output.Status = "OK";
                //    output.Result = data;
                //    output.Message = "Success Update setting user";
                //}
                //return output;

                //var dtDocumentt = db.tm_position.Where(p => p.ID_POSITION == pr.idPositionSeketaris).FirstOrDefault();
                //dtDocumentt.PARENT_ID = null;
                //db.SaveChanges();

                output.Status = "OK";
                output.Result = dtsetdirkom;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetAllSuperUser(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "A").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "TEC")
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputSuperUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                unitName = u.UNIT_NAME,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi TEC";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetSuperUserDataWeb(SessionUser sessionUser, ParamGetUsertWeb pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from tu in db.tm_user.Where(p => p.ID_GROUP == "A").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                   on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                            on tu.ID_POSITION equals tp.ID_POSITION
                                   join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "TEC")
                                            on tp.ID_UNIT equals u.ID_UNIT
                                   select new DataOuputSuperUserWeb
                                   {
                                       Iduser = tu.ID_USER,
                                       Nip = tu.NIP,
                                       Fullname = tu.FULLNAME,
                                       password = "********",
                                       Unit_name = u.UNIT_NAME,
                                       Position_name = tp.POSITION_NAME
                                   }).AsQueryable();

                recordsTotal = getDocument.Count();

                //search data when search value found
                if (!string.IsNullOrEmpty(pr.searchValue))
                {
                    getDocument = getDocument.Where(x =>
                                    x.Nip.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Fullname.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Unit_name.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Position_name.ToLower().Contains(pr.searchValue.ToLower()));
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                SuperUserOutputWeb result = new SuperUserOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel UpdateDataSuperuser(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_GROUP = "A";
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DeleteDataSuperUser(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_GROUP = "U";
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();


                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDwopdownAdminHct(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "HCT")
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputSuperUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                unitName = u.UNIT_NAME,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi HCT";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDataAdminHctWeb(SessionUser sessionUser, ParamGetUsertWeb pr)
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from tu in db.tm_user.Where(p => p.ID_GROUP == "H").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                   on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                            on tu.ID_POSITION equals tp.ID_POSITION
                                   join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "HCT")
                                            on tp.ID_UNIT equals u.ID_UNIT
                                   select new DataOuputAdminHCT
                                   {
                                       Iduser = tu.ID_USER,
                                       Nip = tu.NIP,
                                       Fullname = tu.FULLNAME,
                                       unitName = u.UNIT_NAME,
                                       Position_Name = tp.POSITION_NAME

                                   }).AsQueryable();

                recordsTotal = getDocument.Count();

                //search data when search value found
                if (!string.IsNullOrEmpty(pr.searchValue))
                {
                    getDocument = getDocument.Where(x =>
                                    x.Nip.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Fullname.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.unitName.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Position_Name.ToLower().Contains(pr.searchValue.ToLower()));
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                AdminHCTOutputWeb result = new AdminHCTOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateDataAdminHct(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_GROUP = "H";
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DeleteDataAdminHct(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_GROUP = "U";
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();


                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetAllDwopdownEmloyee(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE != "CFO" || p.UNIT_CODE != "DCM" || p.UNIT_CODE != "DNC" || p.UNIT_CODE != "CEO" || p.UNIT_CODE != "BOD" || p.UNIT_CODE != "KOM" || p.UNIT_CODE != "DPS")
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputSuperUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                unitName = u.UNIT_NAME,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi HCT";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDwopdownDataposition(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_position.Where(p => p.STATUS_CODE == 1).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)

                            select new DataOuputPosition
                            {
                                idPosition = tu.ID_POSITION,
                                Position_Name = tu.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi HCT";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDataEmpByFilter(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_USER == pr.Iduser).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                Unit_name = u.UNIT_NAME,
                                Position_name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi HCT";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateDataPositionEmp(ParamUpdateUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_POSITION = pr.idposition;
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        #region Non-Eoffice EKspedisi
        public GeneralOutputModel GetDataSuratKeluarNon()
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                var getData = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 1 && p.STATUS_CODE == 1 && p.STATUS_SENDER == 1).OrderByDescending(p => p.MODIFIED_ON)
                               join u in db.tm_unit on tl.ID_UNIT equals u.ID_UNIT
                               join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                               join dd in db.tm_user
                                      on tl.MODIFIED_BY equals dd.ID_USER
                               select new OutputletterNonEoffice
                               {
                                   idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                   letter_number = tl.LETTER_NUMBER,
                                   ReceiptDate = tl.RECEIPTDATE,
                                   delivery_type = tl.DELIVERY_TYPE,
                                   nmrawb = tl.NO_AWB,
                                   type_report = tl.REPORT_TYPE,
                                   expedition_name = tl.EXPEDITION_NAME,
                                   sender_name = tl.SENDER_NAME,
                                   nip = tl.NIP,
                                   unitname = u.UNIT_NAME,
                                   kodeunit = u.UNIT_CODE,
                                   address = tl.ADDRESS,
                                   docReceiver = tl.DOC_RECEIVER,
                                   statuskirim = tl.STATUS_SENDER,
                                   DateUntil = tl.DATE_UNTIL,
                                   phonenumber = tl.PHONE_NUMBER,
                                   purposename = tl.PURPOSE_NAME,
                                   nmrreferen = tl.REFERENCE_NUMBER,
                                   cretaeby = ss.FULLNAME,
                                   updateby = dd.FULLNAME

                               }).ToList();



                output.Status = "OK";
                output.Result = getData;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAdminDivisionNonEoffice()
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var getUnit = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                               join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on u.ID_POSITION equals tp.ID_POSITION
                               join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                on tp.ID_UNIT equals tu.ID_UNIT
                               select new AdminDivisionOutput
                               {
                                   idUnit = tu.ID_UNIT,
                                   unitName = tu.UNIT_NAME,
                                   idUser = u.ID_USER,
                                   nip = u.NIP,
                                   userName = u.FULLNAME,
                                   idPosition = tp.ID_POSITION,
                                   positionName = tp.POSITION_NAME
                               }).ToList();

                //join tp in db.tm_position
                //    on tu.ID_UNIT equals tp.ID_UNIT
                //join tps in db.tm_position
                //    on tp.ID_POSITION equals tps.PARENT_ID
                //join u in db.tm_user.Where(p => p.ID_GROUP == "S")
                //    on tps.ID_POSITION equals u.ID_POSITION
                //select new AdminDivisionOutput
                //{
                //    idUnit = tu.ID_UNIT,
                //    unitName = tu.UNIT_NAME,
                //    idUser = u.ID_USER,
                //    userName = u.FULLNAME,
                //    idPosition = tps.ID_POSITION,
                //    positionName = tps.POSITION_NAME
                //}).ToList();


                output.Status = "OK";
                output.Result = getUnit;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel InsertDataLetterNonEoffice(ParamInsertNonEoffice pr, SessionUser sessionUser)
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                int nmr1 = 1;
                int nmr2 = 2;
                var Reciver = pr.docReceiver == null ? " " : pr.docReceiver;
                var existLetterNumber = db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER == pr.letter_number).AsQueryable();
                var countLetternumber = existLetterNumber.Count();
                string bb = pr.sender_name;
                var items = bb.Split(" - ");
                string sendername = items[0];
                string nip = items[1];
                if (countLetternumber <= 0)
                {


                    if (pr.delivery_type == nmr1)
                    {


                        //insert ekspedisi
                        Tr_Letter_Noneoffice_Table tln = new Tr_Letter_Noneoffice_Table();

                        tln.LETTER_NUMBER = pr.letter_number;
                        tln.DELIVERY_TYPE = pr.delivery_type;
                        tln.REPORT_TYPE = pr.type_report;
                        tln.NO_AWB = pr.nmrawb;
                        tln.RECEIPTDATE = DateTime.Now;
                        tln.EXPEDITION_NAME = pr.expedition_name;
                        tln.SENDER_NAME = sendername;
                        tln.NIP = nip;
                        tln.READ_STATUS = 0;
                        tln.ID_UNIT = pr.idUnit;
                        tln.DOC_RECEIVER = pr.docReceiver;
                        tln.REFERENCE_NUMBER = pr.nmrreferen;
                        tln.ADDRESS = pr.address;
                        tln.STATUS_SENDER = pr.statuskirim;
                        tln.STATUS_CODE = 1;
                        tln.PURPOSE_NAME = pr.purposename;
                        tln.PHONE_NUMBER = pr.phonenumber;
                        tln.CREATED_ON = DateTime.Now;
                        tln.CREATED_BY = sessionUser.idUser;
                        tln.MODIFIED_ON = DateTime.Now;
                        tln.MODIFIED_BY = sessionUser.idUser;
                        //tln.DATE_UNTIL = DateTime.Now;
                        db.tr_letter_noneoffice.Add(tln);
                        db.SaveChanges();
                        output.Status = "OK";
                        output.Result = tln.LETTER_NUMBER;
                        output.Message = "Sukses Menambah Data";
                        return output;
                    }
                    else
                    {
                        output.Status = "NG";
                        output.Message = "Failed Insert";
                    }
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Insert";
                }
                if (pr.delivery_type == nmr2)
                {

                    //insert kurir
                    Tr_Letter_Noneoffice_Table tln = new Tr_Letter_Noneoffice_Table();

                    tln.LETTER_NUMBER = pr.letter_number;
                    tln.DELIVERY_TYPE = pr.delivery_type;
                    tln.REPORT_TYPE = pr.type_report;
                    tln.RECEIPTDATE = DateTime.Now;
                    tln.EXPEDITION_NAME = pr.expedition_name;
                    tln.SENDER_NAME = sendername;
                    tln.NIP = nip;
                    tln.ID_UNIT = pr.idUnit;
                    tln.DOC_RECEIVER = Reciver;
                    tln.ADDRESS = pr.address;
                    tln.STATUS_SENDER = pr.statuskirim;
                    tln.STATUS_CODE = 1;
                    tln.PHONE_NUMBER = pr.phonenumber;
                    tln.DATE_UNTIL = DateTime.Now;
                    tln.CREATED_ON = DateTime.Now;
                    tln.CREATED_BY = sessionUser.idUser;
                    tln.MODIFIED_ON = DateTime.Now;
                    tln.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_noneoffice.Add(tln);
                    db.SaveChanges();
                    output.Status = "OK";
                    output.Result = tln.LETTER_NUMBER;
                    output.Message = "Insert Success";
                    return output;
                }
                 else
                {
                    output.Status = "NG";
                    output.Message = "Failed Insert";
                }
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateDataLetterNonOffice_(UpdateNonEoffice pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER == pr.letter_number).FirstOrDefault();
                //data.STATUS_SENDER = pr.statuskirim;
                data.NO_AWB = pr.nmrawb;
                data.REFERENCE_NUMBER = pr.nmrreferen;
                //data.RECEIPTDATE = pr.startDate;
                //data.DOC_RECEIVER = pr.docReceiver;
                data.MODIFIED_ON = DateTime.Now;
                data.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success Update  ";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel InsertDataUsingUploadEkspedisiNonOffice_(ParamUploadLetterNonOfficeString pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<UploadputletterNonEoffice> returnData = new List<UploadputletterNonEoffice>();
                var dataUpload = JsonConvert.DeserializeObject<List<ParamUploadputletterNonEoffice>>(pr.jsonDataString);
                var isGagal = 0;
                foreach (var item in dataUpload)
                {

                    //check nomor surat
                    //var existLetterNumber = db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER == item.letter_number && p.DELIVERY_TYPE == 1).AsQueryable();
                    //var countLetternumber = existLetterNumber.Count();
                    //if (countLetternumber > 0)
                    //{
                    //    returnData.Add(new UploadputletterNonEoffice
                    //    {
                    //        nmrawb = item.nmrawb,
                    //        nmrreferen = item.nmrreferen,
                    //        ReceiptDate = DateTime.Now,
                    //        expedition_name = item.expedition_name,
                    //        sender_name = item.sender_name,
                    //        nip = item.nip,
                    //        unitname = item.unitname,
                    //        letter_number = item.letter_number,
                    //        docReceiver = item.docReceiver,
                    //        phonenumber = item.phonenumber,
                    //        address = item.address,
                    //        //purposename = item.purposename,
                    //        //statuskirim = item.statuskirim,
                    //        statusUpload = "Gagal Nomor Surat" + item.letter_number + " Sudah Ada"
                    //    });
                    //    isGagal++;
                    //    continue;
                    //}



                    

                    //check if division/department exist
                    var existDivision = db.tm_unit.Where(p => p.UNIT_CODE == item.unitname).FirstOrDefault();
                    if (existDivision == null)
                    {
                        returnData.Add(new UploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            ReceiptDate = DateTime.Now,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            //purposename = item.purposename,
                            statuskirim = item.statuskirim,
                            statusUpload = "Gagal Kode Divisi " + item.unitname + " Tidak Ditemukan"
                        });
                        isGagal++;
                        continue;
                    }

                    //check if nip exist
                    //var existNip = db.tm_user.Where(p => p.NIP == item.nip).FirstOrDefault();
                    //if (existNip == null)
                    //{
                    //    returnData.Add(new UploadputletterNonEoffice
                    //    {
                    //        nmrawb = item.nmrawb,
                    //        nmrreferen = item.nmrreferen,
                    //        ReceiptDate = DateTime.Now,
                    //        expedition_name = item.expedition_name,
                    //        sender_name = item.sender_name,
                    //        nip = item.nip,
                    //        unitname = item.unitname,
                    //        letter_number = item.letter_number,
                    //        docReceiver = item.docReceiver,
                    //        phonenumber = item.phonenumber,
                    //        address = item.address,
                    //        purposename = item.purposename,
                    //        statuskirim = item.statuskirim,
                    //        statusUpload = "Gagal Nip " + item.nip + " Tidak Ditemukan"
                    //    });
                    //    isGagal++;
                    //    continue;
                    //}

                    var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1)
                                where tu.NIP == item.nip
                                select new LoginResponse
                                {
                                   
                                    Nip = tu.NIP,
                                    Fullname = tu.FULLNAME
                                }).FirstOrDefault();
                    if (data == null)
                    {
                        returnData.Add(new UploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            ReceiptDate = DateTime.Now,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            purposename = item.purposename,
                            statuskirim = item.statuskirim,
                            statusUpload = "Gagal Nip " + item.nip + " Tidak Ditemukan"
                        });
                        isGagal++;
                        continue;
                    }

                    var datastatus = item.statuskirim == "Proses" ? "PROCESS" : item.statuskirim == "Dikembalikan" ? "RETURN" : item.statuskirim == "return" ? "RETURN" : item.statuskirim == "Selesai" ? "DONE" : item.statuskirim == "Sampai" ? "DONE" : "PROCESS";

                    var getStringMapStatusSend = GetStringMappingByValue("tr_letter_noneoffice", "STATUS_SEND", datastatus);
                    //check delivery tipe
                    if (getStringMapStatusSend == "NG")
                    {
                        returnData.Add(new UploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            ReceiptDate = DateTime.Now,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            //purposename = item.purposename,
                            statuskirim = item.statuskirim,
                            statusUpload = "Gagal Status Pengiriman " + item.statuskirim + " tidak ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    //var result = item.nmrawb == null ? "1" : item.nmrawb;
                    //insert document
                    Tr_Letter_Noneoffice_Table tdt = new Tr_Letter_Noneoffice_Table();
                    tdt.NO_AWB = item.nmrawb;
                    tdt.REFERENCE_NUMBER = item.nmrreferen;
                    tdt.DELIVERY_TYPE = 1;
                    tdt.RECEIPTDATE = DateTime.Now;
                    tdt.EXPEDITION_NAME = item.expedition_name;
                    tdt.SENDER_NAME = item.sender_name;
                    tdt.NIP = item.nip;
                    tdt.ID_UNIT = existDivision.ID_UNIT;
                    tdt.LETTER_NUMBER = item.letter_number;
                    tdt.DOC_RECEIVER = item.docReceiver;
                    tdt.PHONE_NUMBER = item.phonenumber;
                    tdt.ADDRESS = item.address;
                    tdt.READ_STATUS = 0;
                    tdt.DATE_UNTIL = DateTime.Now;
                    tdt.PURPOSE_NAME = item.purposename;
                    tdt.STATUS_SENDER = (item.statuskirim == "Proses" ? 1 : item.statuskirim == "proses" ? 1 : item.statuskirim == "Dikembalikan" ? 2 : item.statuskirim == "dikembalikan" ? 2 : item.statuskirim == "Selesai" ? 3 : item.statuskirim == "selesai" ? 3 : item.statuskirim == "Sampai" ? 3 : item.statuskirim == "sampai" ? 3 :
                                            item.statuskirim == "PROCESS" ? 1 : item.statuskirim == "Process" ? 1 : item.statuskirim == "RETURN" ? 2 : item.statuskirim == "return" ? 2 : 1
                                        );
                    tdt.STATUS_CODE = 1;
                    tdt.CREATED_ON = DateTime.Now;
                    tdt.CREATED_BY = sessionUser.idUser;
                    tdt.MODIFIED_ON = DateTime.Now;
                    tdt.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_noneoffice.Add(tdt);
                    db.SaveChanges();
                    if (tdt.ID_MAILING_NON_EOFFICE != null)
                    {
                        returnData.Add(new UploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            ReceiptDate = DateTime.Now,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            //purposename = item.purposename,
                            //statuskirim = item.statuskirim,
                            statusUpload = "Sukses"
                        });
                    }

                }
                output.Status = "OK";
                output.Result = returnData;
                if (isGagal != 0)
                {
                    output.Message = "Terdapat Total " + isGagal + " Dokumen Gagal di Upload";
                }
                else
                {
                    output.Message = "Sukses mengunggah dokumen";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDataEkspedisiNonEoffice(string keyword)
        {
            try
            {
                List<OutputletterNonEoffice> userList = new List<OutputletterNonEoffice>();
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from u in db.tr_letter_noneoffice.Where(p => p.EXPEDITION_NAME != null && p.DELIVERY_TYPE == 1 && p.EXPEDITION_NAME.ToUpper().Contains(keyword.ToUpper()))

                            select new OutputletterNonEoffice
                            {
                                expedition_name = u.EXPEDITION_NAME
                            }).Take(1).ToList();
                //var groupedCustomerList = data
                //.GroupBy(u => u.delivery_type)
                //.ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get name ekspedisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public string GenerateNonDocoutgoingmail(int type, string userCode, SessionUser sessionUser)
        {
            try
            {
                int year = Convert.ToInt32(DateTime.Now.ToString("yyyy"));
                int month = Convert.ToInt32(DateTime.Now.ToString("MM"));
                int date = Convert.ToInt32(DateTime.Now.ToString("dd"));
                string monthVal = month.ToString();
                var dateVal = DateTime.Now.ToString("dd");
                var getDtNumber = db.tr_document_number.Where(p => p.NUMBER_TYPE == type && p.YEAR == year
                                     && p.USER_CODE == userCode).FirstOrDefault();
                if (getDtNumber == null)
                {
                    //add new number
                    Tr_Document_Number_Table tdn = new Tr_Document_Number_Table();
                    tdn.NUMBER_TYPE = type;
                    tdn.USER_CODE = userCode;
                    tdn.YEAR = year;
                    tdn.MONTH = month;
                    tdn.DATE = date;
                    tdn.NUMBER = 1;
                    tdn.CREATED_ON = DateTime.Now;
                    tdn.CREATED_BY = sessionUser.idUser;
                    tdn.MODIFIED_ON = DateTime.Now;
                    tdn.MODIFIED_BY = sessionUser.idUser;

                    db.tr_document_number.Add(tdn);
                    db.SaveChanges();

                    var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + dateVal;
                    }


                    return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + "000" + 1;
                }
                else
                {
                    int numbers = getDtNumber.NUMBER + 1;

                    getDtNumber.NUMBER = numbers;
                    getDtNumber.MODIFIED_ON = DateTime.Now;
                    getDtNumber.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }

                    if (numbers < 10)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "000" + nmbr;
                        return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + data;
                    }
                    else if (numbers < 100)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "00" + nmbr;
                        return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + data;
                    }
                    else if (numbers < 999)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "0" + nmbr;
                        return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + data;
                    }
                    return getStringMap + userCode + "-MR-" + year + monthVal + dateVal + numbers;
                }

            }
            catch (Exception ex)
            {
                return "NG";
            }
        }
        
        public GeneralOutputModel GetByIdDocoutgoingmail(getByIdNonEoffice pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == pr.idmailingnoneoffice && p.DELIVERY_TYPE == 2)
                            join u in db.tm_unit on tl.ID_UNIT equals u.ID_UNIT
                            select new OutputletterNonEoffice
                            {
                                idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                letter_number = tl.LETTER_NUMBER,
                                ReceiptDate = tl.RECEIPTDATE,
                                delivery_type = tl.DELIVERY_TYPE,
                                type_report = tl.REPORT_TYPE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                unitname = u.UNIT_NAME,
                                docReceiver = tl.DOC_RECEIVER,
                                statuskirim = tl.STATUS_SENDER,
                                nmrreferen = tl.REFERENCE_NUMBER,
                                phonenumber = tl.PHONE_NUMBER,
                                address = tl.ADDRESS,
                                qrcodenumber = tl.QRCODE_NUMBER

                            }).FirstOrDefault();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success Update  ";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetSearchReportDocumentNonEoffice(ParamReportNonOuboxLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 1).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE == 1)
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                            join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                            join dd in db.tm_user
                                   on tl.MODIFIED_BY equals dd.ID_USER
                            select new ReportNonOutboxLetterOutput
                            {
                                nmrawb = tl.NO_AWB,
                                nmrreferen = tl.REFERENCE_NUMBER,
                                ReceiptDate = tl.RECEIPTDATE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                nip = tl.NIP,
                                unitname = tu.UNIT_NAME,
                                kodeunit = tu.UNIT_CODE,
                                letter_number = tl.LETTER_NUMBER,
                                docReceiver = tl.DOC_RECEIVER,
                                phonenumber = tl.PHONE_NUMBER,
                                address = tl.ADDRESS,
                                purposename = tl.PURPOSE_NAME,
                                statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "Dikembalikan" : tl.STATUS_SENDER == 3 ? "Selesai/Sampai" : ""),
                                statuskirim = tl.STATUS_SENDER,
                                DateUntil = tl.DATE_UNTIL,
                                delivery_type = tl.DELIVERY_TYPE,
                                cretaeby = ss.FULLNAME,
                                updateby = dd.FULLNAME,

                            }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    data = data.Where(p => p.ReceiptDate >= pr.startDate && p.ReceiptDate <= pr.endDate);
                }
                //if (pr.delivery_type == 1)
                //{
                //    data = data.Where(p => p.delivery_type == pr.delivery_type);

                //}
                //if (pr.type_report == 1)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                //if (pr.type_report == 2)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                var docFinal = data.ToList();
                output.Status = "OK";
                output.Result = docFinal.OrderByDescending(p => p.ReceiptDate);
                output.Message = "Success get all data";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetSearchReportOutgoingMailEksnKur(ParamReportOutgoingMailEksnKurir pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "DELIVERY_TYPE")
                                   on tl.DELIVERY_TYPE equals st.ATTRIBUTEVALUE
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                            join stt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "STATUS_SEND")
                                   on tl.DELIVERY_TYPE equals stt.ATTRIBUTEVALUE
                            select new ReportNonOutboxLetterOutput
                            {
                                letter_number = tl.LETTER_NUMBER,
                                deliveryname = st.VALUE,
                                ReceiptDate = tl.RECEIPTDATE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                unitname = tu.UNIT_NAME,
                                docReceiver = tl.DOC_RECEIVER,
                                statusname = stt.VALUE,
                                nmrreferen = tl.REFERENCE_NUMBER,
                                address = tl.ADDRESS

                            }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    data = data.Where(p => p.ReceiptDate >= pr.startDate && p.ReceiptDate <= pr.endDate);
                }
                var docFinal = data.ToList();
                output.Status = "OK";
                output.Result = docFinal;
                output.Message = "Success get all data";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        #endregion


        public GeneralOutputModel InsertLevelEmpl(ParamUpdateLevelemp pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                //var cekData = db.tr_level_employee.Where(p => p.ID_USER == pr.idUser && p.STATUS_CODE !=0).FirstOrDefault();
                //if(cekData.ID_USER != null)
                //{
                //    output.Status = "NG";
                //    output.Message = "Gagal";

                //    return output;
                //}
                //var getStringLevel = GetStringMappingByValue("tr_letter_noneoffice", "DELIVERY_TYPE", pr.idLevel.ToString());
                var dtUser = db.tr_level_employee.Where(p => p.ID_USER == pr.idUser).FirstOrDefault();

                Tr_Level_Employee tdt = new Tr_Level_Employee();
                tdt.ID_LEVEL = pr.idLevel;
                tdt.ID_UNIT = pr.idUnit;
                tdt.ID_USER = pr.idUser;
                tdt.CREATED_ON = DateTime.Now;
                tdt.CREATED_BY = sessionUser.idUser;
                tdt.MODIFIED_ON = DateTime.Now;
                tdt.MODIFIED_BY = sessionUser.idUser;
                tdt.STATUS_CODE = 1;

                db.tr_level_employee.Add(tdt);
                db.SaveChanges();

                output.Status = "OK";
                output.Message = "Success Update setting admin divisi";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetAllEmpLevel(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_level_employee.Where(p => p.STATUS_CODE == 1).OrderByDescending(p => p.MODIFIED_ON)
                            join tu in db.tm_unit on tl.ID_UNIT equals tu.ID_UNIT
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_level_employee" && p.ATTRIBUTENAME == "STATUS_LEVEL")
                            on tl.ID_LEVEL equals st.ATTRIBUTEVALUE
                            join u in db.tm_user on tl.ID_USER equals u.ID_USER
                            //from tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            // join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                            //     on tu.ID_UNIT equals tp.ID_UNIT
                            // join u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            //     on tp.ID_POSITION equals u.ID_POSITION
                            select new OuputLevelemp
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME,
                                idUser = u.ID_USER,
                                userName = u.FULLNAME,
                                idemplevel = tl.ID_EMP_LEVEL,
                                levelName = st.VALUE
                            }).ToList();

                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all User Admin";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetAllUserAdminDivisionHct(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on tu.ID_UNIT equals tp.ID_UNIT
                            join u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                                on tp.ID_POSITION equals u.ID_POSITION
                            select new AdminDivisionOutput
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME,
                                idUser = u.ID_USER,
                                userName = u.FULLNAME,
                                idPosition = tp.ID_POSITION,
                                positionName = tp.POSITION_NAME
                            }).ToList();

                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all User Admin";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel DeleteEplLevel(ParamUpdateLevelemp pr, SessionUser sessionUser)
        {
            try
            {
                string nol = "0";
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tr_level_employee.Where(p => p.ID_USER == pr.idUser && p.ID_EMP_LEVEL == pr.idemplevel).FirstOrDefault();
                if (dtUser != null)
                {
                    dtUser.STATUS_CODE = 0;
                    dtUser.MODIFIED_ON = DateTime.Now;
                    dtUser.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();
                    output.Status = "OK";
                    output.Message = "Success Hapus admin divisi";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed delete letter";
                }


                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetContentTemplate(SessionUser sessionUser)
        {

            try
            {
                //if (sessionUser.idGroup == "B")
                //{
                var dataContent = (from c in db.tm_content_template.Where(p => p.ID_UNIT == sessionUser.idUnit && p.IS_DELETED == 0 && p.KODE == null).OrderBy(p => p.TEMPLATE_NAME)
                                   select new OutputContentTemplate
                                   {
                                       idContentTemplate = c.ID_CONTENT_TEMPLATE,
                                       templateContent = c.TEMPLATE_CONTENT,
                                       templateName = c.TEMPLATE_NAME,
                                       isDeleted = c.IS_DELETED
                                   }).ToList();

                output.Status = "OK";
                output.Result = dataContent;
                output.Message = "Sukses mengambil data";

                return output;
                //}
                //else
                //{
                //    output.Status = "NG";
                //    output.Message = "Tidak diizinkan untuk mengakses halaman ini";

                //    return output;
                //}
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }

        }

        public GeneralOutputModel AddContentTemplate(ParamInsertContentTemplate pr, SessionUser sessionUser)
        {
            try
            {
                if (sessionUser.idGroup == "B" || sessionUser.idGroup == "S")
                {
                    Tm_Content_Template content = new Tm_Content_Template();
                    content.TEMPLATE_NAME = pr.templateName;
                    content.TEMPLATE_CONTENT = pr.templateContent;
                    content.ID_UNIT = sessionUser.idUnit;
                    content.IS_DELETED = 0;
                    content.CREATED_ON = DateTime.Now;
                    content.CREATED_BY = sessionUser.idUser;
                    content.MODIFIED_ON = DateTime.Now;
                    content.MODIFIED_BY = sessionUser.idUser;

                    db.tm_content_template.Add(content);
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Result = content.ID_CONTENT_TEMPLATE;
                    output.Message = "Sukses menambahkan data";

                    return output;
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Tidak diizinkan untuk mengakses halaman ini";

                    return output;
                }
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel AddContentTemplateBulk(ParamInsertContentTemplateBulk pr, SessionUser sessionUser)
        {
            string userCode = "01";
            var kodeTemplate = GenerateKodeTempBulk(69, userCode, sessionUser);
            try
            {
               
                if (sessionUser.idGroup == "B" || sessionUser.idGroup == "S")
                {
                   
                    Tm_Content_Template content = new Tm_Content_Template();
                    
                    content.TEMPLATE_NAME = pr.templateName;
                    content.TEMPLATE_CONTENT = pr.templateContent;
                    content.ID_UNIT = sessionUser.idUnit;
                    content.KODE = kodeTemplate;
                    content.IS_DELETED = 0;
                    content.CREATED_ON = DateTime.Now;
                    content.CREATED_BY = sessionUser.idUser;
                    content.MODIFIED_ON = DateTime.Now;
                    content.MODIFIED_BY = sessionUser.idUser;

                    db.tm_content_template.Add(content);
                    db.SaveChanges();
                    var ReceiverList = JsonConvert.DeserializeObject<List<ListParameter>>(pr.parameter).ToList();
                    foreach (var item in ReceiverList)
                    {
                        Tm_Param_Template_Table recipient = new Tm_Param_Template_Table();
                        //recipient.NAMA_PARAMETER=ReceiverList.
                        recipient.NAMA_PARAMETER = item.parameter;
                        recipient.KODE = kodeTemplate;
                        recipient.CREATED_ON = DateTime.Now;
                        recipient.CREATED_BY = sessionUser.idUser;
                        recipient.MODIFIED_ON = DateTime.Now;
                        recipient.MODIFIED_BY = sessionUser.idUser;
                        db.tm_param_template.Add(recipient);
                        db.SaveChanges();
                    }
                    output.Status = "OK";
                    output.Result = content.ID_CONTENT_TEMPLATE;
                    output.Message = "Sukses menambahkan data";

                    return output;
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Tidak diizinkan untuk mengakses halaman ini";

                    return output;
                }
            }
            catch (Exception ex)
            {
                    var content = db.tm_content_template.Where(p => p.KODE == kodeTemplate).FirstOrDefault();
                    if (content != null)
                    {
                        content.IS_DELETED = 1;
                        content.MODIFIED_ON = DateTime.Now;
                        content.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        
        public string GenerateKodeTempBulk(int type, string userCode, SessionUser sessionUser)
        {
            try
            {
                int year = Convert.ToInt32(DateTime.Now.ToString("yyyy"));
                int month = Convert.ToInt32(DateTime.Now.ToString("MM"));
                int date = Convert.ToInt32(DateTime.Now.ToString("dd"));
                string monthVal = month.ToString();
                var dateVal = DateTime.Now.ToString("dd");
                var getDtNumber = db.tr_document_number.Where(p => p.NUMBER_TYPE == type && p.YEAR == year
                                     && p.USER_CODE == userCode).FirstOrDefault();
                if (getDtNumber == null)    
                {
                    //add new number
                    Tr_Document_Number_Table tdn = new Tr_Document_Number_Table();
                    tdn.NUMBER_TYPE = type;
                    tdn.USER_CODE = userCode;
                    tdn.YEAR = year;
                    tdn.MONTH = month;
                    tdn.DATE = date;
                    tdn.NUMBER = 1;
                    tdn.CREATED_ON = DateTime.Now;
                    tdn.CREATED_BY = sessionUser.idUser;
                    tdn.MODIFIED_ON = DateTime.Now;
                    tdn.MODIFIED_BY = sessionUser.idUser;

                    db.tr_document_number.Add(tdn);
                    db.SaveChanges();

                    var getStringMap = GetStringMapping("tr_kode_tempbulk", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + dateVal;
                    }


                    return getStringMap  + "-TMP" + year + monthVal + dateVal + "000" + 1;
                }
                else
                {
                    int numbers = getDtNumber.NUMBER + 1;

                    getDtNumber.NUMBER = numbers;
                    getDtNumber.MODIFIED_ON = DateTime.Now;
                    getDtNumber.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    var getStringMap = GetStringMapping("tr_kode_tempbulk", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }

                    if (numbers < 10)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "000" + nmbr;
                        return getStringMap + "-TMP-" + year + monthVal + dateVal + data;
                    }
                    else if (numbers < 100)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "00" + nmbr;
                        return getStringMap  + "-TMP-" + year + monthVal + dateVal + data;
                    }
                    else if (numbers < 999)
                    {
                        var nmbr = Convert.ToString(numbers);
                        var data = "0" + nmbr;
                        return getStringMap  + "-TMP-" + year + monthVal + dateVal + data;
                    }
                    return getStringMap  + "-TMP-" + year + monthVal + dateVal + numbers;
                }

            }
            catch (Exception ex)
            {
                return "NG";
            }
        }


        public GeneralOutputModel UpdateContentTemplate(ParamUpdateContentTemplate pr, SessionUser sessionUser)
        {
            try
            {
                if (sessionUser.idGroup == "B" || sessionUser.idGroup == "S")
                {
                    var content = db.tm_content_template.Where(p => p.ID_CONTENT_TEMPLATE == pr.idContentTemplate && p.ID_UNIT == sessionUser.idUnit).FirstOrDefault();
                    if (content != null)
                    {
                        content.TEMPLATE_NAME = pr.templateName;
                        content.TEMPLATE_CONTENT = pr.templateContent;
                        content.IS_DELETED = pr.isDeleted;
                        content.MODIFIED_ON = DateTime.Now;
                        content.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();

                        output.Status = "OK";
                        output.Result = content.ID_CONTENT_TEMPLATE;
                        output.Message = "Sukses merubah data";

                        return output;
                    }
                    else
                    {
                        output.Status = "NG";
                        output.Message = "Data tidak ditemukan";

                        return output;
                    }

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Tidak diizinkan untuk mengakses halaman ini";

                    return output;
                }
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel InsertLetterOutbox(ParamInsertLetterOutbox pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachment outputAttachment = new OutputInsertAttachment();

                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                DateTime today = DateTime.Now;
                string formattedDate = today.ToString("yyyy-MM-dd");
                //var checkmanager = (from u in db.tm_user
                //                    join p in db.tm_position.Where(p => p.ID_UNIT == sessionUser.idUnit)
                //                        on u.ID_POSITION equals p.ID_POSITION
                //                    join l in db.tr_level_employee.Where(p => p.ID_LEVEL == 6)
                //                        on u.ID_USER equals l.ID_USER
                //                    select u).FirstOrDefault();
                //if (pr.outboxType != 2) 
                //{
                //    if (checkmanager != null)
                //    {
                //        var checker = JsonConvert.DeserializeObject<List<ParamInsertChecker>>(pr.idUserChecker).ToList();
                //        var checkanotherunit = checker.Where(p => p.idUnitChecker != sessionUser.idUnit).FirstOrDefault();
                //        var checkermanager = checker.Where(p => p.idUserChecker == checkmanager.ID_USER).FirstOrDefault();
                //        if (checkanotherunit != null && checkermanager == null)
                //        {
                //            output.Status = "NG";
                //            output.Message = "Pemeriksa harus ada user level manager untuk lintas divisi";

                //            return output;
                //        }
                //    }
                //    else
                //    {
                //        output.Status = "NG";
                //        output.Message = "Manager pada divisi " + sessionUser.unitCode + " belum di setting!Silahkan hubungi admin";

                //        return output;
                //    }
                //}

                //string letterType = GetStringMapping("tm_letter", "LETTER_TYPE_CODE", 1);
                if (pr.idresponsesurat == Guid.Empty)
                {
                    //insert new letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = noLetter;
                    letter.ABOUT = pr.about;
                    letter.OUTBOX_TYPE_CODE = pr.outboxType;
                    letter.RESULT_TYPE_CODE = pr.resultType;
                    letter.SIGNATURE_TYPE_CODE = pr.signatureType;
                    letter.ATTACHMENT_DESC = pr.attachmentCount;
                    letter.PRIORITY = pr.priority;
                    letter.LETTER_TYPE_CODE = pr.letterTypeCode;
                    letter.STATUS_CODE = pr.saveType;
                    //letter.SENDER_NAME = pr.senderName;
                    letter.SENDER_ADDRESS = pr.senderAddress;
                    letter.LETTER_DATE = DateTime.Now;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                else
                {
                    if (pr.saveType == 1 || pr.saveType == 2)
                    {
                        var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idresponsesurat).FirstOrDefault();

                        dtLetter.LETTER_NUMBER = noLetter;
                        dtLetter.ABOUT = pr.about;
                        dtLetter.OUTBOX_TYPE_CODE = pr.outboxType;
                        dtLetter.RESULT_TYPE_CODE = pr.resultType;
                        dtLetter.SIGNATURE_TYPE_CODE = pr.signatureType;
                        dtLetter.ATTACHMENT_DESC = pr.attachmentCount;
                        dtLetter.PRIORITY = pr.priority;
                        dtLetter.LETTER_TYPE_CODE = pr.letterTypeCode;
                        dtLetter.STATUS_CODE = pr.saveType;
                        //dtLetter.SENDER_NAME = pr.senderName;
                        dtLetter.SENDER_ADDRESS = pr.senderAddress;
                        dtLetter.LETTER_DATE = DateTime.Now;
                        dtLetter.MODIFIED_ON = DateTime.Now;
                        dtLetter.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }

                }
                if (pr.saveType == 1 || pr.saveType == 2)//disimpan atau baru dikirim
                {
                    //INSERT ISI
                    var dtContent = db.tr_content.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtContent != null)
                    {
                        db.tr_content.Remove(dtContent);
                        db.SaveChanges();
                    }

                    Tr_Content_Table content = new Tr_Content_Table();
                    content.ID_LETTER = idLetter;
                    content.LETTER_CONTENT = pr.isiSurat;
                    content.CREATED_ON = DateTime.Now;
                    content.CREATED_BY = sessionUser.idUser;
                    content.MODIFIED_ON = DateTime.Now;
                    content.MODIFIED_BY = sessionUser.idUser;
                    db.tr_content.Add(content);
                    db.SaveChanges();

                    //insert pengirim
                    var dtSender = db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtSender != null)
                    {
                        db.tr_letter_sender.Remove(dtSender);
                        db.SaveChanges();
                    }

                    Tr_Letter_Sender_Table sender = new Tr_Letter_Sender_Table();
                    sender.ID_LETTER = idLetter;
                    sender.ID_USER_SENDER = pr.bossUserId;
                    sender.ID_POSITION_SENDER = pr.bossPositionId;
                    sender.ID_UNIT_SENDER = pr.bossUnitId;
                    sender.ID_LEVEL_SENDER = pr.bossLevelId;
                    sender.IS_MAIN = 1;
                    sender.SENDER_POSITION_NAME = pr.bossPositionName;
                    sender.CREATED_ON = DateTime.Now;
                    sender.CREATED_BY = sessionUser.idUser;
                    sender.MODIFIED_ON = DateTime.Now;
                    sender.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_sender.Add(sender);
                    db.SaveChanges();

                    //INSERT PENERIMA KELUAR
                    var dtReceiver = db.tr_outgoing_recipient.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtReceiver != null)
                    {
                        db.tr_outgoing_recipient.RemoveRange(dtReceiver);
                        db.SaveChanges();
                    }

                    var ReceiverList = JsonConvert.DeserializeObject<List<ParamInsertOutgoingRecipient>>(pr.senderName).ToList();
                    foreach (var item in ReceiverList)
                    {
                        Tr_Outgoing_Recipient_Table recipient = new Tr_Outgoing_Recipient_Table();
                        recipient.ID_LETTER = idLetter;
                        recipient.RECIPIENT_NAME = item.senderName;
                        recipient.RECIPIENT_ADDRESS = item.senderAddress;
                        recipient.RECEPIENT_COMPANY = item.senderCompanyName;
                        recipient.RECIPIENT_NUMBER = item.senderPhoneNumber;
                        recipient.CREATED_ON = DateTime.Now;
                        recipient.CREATED_BY = sessionUser.idUser;
                        recipient.MODIFIED_ON = DateTime.Now;
                        recipient.MODIFIED_BY = sessionUser.idUser;
                        db.tr_outgoing_recipient.Add(recipient);
                        db.SaveChanges();
                    }


                    //insert pemeriksa
                    var checkerList = JsonConvert.DeserializeObject<List<ParamInsertChecker>>(pr.idUserChecker).ToList();
                    var checkerundermanager = checkerList.Where(p => p.idLevelChecker > 6).OrderByDescending(p => p.idLevelChecker).ToList();
                    var checkerName = "";
                    List<GetOuputIdSekdir> sekdirs = new List<GetOuputIdSekdir>();
                    var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtChecker != null)
                    {
                        db.tr_checker.RemoveRange(dtChecker);
                        db.SaveChanges();
                    }

                    int checkOrder = 1;
                    foreach (var item in checkerundermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }
                    var checkermanagerMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.idUnit && p.idLevelChecker == 6).ToList();
                    foreach (var item in checkermanagerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkeruppermanager = checkerList.Where(p => (p.idLevelChecker == 6 && p.idUnitChecker != sessionUser.idUnit) || (p.idLevelChecker < 6 && p.idLevelChecker != 2 && p.idLevelChecker != 1)).OrderByDescending(p => p.idLevelChecker).ToList();
                    int lastLevelId = 0;
                    foreach (var item in checkeruppermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }
                    if (lastLevelId != 0)
                    {
                        ++checkOrder;
                    }
                    var checkerdirectorMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.directorIdUnit && p.idLevelChecker == 2).ToList();
                    foreach (var item in checkerdirectorMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkerdirectorelse = checkerList.Where(p => (p.idLevelChecker == 2 && p.idUnitChecker != sessionUser.directorIdUnit)).OrderByDescending(p => p.idLevelChecker).ToList();
                    lastLevelId = 0;
                    foreach (var item in checkerdirectorelse)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }
                    var checkercommisionerMaker = checkerList.Where(p => p.idLevelChecker == 1).ToList();
                    foreach (var item in checkercommisionerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }


                }
                var description = "Surat Keluar disimpan";
                if (pr.saveType == 2)
                {
                    description = "Surat Keluar dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Surat Keluar disetujui";
                }
                if (pr.saveType == 5)
                {
                    description = "Surat Keluar ditolak";
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 1 && pr.saveType == 4)
                {
                    description = "Surat Keluar dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan surat";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim surat";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui surat";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak surat";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDetailLetterSK(ParamGetDetailLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailLetter letter = new OutputDetailLetter();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                select new LetterOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;
                    if (pr.lettertype!="22")
                    {
                        InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");
                    }
                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        select new OutputListReceiver
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    select new OutputListCopy
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetter
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachment
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionLetter
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();
                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                      join j in db.tm_position
                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                      join u in db.tm_user
                                          on c.ID_USER_SENDER equals u.ID_USER
                                      select new OutputListLetterSender
                                      {
                                          idLetterSender = c.ID_LETTER_SENDER,
                                          idPositionSender = c.ID_POSITION_SENDER,
                                          idUserSender = c.ID_USER_SENDER,
                                          idUnitSender = c.ID_UNIT_SENDER,
                                          idLevelSender = c.ID_LEVEL_SENDER,
                                          isMain = c.IS_MAIN,
                                          positionName = j.POSITION_NAME,
                                          fullname = u.FULLNAME,
                                          nip = u.NIP
                                      }).ToList();
                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListChecker
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    var outgoingRecipientList = (from a in db.tr_outgoing_recipient.Where(p => p.ID_LETTER == pr.idLetter)
                                                 select new OutputListOutgoingRecipient
                                                 {
                                                     idOutgoingRecipient = a.ID_OUTGOING_RECIPIENT,
                                                     recipientAddress = a.RECIPIENT_ADDRESS,
                                                     recipientName = a.RECIPIENT_NAME,
                                                     recipientCompany = a.RECEPIENT_COMPANY,
                                                     recipientPhoneNumber = a.RECIPIENT_NUMBER
                                                 }).ToList();
                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                         select new OutputDetailLetterContent
                                         {
                                             idContent = a.ID_CONTENT,
                                             letterContent = a.LETTER_CONTENT
                                         }).FirstOrDefault();

                    var checkerListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_DELEGASI equals u.ID_USER
                                       select new OutputListCheckerDelg
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_DELEGASI,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();

                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;
                    letter.sender = senderList;
                    letter.checker = checkerList;
                    letter.outgoingRecipient = outgoingRecipientList;
                    letter.letterContent = letterContent;

                    letter.checkerDelg = checkerListDelg;

                    //update status baca
                    if (pr.lettertype!="22")
                    {
                        var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                        if (tblStatus != null)
                        {
                            tblStatus.READ_STATUS = 0;
                            tblStatus.MODIFIED_ON = DateTime.Now;
                            tblStatus.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }
                   
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Letter";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail letter";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel ApprovalLetter(ParamApprovalLetter pr, SessionUser sessionUser)
        {
            try
            {
                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                //update pemeriksa
                var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ID_USER_CHECKER == sessionUser.idUser && p.ID_POSITION_CHECKER == sessionUser.idPosition && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                if (dtChecker == null && sessionUser.idGroup == "S")
                {
                    var dtlSekre = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                    join s in db.tr_setingseketaris
                                        on u.ID_USER equals s.ID_SEKETARIS
                                    select new SessionUser
                                    {
                                        idUser = s.ID_DIRKOM,
                                        idPosition = s.ID_POSITION_DIRKOM
                                    }).ToList();
                    List<Guid> ListDir = new List<Guid>();
                    List<Guid> ListDir2 = new List<Guid>();
                    foreach (var item in dtlSekre)
                    {
                        ListDir.Add(item.idUser);
                        ListDir2.Add(item.idPosition);
                    }
                    dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && ListDir.Contains(p.ID_USER_CHECKER) && ListDir2.Contains(p.ID_POSITION_CHECKER) && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                }
                if (dtChecker == null && sessionUser.idGroup != "S")
                {
                    var dtDelg = (from u in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser)
                                  select new
                                  {
                                      u.ID_USER_CHECKER,
                                      u.ID_POSITION_CHECKER
                                  }).FirstOrDefault();
                    dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ID_USER_CHECKER == dtDelg.ID_USER_CHECKER && p.ID_POSITION_CHECKER == dtDelg.ID_POSITION_CHECKER && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                }
                dtChecker.APPROVAL_STATUS = 'Z';
                dtChecker.MODIFIED_ON = DateTime.Now;
                dtChecker.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();

                if (pr.saveType == 4)//diapprove
                {
                    int nextNumberPemeriksa = dtChecker.ORDER_NUMBER + 1;
                    var dtCheckerElse = db.tr_checker.Where(p => p.APPROVAL_STATUS == 'Y' && p.ORDER_NUMBER == dtChecker.ORDER_NUMBER && p.ID_LETTER == idLetter).FirstOrDefault();
                    var dtNextChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ORDER_NUMBER == nextNumberPemeriksa).ToList();
                    if (dtNextChecker.Count() > 0 && dtCheckerElse == null)
                    {
                        foreach (var item in dtNextChecker)
                        {
                            var detailNextChecker = db.tr_checker.Where(p => p.ID_CHECKER == item.ID_CHECKER).FirstOrDefault();
                            detailNextChecker.APPROVAL_STATUS = 'Y';
                            detailNextChecker.MODIFIED_ON = DateTime.Now;
                            detailNextChecker.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                        nextApproval = 1;
                    }
                    if (dtCheckerElse != null)
                    {
                        nextApproval = 1;
                    }
                }
                //update surat
                var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                if (nextApproval == 0 && pr.saveType == 4)
                {
                    noLetter = GenerateNoLetter("BL", sessionUser, idLetter, false, DateTime.Now, "");
                    dtLetter.LETTER_DATE = DateTime.Now;
                }
                dtLetter.LETTER_NUMBER = noLetter;
                if ((nextApproval == 0 && pr.saveType == 4) || pr.saveType == 5)
                {
                    dtLetter.STATUS_CODE = pr.saveType;
                }
                dtLetter.MODIFIED_ON = DateTime.Now;
                dtLetter.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();



                Tr_Notifikasi_Table notifikasi = new Tr_Notifikasi_Table();
                notifikasi.ID_LETTER = idLetter;
                notifikasi.STATUS_DOC = "SURAT KELUAR";
                notifikasi.ID_USER = dtLetter.CREATED_BY;
                notifikasi.ID_USER_APPROVAL = sessionUser.idUser;
                if (pr.saveType == 4)
                {
                notifikasi.NOTIFIKASI = "Surat Keluar Perihal " + dtLetter.ABOUT + " Telah Disetujui Oleh " + sessionUser.nama;

                }
                else if (pr.saveType == 5)
                {
                    notifikasi.NOTIFIKASI = "Surat Keluar Perihal " + dtLetter.ABOUT + " Ditolak Oleh " + sessionUser.nama;

                }

                notifikasi.CREATED_ON = DateTime.Now;
                notifikasi.STATUS_READ = 0;


                db.tr_notifikasi.Add(notifikasi);
                db.SaveChanges();


                var description = "Surat Keluar disimpan";
                if (pr.saveType == 2)
                {
                    description = "Surat Keluar dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Surat Keluar disetujui pemeriksa ke - " + dtChecker.ORDER_NUMBER;
                }
                if (pr.saveType == 5)
                {
                    description = "Surat Keluar ditolak pemeriksa ke - " + dtChecker.ORDER_NUMBER;
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 0 && pr.saveType == 4)
                {
                    description = "Surat Keluar dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan surat";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim surat";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui surat";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak surat";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateOneSignalId(ParamOneSignal pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.idUser).FirstOrDefault();
                dtDocument.ID_ONE_SIGNAL = pr.IdOneSignal;
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update User";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllSignatureUser(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from ti in db.tr_img_signature.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE != 9)
                            join tu in db.tm_user on ti.ID_USER equals tu.ID_USER
                            select new OuputSignature
                            {
                                idMg = ti.ID_IMG,
                                idUser = ti.ID_USER,
                                nip = tu.NIP,
                                fullname = tu.FULLNAME,
                                NameImage = ti.NAME_IMAGE,
                                LenghtImage = ti.LENGHT_IMAGE,
                                TypeImage = ti.TYPE_IMAGE,
                                status_code = ti.STATUS_CODE
                            }).FirstOrDefault();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel InsertDataUserSignature(ImageUploadTTD pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = db.tr_img_signature.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 1).ToList();
                var dataCount = data.Count();
                var data2 = db.tr_img_signature.Where(p => p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 2).ToList();
                var dataCount2 = data2.Count();
                if (dataCount > 0)
                {
                    output.Status = "NG";
                    output.Result = dataCount;
                    output.Message = "Data anda sudah di approval";
                }
                else if (dataCount2 > 0)
                {
                    output.Status = "NG";
                    output.Result = dataCount2;
                    output.Message = "Data masi dalam proses,tidak bisa menginputkan data";
                }
                else
                {
                    Tr_Img_Signature_Table ttd = new Tr_Img_Signature_Table();
                    ttd.ID_USER = sessionUser.idUser;
                    ttd.NAME_IMAGE = sessionUser.nip;
                    ttd.TYPE_IMAGE = pr.TypeImage;
                    ttd.LENGHT_IMAGE = pr.LenghtImage;
                    ttd.STATUS_CODE = 2;
                    ttd.CREATED_ON = DateTime.Now;
                    ttd.CREATED_BY = sessionUser.idUser;
                    ttd.MODIFIED_ON = DateTime.Now;
                    ttd.MODIFIED_BY = sessionUser.idUser;
                    ttd.APPROVAL_REQUEST = "H";
                    db.tr_img_signature.Add(ttd);
                    db.SaveChanges();
                    output.Status = "OK";
                    output.Message = "Success Nemambah Data Signature User";
                }


                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllApprovalSignatureUser(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from ti in db.tr_img_signature.Where(p => p.STATUS_CODE != 9 && p.STATUS_CODE != 1 && p.STATUS_CODE != 3)
                            join tu in db.tm_user.Where(p => p.STATUS_CODE == 1) on ti.ID_USER equals tu.ID_USER
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1) on tu.ID_POSITION equals tp.ID_POSITION
                            join un in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tp.ID_UNIT equals un.ID_UNIT
                            select new OuputSignature
                            {
                                idMg = ti.ID_IMG,
                                idUser = ti.ID_USER,
                                nip = tu.NIP,
                                fullname = tu.FULLNAME,
                                PositionName = tp.POSITION_NAME,
                                UnitName = un.UNIT_NAME,
                                NameImage = ti.NAME_IMAGE +".PNG",
                                LenghtImage = ti.LENGHT_IMAGE,
                                TypeImage = ti.TYPE_IMAGE,
                                status_code = ti.STATUS_CODE
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetOuputApprovalRejectSignatureUser(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from ti in db.tr_img_signature.Where(p => p.STATUS_CODE != 9 && p.STATUS_CODE != 2)
                            join tu in db.tm_user.Where(p => p.STATUS_CODE == 1) on ti.ID_USER equals tu.ID_USER
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1) on tu.ID_POSITION equals tp.ID_POSITION
                            join un in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tp.ID_UNIT equals un.ID_UNIT
                            select new OuputSignature
                            {
                                idMg = ti.ID_IMG,
                                idUser = ti.ID_USER,
                                nip = tu.NIP,
                                fullname = tu.FULLNAME,
                                PositionName = tp.POSITION_NAME,
                                UnitName = un.UNIT_NAME,
                                NameImage = ti.NAME_IMAGE+".PNG",
                                LenghtImage = ti.LENGHT_IMAGE,
                                TypeImage = ti.TYPE_IMAGE,
                                status_code = ti.STATUS_CODE
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        //public GeneralOutputModel ApprovalSigantureDataUser(ParamGetApprovalSignature pr, SessionUser sessionUser)
        public GeneralOutputModel ApprovalSigantureDataUser(ParamJsonStirngSiganture pr, SessionUser sessionUser)
        {
            try
            {
                var data = JsonConvert.DeserializeObject<List<ParamGetApprovalSignature>>(pr.jsonDataString);
                GeneralOutputModel output = new GeneralOutputModel();
                foreach (var item in data)
                {
                    var dtDocument = db.tr_img_signature.Where(p => p.ID_IMG == item.idMg && p.STATUS_CODE == 2).FirstOrDefault();
                    dtDocument.STATUS_CODE = 1;
                    dtDocument.MODIFIED_ON = DateTime.Now;
                    dtDocument.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();


                    Tr_Notifikasi_Table notifikasi = new Tr_Notifikasi_Table();
                    notifikasi.ID_LETTER = dtDocument.ID_IMG;
                    notifikasi.STATUS_DOC = "Tanda Tangan";
                    notifikasi.ID_USER = dtDocument.ID_USER;
                    notifikasi.ID_USER_APPROVAL = sessionUser.idUser;
                    notifikasi.NOTIFIKASI = "Pengajuan Tanda Tangan " + " Telah Disetujui Oleh " + sessionUser.nama;
                    notifikasi.CREATED_ON = DateTime.Now;
                    notifikasi.STATUS_READ = 0;
                    db.tr_notifikasi.Add(notifikasi);
                    db.SaveChanges();

                }



                if (data.Count > 0)
                {
                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Success Update setting user";
                    return output;
                }
                else
                {
                    output.Status = "NG";
                    output.Result = data;
                    output.Message = "Gagal";
                    return output;
                }
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        //public GeneralOutputModel RejectSigantureDataUser(ParamGetApprovalSignature pr, SessionUser sessionUser)
        public GeneralOutputModel RejectSigantureDataUser(ParamJsonStirngSiganture pr, SessionUser sessionUser)
        {
            try
            {
                //GeneralOutputModel output = new GeneralOutputModel();
                //var dtDocument = db.tr_img_signature.Where(p => p.ID_IMG == pr.idMg).FirstOrDefault();
                //dtDocument.STATUS_CODE = 3;
                //dtDocument.MODIFIED_ON = DateTime.Now;
                //dtDocument.MODIFIED_BY = sessionUser.idUser;
                //db.SaveChanges();

                var data = JsonConvert.DeserializeObject<List<ParamGetApprovalSignature>>(pr.jsonDataString);
                GeneralOutputModel output = new GeneralOutputModel();
                foreach (var item in data)
                {
                    var dtDocument = db.tr_img_signature.Where(p => p.ID_IMG == item.idMg && p.STATUS_CODE == 2).FirstOrDefault();
                    dtDocument.STATUS_CODE = 3;
                    dtDocument.MODIFIED_ON = DateTime.Now;
                    dtDocument.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();



                    Tr_Notifikasi_Table notifikasi2 = new Tr_Notifikasi_Table();
                    notifikasi2.ID_LETTER = dtDocument.ID_IMG;
                    notifikasi2.STATUS_DOC = "TANDA TANGAN";
                    notifikasi2.ID_USER = dtDocument.CREATED_BY;
                    notifikasi2.ID_USER_APPROVAL = sessionUser.idUser;
                    notifikasi2.NOTIFIKASI = "Tanda Tangan Ditolak Oleh " + sessionUser.nama;
                    notifikasi2.CREATED_ON = DateTime.Now;
                    notifikasi2.STATUS_READ = 0;


                    db.tr_notifikasi.Add(notifikasi2);
                    db.SaveChanges();

                }

                if (data.Count > 0)
                {
                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Success Update";
                    return output;
                }
                else
                {
                    output.Status = "NG";
                    output.Result = data;
                    output.Message = "Gagal";
                    return output;
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        #region Kurir Non Eoffice

        public GeneralOutputModel GetDataKurirSuratKeluarNon()
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                var getData = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 2 && p.STATUS_CODE == 1 && p.STATUS_SENDER != 3).OrderByDescending(p => p.MODIFIED_ON)
                               join u in db.tm_unit on tl.ID_UNIT equals u.ID_UNIT
                               join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                               join dd in db.tm_user
                                      on tl.MODIFIED_BY equals dd.ID_USER
                               select new OutputKuriletterNonEoffice
                               {    
                                   idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                   letter_number = tl.LETTER_NUMBER,
                                   ReceiptDate = tl.RECEIPTDATE,
                                   delivery_type = tl.DELIVERY_TYPE,
                                   type_report = tl.REPORT_TYPE,
                                   expedition_name = tl.EXPEDITION_NAME,
                                   sender_name = tl.SENDER_NAME,
                                   nip = tl.NIP,
                                   unitname = u.UNIT_NAME,
                                   address = tl.ADDRESS,
                                   purposename = tl.PURPOSE_NAME,
                                   docReceiver = tl.DOC_RECEIVER,
                                   statuskirim = tl.STATUS_SENDER,
                                   nmrreferen = tl.REFERENCE_NUMBER,
                                   phonenumber = tl.PHONE_NUMBER,
                                   tgluntil = Convert.ToDateTime(tl.DATE_UNTIL).ToString("dd MM yyyy"),
                                   cretaeby = ss.FULLNAME,
                                   updateby = dd.FULLNAME,
                                   qrcodenumber = tl.QRCODE_NUMBER
                               }).ToList();



                output.Status = "OK";
                output.Result = getData;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateDataKurirLetterNonOffice_(UpdateNonEoffice pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == pr.idmailingnoneoffice && p.DELIVERY_TYPE == 2).FirstOrDefault();
                data.STATUS_SENDER = pr.statuskirim;
                data.LETTER_NUMBER = pr.letter_number;
                data.DATE_UNTIL = pr.startDate;
                data.RECEIPTDATE = (DateTime)pr.startDate;
                data.PURPOSE_NAME = pr.docReceiver;
                data.READ_STATUS = 0;
                data.MODIFIED_ON = DateTime.Now;
                data.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success Update  ";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetSearchKurirReportDocumentNonEoffice(ParamReportNonOuboxLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 2).OrderByDescending(p => p.RECEIPTDATE).OrderBy(p => p.STATUS_CODE == 1)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "DELIVERY_TYPE")
                                   on tl.REPORT_TYPE equals st.ATTRIBUTEVALUE
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                            join stt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "STATUS_SEND")
                                   on tl.STATUS_SENDER equals stt.ATTRIBUTEVALUE
                            join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                            join dd in db.tm_user
                                   on tl.MODIFIED_BY equals dd.ID_USER
                            select new ReportNonOutboxLetterOutput
                            {

                                letter_number = tl.LETTER_NUMBER,
                                deliveryname = st.VALUE,
                                ReceiptDate = tl.RECEIPTDATE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                unitname = tu.UNIT_NAME,
                                docReceiver = tl.DOC_RECEIVER,
                                statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "Dikembalikan" : tl.STATUS_SENDER == 3 ? "Selesai Antar" : ""),
                                nmrreferen = tl.REFERENCE_NUMBER,
                                address = tl.ADDRESS,
                                purposename = tl.PURPOSE_NAME,
                                tgluntil = Convert.ToDateTime(tl.DATE_UNTIL).ToString("dd/MM/yyyy"),
                                delivery_type = tl.DELIVERY_TYPE,
                                phonenumber = tl.PHONE_NUMBER,
                                cretaeby = ss.FULLNAME,
                                updateby = dd.FULLNAME,
                                type_report = tl.REPORT_TYPE,
                                nmresi=tl.QRCODE_NUMBER

                            }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    data = data.Where(p => p.ReceiptDate >= pr.startDate && p.ReceiptDate <= pr.endDate);
                }

                //if (pr.type_report == 1)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                //if (pr.type_report == 2)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                var docFinal = data.ToList();
                output.Status = "OK";
                output.Result = docFinal.OrderByDescending(p => p.ReceiptDate);
                output.Message = "Success get all data";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        #endregion


        public GeneralOutputModel DeleteUserProfileSignature(OuputSignature pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = db.tr_img_signature.Where(p => p.ID_IMG == pr.idMg && p.STATUS_CODE != 9).FirstOrDefault();
                data.STATUS_CODE = 9;
                data.MODIFIED_ON = DateTime.Now;
                data.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();


                output.Status = "OK";
                output.Result = data;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DetailUserProfileSignature(OuputSignature pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = db.tr_img_signature.Where(p => p.ID_IMG == pr.idMg).FirstOrDefault();
                data.READ_STATUS = 9;
                data.MODIFIED_ON = DateTime.Now;
                data.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();


                output.Status = "OK";
                output.Result = data;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DetailApprovalUserProfileSignature(OuputSignature pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailApprovalSignature Signature = new OutputDetailApprovalSignature();
                var data = (from ti in db.tr_img_signature.Where(p => p.STATUS_CODE != 9 && p.ID_IMG == pr.idMg)
                            join tu in db.tm_user.Where(p => p.STATUS_CODE == 1) on ti.ID_USER equals tu.ID_USER
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1) on tu.ID_POSITION equals tp.ID_POSITION
                            join un in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tp.ID_UNIT equals un.ID_UNIT
                            select new OuputSignature
                            {
                                idMg = ti.ID_IMG,
                                idUser = ti.ID_USER,
                                nip = tu.NIP,
                                fullname = tu.FULLNAME,
                                PositionName = tp.POSITION_NAME,
                                UnitName = un.UNIT_NAME,
                                NameImage = ti.NAME_IMAGE,
                                LenghtImage = ti.LENGHT_IMAGE,
                                TypeImage = ti.TYPE_IMAGE,
                                status_code = ti.STATUS_CODE
                            }).FirstOrDefault();
                Signature.Signature = data;
                output.Status = "OK";
                output.Result = Signature;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateUploadDocNonOffice_(ParamUploadLetterNonOfficeString pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<UpdtaeUploadputletterNonEoffice> returnData = new List<UpdtaeUploadputletterNonEoffice>();
                var dataUpload = JsonConvert.DeserializeObject<List<ParamUploadputletterNonEoffice>>(pr.jsonDataString);
                var isGagal = 0;
                foreach (var item in dataUpload)
                {

                    //check nomor surat
                    //var existLetterNumber = db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER == item.letter_number).AsQueryable();
                    //var countLetternumber = existLetterNumber.Count();
                    //if (countLetternumber < 0)
                    //{
                    //    returnData.Add(new UpdtaeUploadputletterNonEoffice
                    //    {

                    //        nmrawb = item.nmrawb,
                    //        nmrreferen = item.nmrreferen,
                    //        expedition_name = item.expedition_name,
                    //        sender_name = item.sender_name,
                    //        nip = item.nip,
                    //        unitname = item.unitname,
                    //        kodeunit = item.kodeunit,
                    //        letter_number = item.letter_number,
                    //        docReceiver = item.docReceiver,
                    //        phonenumber = item.phonenumber,
                    //        address = item.address,
                    //        purposename = item.purposename,
                    //        //DateUntil = DateTime.Now,
                    //        statuskirim = item.statuskirim,

                    //        statusUpload = "Gagal Nomor Surat" + item.letter_number + " tidak ditemukan"
                    //    });
                    //    isGagal++;
                    //    continue;
                    //}
                    //check if unit kode  exist
                    var asd = db.tm_unit.Where(p => p.UNIT_CODE == item.kodeunit).FirstOrDefault();
                    if (asd == null)
                    {
                        returnData.Add(new UpdtaeUploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            kodeunit = item.kodeunit,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            purposename = item.purposename,
                            //DateUntil = DateTime.Now,
                            statuskirim = item.statuskirim,
                            statusUpload = "Gagal kode unit " + item.kodeunit + " Tidak Ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    //check if nip  exist
                    var existNip = db.tr_letter_noneoffice.Where(p => p.NIP == item.nip).FirstOrDefault();
                    if (existNip == null)
                    {
                        returnData.Add(new UpdtaeUploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            kodeunit = item.kodeunit,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            purposename = item.purposename,
                            //DateUntil = DateTime.Now,
                            statuskirim = item.statuskirim,
                            statusUpload = "Gagal Nip " + item.nip + " Tidak Ditemukan"
                        });
                        isGagal++;
                        continue;
                    }



                    var datastatus = item.statuskirim == "Proses" ? "PROCESS" : item.statuskirim == "Dikembalikan" ? "RETURN" : item.statuskirim == "return" ? "RETURN" : item.statuskirim == "Selesai" ? "DONE" : item.statuskirim == "selesai" ? "DONE" : item.statuskirim == "Delete" ? "Delete" : "PROCESS";
                    var getStringMapStatusSend = GetStringMappingByValue("tr_letter_noneoffice", "STATUS_SEND", datastatus);
                    //check delivery tipe
                    if (getStringMapStatusSend == "NG")
                    {
                        returnData.Add(new UpdtaeUploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            kodeunit = item.kodeunit,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            purposename = item.purposename,
                            //DateUntil = DateTime.Now,
                            statuskirim = item.statuskirim,
                            statusUpload = "Gagal Status Pengiriman " + item.statuskirim + " tidak ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    if (datastatus == "Delete")
                    {
                        var delete = db.tr_letter_noneoffice.Where(p => p.NO_AWB == item.nmrawb).ToList();
                        db.tr_letter_noneoffice.RemoveRange(delete);
                    }
                    var DeliveryTypeZero = db.tr_letter_noneoffice.Where(p => p.DELIVERY_TYPE == 0).AsQueryable();
                    var countDeliveryTypeZero = DeliveryTypeZero.Count();
                    if (countDeliveryTypeZero > 0)
                    {
                        var delete = db.tr_letter_noneoffice.Where(p => p.DELIVERY_TYPE == 0).ToList();
                        db.tr_letter_noneoffice.RemoveRange(delete);
                    }


                    //var data = db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER == item.letter_number && p.NIP == item.nip && p.ID_UNIT == existKodeUnit.ID_UNIT && p.DELIVERY_TYPE == 1).FirstOrDefault();
                    var data = db.tr_letter_noneoffice.Where(p => p.NO_AWB == item.nmrawb && p.DELIVERY_TYPE == 1).FirstOrDefault();
                    if (data != null)
                    {

                        data.NO_AWB = item.nmrawb;
                        data.REFERENCE_NUMBER = item.nmrreferen;
                        data.EXPEDITION_NAME = item.expedition_name;
                        data.SENDER_NAME = item.sender_name;
                        data.NIP = item.nip;
                        data.READ_STATUS = 0;
                        data.ID_UNIT = asd.ID_UNIT;
                        data.LETTER_NUMBER = item.letter_number;
                        data.DOC_RECEIVER = item.docReceiver;
                        data.PHONE_NUMBER = item.phonenumber;
                        data.ADDRESS = item.address;
                        data.PURPOSE_NAME = item.purposename;
                        //if (item.tgluntil != null)
                        //{
                        //    data.DATE_UNTIL = DateTime.ParseExact(item.tgluntil, "yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture); 
                        //}
                        //data.DATE_UNTIL = item.DateUntil;
                        if (item.statuskirim == "Selesai" || item.statuskirim == "selesai")
                        {

                            var cultureInfo = new CultureInfo("id-ID");
                            //string dateString = "12 Juni 2008";
                            var dateTime = DateTime.Parse(item.tgluntil, cultureInfo,
                                                            DateTimeStyles.NoCurrentDateDefault);
                            data.DATE_UNTIL = dateTime;
                        }

                        //data.DATE_UNTIL = (item.statuskirim == "Selesai" ? DateTime.ParseExact(item.tgluntil, "yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) : item.statuskirim == "Dikembalikan" ? DateTime.ParseExact(item.tgluntil, "yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) : item.statuskirim == "return" ? DateTime.ParseExact(item.tgluntil, "yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) : item.DateUntil);
                        data.STATUS_SENDER = (item.statuskirim == "Proses" ? 1 : item.statuskirim == "PROCESS" ? 1 : item.statuskirim == "Process" ? 1 : item.statuskirim == "return" ? 2 : item.statuskirim == "RETURN" ? 2 : item.statuskirim == "Dikembalikan" ? 2 : item.statuskirim == "Selesai" ? 3 : item.statuskirim == "selesai" ? 3 : 1);
                        //data.STATUS_SENDER = (item.statuskirim == "Proses" ? 1 : item.statuskirim == "Dikembalikan" ? 2 : item.statuskirim == "Selesai" ? 3 : item.statuskirim == "Sampai" ? 3 : 1);
                        data.MODIFIED_ON = DateTime.Now;
                        data.MODIFIED_BY = sessionUser.idUser;
                        db.SaveChanges();

                        returnData.Add(new UpdtaeUploadputletterNonEoffice
                        {
                            nmrawb = item.nmrawb,
                            nmrreferen = item.nmrreferen,
                            expedition_name = item.expedition_name,
                            sender_name = item.sender_name,
                            nip = item.nip,
                            unitname = item.unitname,
                            kodeunit = item.kodeunit,
                            letter_number = item.letter_number,
                            docReceiver = item.docReceiver,
                            phonenumber = item.phonenumber,
                            address = item.address,
                            purposename = item.purposename,
                            tgluntil = item.tgluntil == null ? "" : item.tgluntil,
                            statuskirim = item.statuskirim,
                            statusUpload = "Sukses"
                        });


                    }
                    else
                    {
                        continue;
                    }


                }
                output.Status = "OK";
                output.Result = returnData;
                if (isGagal != 0)
                {
                    output.Message = "Terdapat Total " + isGagal + " Dokumen Gagal di Upload";
                }
                else
                {
                    output.Message = "Sukses mengunggah dokumen";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetDataKurirNameNonEoffice(string keyword)
        {
            try
            {
                List<OutputletterNonEoffice> userList = new List<OutputletterNonEoffice>();
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from u in db.tr_letter_noneoffice.Where(p => p.EXPEDITION_NAME != null && p.DELIVERY_TYPE == 2 && p.EXPEDITION_NAME.ToUpper().Contains(keyword.ToUpper()))

                            select new OutputletterNonEoffice
                            {
                                expedition_name = u.EXPEDITION_NAME
                            }).Take(1).ToList();
                //var groupedCustomerList = data
                //.GroupBy(u => u.delivery_type)
                //.ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get name ekspedisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailsEkspedisiNonEoffic(getByIdNonEoffice pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var getData = (from tl in db.tr_letter_noneoffice.Where(p => p.STATUS_CODE == 1 && p.LETTER_NUMBER == pr.letter_number && p.DELIVERY_TYPE == 1)
                               select new OutputletterNonEoffice
                               {
                                   letter_number = tl.LETTER_NUMBER,
                                   nmrreferen = (tl.REFERENCE_NUMBER == "" ? "  " : tl.REFERENCE_NUMBER),
                                   nmrawb = (tl.NO_AWB == "" ? "  " : tl.NO_AWB),
                               }).FirstOrDefault();

                output.Status = "OK";
                output.Result = getData;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetDetailsKurirNonEoffice(getByIdNonEoffice pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var getData = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER == pr.letter_number && p.DELIVERY_TYPE == 2)
                               select new OutputKuriletterNonEoffice
                               {
                                   idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                   letter_number = tl.LETTER_NUMBER,
                                   ReceiptDate = tl.RECEIPTDATE,
                                   delivery_type = tl.DELIVERY_TYPE,
                                   type_report = tl.REPORT_TYPE,
                                   expedition_name = tl.EXPEDITION_NAME,
                                   sender_name = tl.SENDER_NAME,
                                   nip = tl.NIP,
                                   docReceiver = tl.DOC_RECEIVER,
                                   statuskirim = tl.STATUS_SENDER,
                                   nmrreferen = tl.REFERENCE_NUMBER

                               }).FirstOrDefault();

                output.Status = "OK";
                output.Result = getData;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DetailNotifNonEoffice_(getByIdNonEoffice pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailDataNotifNon dataNotifNon = new OutputDetailDataNotifNon();



                var deliveritype = db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == pr.idmailingnoneoffice).FirstOrDefault();
                if (deliveritype.DELIVERY_TYPE == 1)
                {
                    var dataNon = (from tl in db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == pr.idmailingnoneoffice && p.DELIVERY_TYPE == 1)
                                   join u in db.tm_unit on tl.ID_UNIT equals u.ID_UNIT
                                   join ss in db.tm_user
                                          on tl.CREATED_BY equals ss.ID_USER
                                   join dd in db.tm_user
                                          on tl.MODIFIED_BY equals dd.ID_USER
                                   select new OutputletterNonEoffice
                                   {
                                       idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                       letter_number = tl.LETTER_NUMBER,
                                       ReceiptDate = tl.RECEIPTDATE,
                                       delivery_type = tl.DELIVERY_TYPE,
                                       nmrawb = tl.NO_AWB,
                                       type_report = tl.REPORT_TYPE,
                                       expedition_name = tl.EXPEDITION_NAME,
                                       sender_name = tl.SENDER_NAME,
                                       nip = tl.NIP,
                                       unitname = u.UNIT_NAME,
                                       kodeunit = u.UNIT_CODE,
                                       address = tl.ADDRESS,
                                       docReceiver = tl.DOC_RECEIVER,
                                       statuskirim = tl.STATUS_SENDER,
                                       DateUntil = tl.DATE_UNTIL,
                                       phonenumber = tl.PHONE_NUMBER,
                                       purposename = tl.PURPOSE_NAME,
                                       nmrreferen = tl.REFERENCE_NUMBER,
                                       cretaeby = ss.FULLNAME,
                                       updateby = dd.FULLNAME
                                   }).FirstOrDefault();
                    if (dataNon.letter_number != null)
                    {
                        var UpdatedeStatusRead = db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == dataNon.idmailingnoneoffice).FirstOrDefault();
                        UpdatedeStatusRead.READ_STATUS = 9;
                        db.SaveChanges();
                    }
                    dataNotifNon.NotifNonEoffice = dataNon;
                    output.Status = "OK";
                    output.Result = dataNotifNon;
                    output.Message = "Success get data signature user";
                }
                else
                {
                    var dataNon = (from tl in db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == pr.idmailingnoneoffice && p.DELIVERY_TYPE == 2)
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "DELIVERY_TYPE")
                                          on tl.REPORT_TYPE equals st.ATTRIBUTEVALUE
                                   join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                                   join stt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "STATUS_SEND")
                                          on tl.STATUS_SENDER equals stt.ATTRIBUTEVALUE
                                   join ss in db.tm_user
                                          on tl.CREATED_BY equals ss.ID_USER
                                   join dd in db.tm_user
                                          on tl.MODIFIED_BY equals dd.ID_USER
                                   select new OutputletterNonEoffice
                                   {
                                       idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                       letter_number = tl.LETTER_NUMBER,
                                       deliveryname = st.VALUE,
                                       ReceiptDate = tl.RECEIPTDATE,
                                       expedition_name = tl.EXPEDITION_NAME,
                                       sender_name = tl.SENDER_NAME,
                                       unitname = tu.UNIT_NAME,
                                       docReceiver = tl.DOC_RECEIVER,
                                       statusname = stt.VALUE,
                                       nmrreferen = tl.REFERENCE_NUMBER,
                                       address = tl.ADDRESS,
                                       delivery_type = tl.DELIVERY_TYPE,
                                       cretaeby = ss.FULLNAME,
                                       updateby = dd.FULLNAME,
                                       type_report = tl.REPORT_TYPE,
                                       qrcodenumber = tl.QRCODE_NUMBER
                                   }).FirstOrDefault();
                    if (dataNon.letter_number != null)
                    {
                        var UpdatedeStatusRead = db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == dataNon.idmailingnoneoffice).FirstOrDefault();
                        UpdatedeStatusRead.READ_STATUS = 9;
                        db.SaveChanges();
                    }


                    dataNotifNon.NotifNonEoffice = dataNon;
                    output.Status = "OK";
                    output.Result = dataNotifNon;
                    output.Message = "Success get data signature user";
                }



                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDetailsViewEkspedisi_(SessionUser sessionUser, ParamGetDetailsView pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                //var data = new List<DocumentOutput>();

                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 1 && p.STATUS_CODE == 1 && p.NIP == sessionUser.nip).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE == 1)
                                   join u in db.tm_unit on tl.ID_UNIT equals u.ID_UNIT
                                   join ss in db.tm_user
                                       on tl.CREATED_BY equals ss.ID_USER
                                   join dd in db.tm_user
                                          on tl.MODIFIED_BY equals dd.ID_USER
                                   select new ReportNonOutboxLetterOutput
                                   {
                                       idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                       letter_number = tl.LETTER_NUMBER,
                                       tgl = tl.RECEIPTDATE.ToString("dd-MM-yyyy"),
                                       delivery_type = tl.DELIVERY_TYPE,
                                       nmrawb = tl.NO_AWB,
                                       type_report = tl.REPORT_TYPE,
                                       expedition_name = tl.EXPEDITION_NAME,
                                       sender_name = tl.SENDER_NAME,
                                       nip = tl.NIP,
                                       unitname = u.UNIT_NAME,
                                       kodeunit = u.UNIT_CODE,
                                       address = tl.ADDRESS,
                                       docReceiver = tl.DOC_RECEIVER,
                                       statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "dikembalikan" : tl.STATUS_SENDER == 3 ? "Selesai Antar" : ""),
                                       tgluntil = (tl.DATE_UNTIL == tl.RECEIPTDATE ? "" : Convert.ToDateTime(tl.DATE_UNTIL).ToString("dd-MM-yyyy")),
                                       phonenumber = tl.PHONE_NUMBER,
                                       purposename = tl.PURPOSE_NAME,
                                       nmrreferen = tl.REFERENCE_NUMBER,
                                       cretaeby = ss.FULLNAME,
                                       updateby = dd.FULLNAME

                                   }).AsQueryable();

                //if (pr.startDate != null && pr.endDate != null)
                //{
                //    getDocument = getDocument.Where(p => p.ReceiptDate >= pr.startDate && p.ReceiptDate <= pr.endDate);
                //}
                recordsTotal = getDocument.Count();

                // search data when search value found
                if (!string.IsNullOrEmpty(pr.searchValue))
                {
                    getDocument = getDocument.Where(x => x.letter_number.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.nmrawb.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    //x.tgl.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    //x.expedition_name.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.sender_name.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.unitname.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.address.ToLower().Contains(pr.searchValue.ToLower()));
                    //||
                    //x.ekspedisiStatus.ToLower().Contains(pr.searchValue.ToLower()));
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                OutputDetailsView result = new OutputDetailsView();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetDetailsViewKurir_(SessionUser sessionUser, ParamGetDetailsView pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                //var data = new List<DocumentOutput>();

                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from tl in db.tr_letter_noneoffice.Where(p => p.DELIVERY_TYPE == 2 && p.NIP == sessionUser.nip).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join u in db.tm_unit on tl.ID_UNIT equals u.ID_UNIT
                                   join ss in db.tm_user
                                          on tl.CREATED_BY equals ss.ID_USER
                                   join dd in db.tm_user
                                          on tl.MODIFIED_BY equals dd.ID_USER
                                   select new ReportNonOutboxLetterOutput
                                   {

                                       idmailingnoneoffice = tl.ID_MAILING_NON_EOFFICE,
                                       letter_number = tl.LETTER_NUMBER,
                                       tgl = tl.RECEIPTDATE.ToString("dd-MM-yyyy"),
                                       delivery_type = tl.DELIVERY_TYPE,
                                       nmrawb = tl.NO_AWB,
                                       purposename=tl.PURPOSE_NAME,
                                       type_report = tl.REPORT_TYPE,
                                       expedition_name = tl.EXPEDITION_NAME,
                                       sender_name = tl.SENDER_NAME,
                                       nip = ss.NIP,
                                       unitname = u.UNIT_NAME,
                                       address = tl.ADDRESS,
                                       docReceiver = tl.DOC_RECEIVER,
                                       statuskirim = tl.STATUS_SENDER,
                                       tgluntil =  Convert.ToDateTime(tl.DATE_UNTIL).ToString("dd-MM-yyyy"),
                                       nmrreferen = tl.REFERENCE_NUMBER,
                                       cretaeby = ss.FULLNAME,
                                       updateby = dd.FULLNAME,
                                       kurirStatus = (
                                                            tl.STATUS_SENDER == 1 ? "Sedang di Prosess" :
                                                            tl.STATUS_SENDER == 2 ? "Proses Pengiriman" :
                                                            tl.STATUS_SENDER == 3 ? "Selesai Antar" : ""

                                                        ),
                                       deliveryname = (
                                                            tl.DELIVERY_TYPE == 1 ? "Delivery Order" :
                                                            tl.DELIVERY_TYPE == 2 ? "Pickup" : ""
                                                        ),
                                       nmresi=tl.QRCODE_NUMBER

                                   }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    getDocument = getDocument.Where(p => p.ReceiptDate >= pr.startDate && p.ReceiptDate <= pr.endDate);
                }
                recordsTotal = getDocument.Count();

                // search data when search value found
                if (!string.IsNullOrEmpty(pr.searchValue))
                {
                    getDocument = getDocument.Where(x =>
                        x.letter_number.ToLower().Contains(pr.searchValue.ToLower()) ||
                        x.nmresi.ToLower().Contains(pr.searchValue.ToLower())||
                        x.deliveryname.ToLower().Contains(pr.searchValue.ToLower()) ||
                        //x.tgl.ToLower().Contains(pr.searchValue.ToLower()) ||
                        x.docReceiver.ToLower().Contains(pr.searchValue.ToLower()) ||
                        x.expedition_name.ToLower().Contains(pr.searchValue.ToLower()) ||
                        x.sender_name.ToLower().Contains(pr.searchValue.ToLower()) ||
                        x.unitname.ToLower().Contains(pr.searchValue.ToLower())||
                        x.address.ToLower().Contains(pr.searchValue.ToLower()) ||
                        x.kurirStatus.ToLower().Contains(pr.searchValue.ToLower())
                    );
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                OutputDetailsView result = new OutputDetailsView();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel ApprovalSignatureOneDataWeb_(ParamGetApprovalSignatureOnedata pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tr_img_signature.Where(p => p.ID_IMG == pr.idMg).FirstOrDefault();
                if (dtUser != null)
                {
                    dtUser.STATUS_CODE = 1;
                    //dtUser.READ_STATUS = 9;
                    dtUser.MODIFIED_ON = DateTime.Now;
                    dtUser.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    Tr_Notifikasi_Table notifikasi = new Tr_Notifikasi_Table();
                    notifikasi.ID_LETTER = dtUser.ID_IMG;
                    notifikasi.STATUS_DOC = "Tanda Tangan";
                    notifikasi.ID_USER = dtUser.ID_USER;
                    notifikasi.ID_USER_APPROVAL = sessionUser.idUser;
                    notifikasi.NOTIFIKASI = "Pengajuan Tanda Tangan " + " Telah Disetujui Oleh " + sessionUser.nama;
                    notifikasi.CREATED_ON = DateTime.Now;
                    notifikasi.STATUS_READ = 0;
                    db.tr_notifikasi.Add(notifikasi);
                    db.SaveChanges();


                    output.Status = "OK";
                    output.Message = "Success Reject";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed delete letter";
                }


                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel RejectSignatureOneDataWeb_(ParamGetApprovalSignatureOnedata pr, SessionUser sessionUser)
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tr_img_signature.Where(p => p.ID_IMG == pr.idMg).FirstOrDefault();
                if (dtUser != null)
                {
                    dtUser.STATUS_CODE = 3;
                    //dtUser.READ_STATUS = 9;
                    dtUser.MODIFIED_ON = DateTime.Now;
                    dtUser.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();


                    Tr_Notifikasi_Table notifikasi2 = new Tr_Notifikasi_Table();
                    notifikasi2.ID_LETTER = dtUser.ID_IMG;
                    notifikasi2.STATUS_DOC = "TANDA TANGAN";
                    notifikasi2.ID_USER = dtUser.CREATED_BY;
                    notifikasi2.ID_USER_APPROVAL = sessionUser.idUser;
                    notifikasi2.NOTIFIKASI = "Pengajuan Tanda Tangan Ditolak Oleh " + sessionUser.nama;
                    notifikasi2.CREATED_ON = DateTime.Now;
                    notifikasi2.STATUS_READ = 0;


                    db.tr_notifikasi.Add(notifikasi2);
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Message = "Success Reject";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed delete letter";
                }


                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        public GeneralOutputModel GetSKEskpedisi(ParamGetSKDelivery pr, SessionUser sessionUser)
        {
            try
            {
                var data = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.LETTER_TYPE_CODE == 2)
                            join r in db.tr_letter_sender
                                on l.ID_LETTER equals r.ID_LETTER
                            join u in db.tm_user
                                on r.ID_USER_SENDER equals u.ID_USER
                            join p in db.tm_position
                                on u.ID_POSITION equals p.ID_POSITION
                            join rc in db.tr_outgoing_recipient
                                on l.ID_LETTER equals rc.ID_LETTER
                            join tu in db.tm_unit
                                on p.ID_UNIT equals tu.ID_UNIT
                            join ld1 in db.tr_letter_delivery
                                 on l.ID_LETTER equals ld1.ID_LETTER into ld2
                            from ld in ld2.DefaultIfEmpty()
                            join d1 in db.tr_delivery
                                on ld.ID_DELIVERY equals d1.ID_DELIVERY into d2
                            from d in d2.DefaultIfEmpty()
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "STATUS_CODE")
                                on d.STATUS_CODE equals st.ATTRIBUTEVALUE into st1
                            from st2 in st1.DefaultIfEmpty()
                            orderby l.MODIFIED_ON descending
                            select new DeliveryLetterOutput
                            {
                                letterNumber = l.LETTER_NUMBER,
                                receiveDate = d.CREATED_ON,
                                sender = u.FULLNAME,
                                senderDivision = tu.UNIT_NAME,
                                receiver = rc.RECIPIENT_NAME,
                                destination_receiver_name = d.DESTINATION_RECEIVER_NAME,
                                receiverAddress = rc.RECIPIENT_ADDRESS,
                                receiverPhone = rc.RECIPIENT_NUMBER,
                                statusCode = d.STATUS_CODE,
                                status = st2.VALUE,
                                idLetter = l.ID_LETTER,
                                idDelivery = ld.ID_DELIVERY,
                                shippingType = d.SHIPPING_TYPE_CODE,
                                deliveryNumber = d.DELIVERY_NUMBER,
                                deliveryType = d.DELIVERY_TYPE_CODE,
                                modifiedOn = l.MODIFIED_ON,
                                letterMaker = l.CREATED_BY,
                                receiptNumber = d.RECEIPT_NUMBER
                            }).AsQueryable();
                if (pr.type == "All")
                {
                    output.Result = data.Where(p => p.idDelivery == null || p.statusCode == 1).OrderByDescending(p => p.modifiedOn).ToList();
                }
                else if (pr.type == "User")
                {
                    output.Result = data.Where(p => p.letterMaker == sessionUser.idUser || p.sender == sessionUser.nama).OrderByDescending(p => p.modifiedOn).ToList();
                }
                else // detail
                {
                    output.Result = data.Where(p => p.idDelivery == pr.idDelivery && (p.letterMaker == sessionUser.idUser || p.sender == sessionUser.nama)).OrderByDescending(p => p.modifiedOn).ToList();
                    var detaildelivery = db.tr_delivery.Where(p => p.ID_DELIVERY == pr.idDelivery).FirstOrDefault();
                    var checkmaker = data.Where(p => p.idDelivery == pr.idDelivery && p.letterMaker == sessionUser.idUser).FirstOrDefault();
                    if (checkmaker != null)
                    {
                        //update read status maker
                        detaildelivery.DRAFTER_READ_STATUS = 0;
                        db.SaveChanges();
                    }
                    else
                    {
                        detaildelivery.SENDER_READ_STATUS = 0;
                        db.SaveChanges();
                    }
                }

                output.Status = "OK";
                output.Message = "Berhasil Mengambil Data";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();
                return output;
            }
        }

        public GeneralOutputModel InsertDelivery(ParamInsertDelivery pr, SessionUser sessionUser)
        {
            try
            {
                var dataLetter = JsonConvert.DeserializeObject<List<InsertListLetterDelivery>>(pr.idLetter).ToList();
                Tr_Delivery_Table deliv = new Tr_Delivery_Table();
                deliv.SHIPPING_TYPE_CODE = pr.shippingType;
                deliv.EXPEDITION = pr.expedition;
                deliv.REFERENCE_NUMBER = pr.referenceNumber;
                deliv.RECEIPT_NUMBER = pr.receiptNumber;
                deliv.ADDRESS = pr.address;
                deliv.DELIVERY_TYPE_CODE = pr.deliveryType;
                deliv.STATUS_CODE = pr.status;
                deliv.RECEIVER_NAME = pr.receiverName;
                deliv.CREATED_ON = DateTime.Now;
                deliv.CREATED_BY = sessionUser.idUser;
                deliv.MODIFIED_ON = DateTime.Now;
                deliv.MODIFIED_BY = sessionUser.idUser;
                deliv.RECEIVE_DATE = pr.receiveDate;
                deliv.DESTINATION_RECEIVER_NAME = pr.destination_receiver_name;
                deliv.RECEIVER_PHONE = pr.receiverPhone;
                deliv.DRAFTER_READ_STATUS = 99;
                deliv.SENDER_READ_STATUS = 99;

                db.tr_delivery.Add(deliv);
                db.SaveChanges();
                Guid newDelivId = deliv.ID_DELIVERY;
                foreach (var item in dataLetter)
                {
                    Tr_Letter_Delivery ld = new Tr_Letter_Delivery();
                    ld.ID_DELIVERY = newDelivId;
                    ld.ID_LETTER = item.idLetter;
                    ld.CREATED_ON = DateTime.Now;
                    ld.CREATED_BY = sessionUser.idUser;
                    ld.MODIFIED_ON = DateTime.Now;
                    ld.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_delivery.Add(ld);
                    db.SaveChanges();
                }

                output.Status = "OK";
                output.Message = "Berhasil menambahkan delivery";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();
                return output;
            }
        }


        public GeneralOutputModel ExportUpdateNonEofficeEkspedisi_(ParamReportNonOuboxLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 1 && p.STATUS_SENDER != 3).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE == 1)
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                            join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                            join dd in db.tm_user
                                   on tl.MODIFIED_BY equals dd.ID_USER
                            select new ReportNonOutboxLetterOutput
                            {
                                nmrawb = tl.NO_AWB,
                                nmrreferen = tl.REFERENCE_NUMBER,
                                ReceiptDate = tl.RECEIPTDATE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                nip = tl.NIP,
                                unitname = tu.UNIT_NAME,
                                kodeunit = tu.UNIT_CODE,
                                letter_number = tl.LETTER_NUMBER,
                                docReceiver = tl.DOC_RECEIVER,
                                phonenumber = tl.PHONE_NUMBER,
                                address = tl.ADDRESS,
                                purposename = tl.PURPOSE_NAME,
                                statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "Dikembalikan" : " "),
                                statuskirim = tl.STATUS_SENDER,
                                delivery_type = tl.DELIVERY_TYPE,
                                tgluntil = Convert.ToDateTime(tl.DATE_UNTIL).ToString("dd-MMMM-yyyy"),
                                cretaeby = ss.FULLNAME,
                                updateby = dd.FULLNAME,

                            }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    data = data.Where(p => p.ReceiptDate >= pr.startDate && p.ReceiptDate <= pr.endDate);
                }
                //if (pr.delivery_type == 1)
                //{
                //    data = data.Where(p => p.delivery_type == pr.delivery_type);

                //}
                //if (pr.type_report == 1)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                //if (pr.type_report == 2)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                var docFinal = data.ToList();
                output.Status = "OK";
                output.Result = docFinal;
                output.Message = "Success get all data";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetUserDropDownSetUserBod(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "A").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "CFO" || p.UNIT_CODE == "DCM" || p.UNIT_CODE == "DNC" || p.UNIT_CODE == "CEO" || p.UNIT_CODE == "BOD" || p.UNIT_CODE == "KOM" || p.UNIT_CODE == "DPS")
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputSuperUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                unitName = u.UNIT_NAME,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi BOD";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDataUserBodAll(SessionUser sessionUser, ParamGetUsertWeb pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from ts in db.tm_setting_approval.Where(p => p.STATUS_CODE == 1).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join tu in db.tm_user.Where(p => p.STATUS_CODE == 1)
                                   on ts.ID_USER equals tu.ID_USER
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                   on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join u in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                            on ts.ID_UNIT equals u.ID_UNIT
                                   select new DataOuputSuperUserWeb
                                   {
                                       IdBod = ts.ID_SETTING_APPROVAL,
                                       Iduser = tu.ID_USER,
                                       Nip = tu.NIP,
                                       Fullname = tu.FULLNAME,
                                       password = "********",
                                       Unit_name = u.UNIT_NAME,
                                       Unit_code = u.UNIT_CODE,
                                       Idunit = ts.ID_UNIT


                                   }).AsQueryable();

                recordsTotal = getDocument.Count();

                //search data when search value found
                if (!string.IsNullOrEmpty(pr.searchValue))
                {
                    getDocument = getDocument.Where(x =>
                                    x.Nip.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Fullname.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Unit_name.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Unit_code.ToLower().Contains(pr.searchValue.ToLower()));
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                SuperUserOutputWeb result = new SuperUserOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel CreateDataUserBod(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();


               //var ChekParentIdUnit = 

                Tm_Setting_Approval_Table data = new Tm_Setting_Approval_Table();
                data.ID_USER = pr.Iduser;
                data.ID_UNIT = pr.Idunit;
                data.STATUS_CODE = 1;
                data.CREATED_ON = DateTime.Now;
                data.CREATED_BY = sessionUser.idUser;
                data.MODIFIED_ON = DateTime.Now;
                data.MODIFIED_BY = sessionUser.idUser;
                db.tm_setting_approval.Add(data);
                db.SaveChanges();
                output.Status = "OK";
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel DeleteDataSettingApprovalBod(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = db.tm_setting_approval.Where(p => p.ID_SETTING_APPROVAL == pr.IdBod).FirstOrDefault();
                data.STATUS_CODE = 0;
                data.MODIFIED_ON = DateTime.Now;
                data.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();


                output.Status = "OK";
                output.Message = "Success Update data";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel LetterNotifSecretary(ParamGetDetailLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailLetter letter = new OutputDetailLetter();
                var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0).FirstOrDefault();

                dtLetter.MODIFIED_ON = DateTime.Now;
                dtLetter.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();


                output.Status = "OK";
                output.Result = dtLetter;
                output.Message = "Berhasil kirim notifikasi";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailDeliveryEoffice(ParamGetDetailDelivery pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                DeliveryDetailOutput OutputList = new DeliveryDetailOutput();
                var dtDelivery = (from d in db.tr_delivery.Where(p => p.ID_DELIVERY == pr.idDelivery)
                                  join sc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "STATUS_CODE")
                                      on d.STATUS_CODE equals sc.ATTRIBUTEVALUE
                                  join sh in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "SHIPPING_TYPE_CODE")
                                      on d.SHIPPING_TYPE_CODE equals sh.ATTRIBUTEVALUE
                                  join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "DELIVERY_TYPE_CODE")
                                      on d.DELIVERY_TYPE_CODE equals dt.ATTRIBUTEVALUE into dt2
                                  from dt3 in dt2.DefaultIfEmpty()
                                  select new DeliveryDetailOutput
                                  {
                                      idDelivery = d.ID_DELIVERY,
                                      deliveryNumber = d.DELIVERY_NUMBER,
                                      shippingTypeCode = d.SHIPPING_TYPE_CODE,
                                      shippingTypeCodeValue = sh.VALUE,
                                      expedition = d.EXPEDITION,
                                      referenceNumber = d.REFERENCE_NUMBER,
                                      receiptNumber = d.RECEIPT_NUMBER,
                                      address = d.ADDRESS,
                                      deliveryTypeCode = d.DELIVERY_TYPE_CODE,
                                      deliveryTypeCodeValue = dt3.VALUE,
                                      statusCode = d.STATUS_CODE,
                                      statusCodeValue = sc.VALUE,
                                      receiverName = d.RECEIVER_NAME,
                                      destination_receiver_name = d.DESTINATION_RECEIVER_NAME,
                                      receiverPhone = d.RECEIVER_PHONE,
                                      createdOn = d.CREATED_ON,
                                      receiveDate = d.RECEIVE_DATE,
                                      drafterReadStatus = d.DRAFTER_READ_STATUS,
                                      senderReadStatus = d.SENDER_READ_STATUS
                                  }).FirstOrDefault();
                if (dtDelivery != null)
                {
                    var data = (from d in db.tr_delivery.Where(p => p.ID_DELIVERY == dtDelivery.idDelivery)
                                join ld in db.tr_letter_delivery
                                     on d.ID_DELIVERY equals ld.ID_DELIVERY
                                join l in db.tm_letter
                                    on ld.ID_LETTER equals l.ID_LETTER
                                join r in db.tr_letter_sender
                                    on l.ID_LETTER equals r.ID_LETTER
                                join u in db.tm_user
                                    on r.ID_USER_SENDER equals u.ID_USER
                                join p in db.tm_position
                                    on u.ID_POSITION equals p.ID_POSITION
                                join rc in db.tr_outgoing_recipient
                                    on l.ID_LETTER equals rc.ID_LETTER
                                join tu in db.tm_unit
                                    on p.ID_UNIT equals tu.ID_UNIT
                                select new DeliveryLetterOutput
                                {
                                    letterNumber = l.LETTER_NUMBER,
                                    receiveDate = d.CREATED_ON,
                                    sender = u.FULLNAME,
                                    senderDivision = tu.UNIT_NAME,
                                    receiver = rc.RECIPIENT_NAME,
                                    destination_receiver_name = d.DESTINATION_RECEIVER_NAME,
                                    receiverAddress = rc.RECIPIENT_ADDRESS,
                                    statusCode = d.STATUS_CODE,
                                    idLetter = l.ID_LETTER,
                                    idDelivery = d.ID_DELIVERY,
                                    shippingType = d.SHIPPING_TYPE_CODE,
                                    deliveryNumber = d.DELIVERY_NUMBER,
                                    deliveryType = d.DELIVERY_TYPE_CODE,
                                    drafterReadStatus = d.DRAFTER_READ_STATUS,
                                    senderReadStatus = d.SENDER_READ_STATUS
                                }).ToList();
                    OutputList.idDelivery = dtDelivery.idDelivery;
                    OutputList.deliveryNumber = dtDelivery.deliveryNumber;
                    OutputList.shippingTypeCode = dtDelivery.shippingTypeCode;
                    OutputList.shippingTypeCodeValue = dtDelivery.shippingTypeCodeValue;
                    OutputList.expedition = dtDelivery.expedition;
                    OutputList.referenceNumber = dtDelivery.referenceNumber;
                    OutputList.receiptNumber = dtDelivery.receiptNumber;
                    OutputList.address = dtDelivery.address;
                    OutputList.deliveryTypeCode = dtDelivery.deliveryTypeCode;
                    OutputList.deliveryTypeCodeValue = dtDelivery.deliveryTypeCodeValue;
                    OutputList.statusCode = dtDelivery.statusCode;
                    OutputList.statusCodeValue = dtDelivery.statusCodeValue;
                    OutputList.receiverName = dtDelivery.receiverName;
                    OutputList.destination_receiver_name = dtDelivery.destination_receiver_name;
                    OutputList.receiverPhone = dtDelivery.receiverPhone;
                    OutputList.drafterReadStatus = dtDelivery.drafterReadStatus;
                    OutputList.senderReadStatus = dtDelivery.senderReadStatus;
                    OutputList.createdOn = dtDelivery.createdOn;
                    OutputList.receiveDate = dtDelivery.receiveDate;
                    OutputList.letter = data;
                }

                output.Status = "OK";
                output.Result = OutputList;
                output.Message = "Berhasil mengambil detail pengiriman";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateDeliveryEoffice(ParamUpdateDelivery pr, SessionUser sessionUser)
        {
            try
            {
                if (pr.saveType == 1)
                {
                    var dataLetter = JsonConvert.DeserializeObject<List<InsertListLetterDelivery>>(pr.idLetter).ToList();
                    var listLetter = db.tr_letter_delivery.Where(p => p.ID_DELIVERY == pr.idDelivery).ToList();
                    if (listLetter != null)
                    {
                        db.tr_letter_delivery.RemoveRange(listLetter);
                        db.SaveChanges();
                    }

                    var deliv = db.tr_delivery.Where(p => p.ID_DELIVERY == pr.idDelivery).FirstOrDefault();

                    deliv.SHIPPING_TYPE_CODE = pr.shippingType;
                    deliv.EXPEDITION = pr.expedition;
                    deliv.REFERENCE_NUMBER = pr.referenceNumber;
                    deliv.RECEIPT_NUMBER = pr.receiptNumber;
                    deliv.ADDRESS = pr.address;
                    deliv.DELIVERY_TYPE_CODE = pr.deliveryType;
                    deliv.STATUS_CODE = pr.status;
                    deliv.RECEIVER_NAME = pr.receiverName;
                    deliv.DESTINATION_RECEIVER_NAME = pr.destination_receiver_name;
                    deliv.RECEIVER_PHONE = pr.receiverPhone;
                    deliv.MODIFIED_ON = DateTime.Now;
                    deliv.MODIFIED_BY = sessionUser.idUser;
                    deliv.RECEIVE_DATE = pr.receiveDate;
                    deliv.DRAFTER_READ_STATUS = 99;
                    deliv.SENDER_READ_STATUS = 99;
                    db.SaveChanges();

                    foreach (var item in dataLetter)
                    {
                        Tr_Letter_Delivery ld = new Tr_Letter_Delivery();
                        ld.ID_DELIVERY = pr.idDelivery;
                        ld.ID_LETTER = item.idLetter;
                        ld.CREATED_ON = DateTime.Now;
                        ld.CREATED_BY = sessionUser.idUser;
                        ld.MODIFIED_ON = DateTime.Now;
                        ld.MODIFIED_BY = sessionUser.idUser;

                        db.tr_letter_delivery.Add(ld);
                        db.SaveChanges();
                    }
                }
                else
                {
                    var deliv = db.tr_delivery.Where(p => p.ID_DELIVERY == pr.idDelivery).FirstOrDefault();

                    deliv.DELIVERY_NUMBER = pr.deliveryNumber;
                    deliv.MODIFIED_ON = DateTime.Now;
                    deliv.MODIFIED_BY = sessionUser.idUser;
                    deliv.DRAFTER_READ_STATUS = 99;
                    deliv.SENDER_READ_STATUS = 99;
                    db.SaveChanges();
                }


                output.Status = "OK";
                output.Message = "Berhasil merubah data delivery";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetReportEkspedisiEoffice(ParamGetReportEkspedisiEoffice pr, SessionUser sessionUser)
        {
            try
            {
                DateTime endDates = Convert.ToDateTime(pr.endDate).AddHours(23).AddMinutes(59);
                var data = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && p.LETTER_TYPE_CODE == 2 )
                            join r in db.tr_letter_sender
                                on l.ID_LETTER equals r.ID_LETTER
                            join u in db.tm_user
                                on r.ID_USER_SENDER equals u.ID_USER
                            join p in db.tm_position
                                on u.ID_POSITION equals p.ID_POSITION
                            join rc in db.tr_outgoing_recipient
                                on l.ID_LETTER equals rc.ID_LETTER
                            join tu in db.tm_unit
                                on p.ID_UNIT equals tu.ID_UNIT
                            join ld in db.tr_letter_delivery
                                 on l.ID_LETTER equals ld.ID_LETTER
                            join d in db.tr_delivery.Where(p => p.CREATED_ON >= pr.startDate && p.CREATED_ON <= endDates)
                                on ld.ID_DELIVERY equals d.ID_DELIVERY
                            join sc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "STATUS_CODE")
                                on d.STATUS_CODE equals sc.ATTRIBUTEVALUE
                            join sh in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "SHIPPING_TYPE_CODE")
                                on d.SHIPPING_TYPE_CODE equals sh.ATTRIBUTEVALUE
                            join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "DELIVERY_TYPE_CODE")
                                on d.DELIVERY_TYPE_CODE equals dt.ATTRIBUTEVALUE into dt2
                            from dt3 in dt2.DefaultIfEmpty()
                            orderby l.MODIFIED_ON descending
                            select new DeliveryReportOutput
                            {
                                letterNumber = l.LETTER_NUMBER,
                                receiveDate = d.RECEIVE_DATE,
                                sender = u.FULLNAME,
                                senderDivision = tu.UNIT_NAME,
                                receiver = rc.RECIPIENT_NAME,
                                destination_receiver_name = d.DESTINATION_RECEIVER_NAME,
                                receiverAddress = rc.RECIPIENT_ADDRESS,
                                receiverPhone = rc.RECIPIENT_NUMBER,
                                statusCode = d.STATUS_CODE,
                                statusCodeValue = sc.VALUE,
                                deliveryTypeCode = d.DELIVERY_TYPE_CODE,
                                deliveryTypeCodeValue = dt3.VALUE,
                                idDelivery = ld.ID_DELIVERY,
                                shippingTypeCode = d.SHIPPING_TYPE_CODE,
                                shippingTypeCodeValue = sh.VALUE,
                                deliveryNumber = d.DELIVERY_NUMBER,
                                modifiedOn = l.MODIFIED_ON,
                                receiptNumber = d.RECEIPT_NUMBER,
                                referenceNumber = d.REFERENCE_NUMBER,
                                expedition = d.EXPEDITION,
                                drafterReadStatus = d.DRAFTER_READ_STATUS,
                                senderReadStatus = d.SENDER_READ_STATUS
                            }).AsQueryable();
                output.Status = "OK";
                if (pr.statusElse != 0)
                {
                    output.Result = data.OrderByDescending(p => p.modifiedOn).Where(p => p.statusCode != pr.statusElse).ToList();
                }
                else
                {
                    output.Result = data.OrderByDescending(p => p.modifiedOn).ToList();
                }

                output.Message = "Berhasil mengambil data pengiriman";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UploadExpeditionEoffice(ParamUploadEkspedisiEofficeString pr, SessionUser sessionUser)
        {
            try
            {
                List<UploadEkspedisiEofficeOutput> returnData = new List<UploadEkspedisiEofficeOutput>();
                var dataUpload = JsonConvert.DeserializeObject<List<ParamUploadEkspedisiEoffice>>(pr.jsonDataString);
                var isGagal = 0;
                foreach (var item in dataUpload)
                {
                    var getStringMapShippingType = GetStringMappingByValue("tr_delivery", "SHIPPING_TYPE_CODE", item.shippingTypeCodeValue);
                    if (getStringMapShippingType == "NG")
                    {
                        returnData.Add(new UploadEkspedisiEofficeOutput
                        {
                            letterNumber = item.letterNumber,
                            sender = item.sender,
                            senderDivision = item.senderDivision,
                            expedition = item.expedition,
                            referenceNumber = item.referenceNumber,
                            receiptNumber = item.receiptNumber,
                            receiver = item.receiver,
                            destination_receiver_name = item.destination_receiver_name,
                            receiverAddress = item.receiverAddress,
                            shippingTypeCodeValue = item.shippingTypeCodeValue,
                            deliveryTypeCodeValue = item.deliveryTypeCodeValue,
                            statusCodeValue = item.StatusCodeValue,
                            statusUpload = "Gagal Jenis Pengiriman " + item.shippingTypeCodeValue + " tidak ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    var getStringMapDeliveryType = GetStringMappingByValue("tr_delivery", "DELIVERY_TYPE_CODE", item.deliveryTypeCodeValue);
                    if (getStringMapDeliveryType == "NG" && getStringMapShippingType == "2")
                    {
                        returnData.Add(new UploadEkspedisiEofficeOutput
                        {
                            letterNumber = item.letterNumber,
                            sender = item.sender,
                            senderDivision = item.senderDivision,
                            expedition = item.expedition,
                            referenceNumber = item.referenceNumber,
                            receiptNumber = item.receiptNumber,
                            receiver = item.receiver,
                            destination_receiver_name = item.destination_receiver_name,
                            receiverAddress = item.receiverAddress,
                            shippingTypeCodeValue = item.shippingTypeCodeValue,
                            deliveryTypeCodeValue = item.deliveryTypeCodeValue,
                            statusCodeValue = item.StatusCodeValue,
                            statusUpload = "Gagal Tipe Pengiriman " + item.deliveryTypeCodeValue + " tidak ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    var getStringMapStatusCode = GetStringMappingByValue("tr_delivery", "STATUS_CODE", item.StatusCodeValue);
                    if (getStringMapStatusCode == "NG")
                    {
                        returnData.Add(new UploadEkspedisiEofficeOutput
                        {
                            letterNumber = item.letterNumber,
                            sender = item.sender,
                            senderDivision = item.senderDivision,
                            expedition = item.expedition,
                            referenceNumber = item.referenceNumber,
                            receiptNumber = item.receiptNumber,
                            receiver = item.receiver,
                            destination_receiver_name = item.destination_receiver_name,
                            receiverAddress = item.receiverAddress,
                            shippingTypeCodeValue = item.shippingTypeCodeValue,
                            deliveryTypeCodeValue = item.deliveryTypeCodeValue,
                            statusCodeValue = item.StatusCodeValue,
                            statusUpload = "Gagal Status Pengiriman " + item.StatusCodeValue + " tidak ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    var getDetailLetter = (from l in db.tm_letter.Where(p => p.LETTER_NUMBER == item.letterNumber)
                                           join ld in db.tr_letter_delivery
                                            on l.ID_LETTER equals ld.ID_LETTER
                                           select ld).FirstOrDefault();
                    if (getDetailLetter == null)
                    {
                        returnData.Add(new UploadEkspedisiEofficeOutput
                        {
                            letterNumber = item.letterNumber,
                            sender = item.sender,
                            senderDivision = item.senderDivision,
                            expedition = item.expedition,
                            referenceNumber = item.referenceNumber,
                            receiptNumber = item.receiptNumber,
                            receiver = item.receiver,
                            receiverAddress = item.receiverAddress,
                            shippingTypeCodeValue = item.shippingTypeCodeValue,
                            deliveryTypeCodeValue = item.deliveryTypeCodeValue,
                            statusCodeValue = item.StatusCodeValue,
                            statusUpload = "Gagal Nomor Surat " + item.letterNumber + " tidak ditemukan"
                        });
                        isGagal++;
                        continue;
                    }
                    var getdetailDelivery = db.tr_delivery.Where(p => p.ID_DELIVERY == getDetailLetter.ID_DELIVERY).FirstOrDefault();
                    getdetailDelivery.SHIPPING_TYPE_CODE = Convert.ToInt32(getStringMapShippingType);
                    getdetailDelivery.DELIVERY_TYPE_CODE = item.deliveryTypeCodeValue == "" ? null : Convert.ToInt32(getStringMapDeliveryType);
                    getdetailDelivery.STATUS_CODE = Convert.ToInt32(getStringMapStatusCode);
                    getdetailDelivery.EXPEDITION = item.expedition;
                    getdetailDelivery.REFERENCE_NUMBER = item.referenceNumber;
                    getdetailDelivery.RECEIPT_NUMBER = item.receiptNumber;
                    getdetailDelivery.RECEIVER_NAME = item.receiver;
                    getdetailDelivery.DESTINATION_RECEIVER_NAME = item.destination_receiver_name;
                    getdetailDelivery.RECEIVE_DATE = item.receiveDate == null ? null : item.receiveDate;
                    getdetailDelivery.ADDRESS = item.receiverAddress;
                    getdetailDelivery.MODIFIED_BY = sessionUser.idUser;
                    getdetailDelivery.MODIFIED_ON = DateTime.Now;

                    db.SaveChanges();

                    returnData.Add(new UploadEkspedisiEofficeOutput
                    {
                        letterNumber = item.letterNumber,
                        sender = item.sender,
                        senderDivision = item.senderDivision,
                        expedition = item.expedition,
                        referenceNumber = item.referenceNumber,
                        receiptNumber = item.receiptNumber,
                        receiver = item.receiver,
                        destination_receiver_name = item.destination_receiver_name,
                        receiverAddress = item.receiverAddress,
                        shippingTypeCodeValue = item.shippingTypeCodeValue,
                        deliveryTypeCodeValue = item.deliveryTypeCodeValue,
                        statusCodeValue = item.StatusCodeValue,
                        statusUpload = "Sukses"
                    });

                }
                output.Status = "OK";
                output.Result = returnData;
                if (isGagal != 0)
                {
                    output.Message = "Terdapat Total " + isGagal + " Pengiriman Gagal diupload";
                }
                else
                {
                    output.Message = "Berhasil Update Pengiriman";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();
                return output;
            }
        }

        #region memo

        public GeneralOutputModel InsertDataAttachmentMemo(ParamInsertAttachmentMemo pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachmentMemo outputAttachment = new OutputInsertAttachmentMemo();
                Guid idLetter = pr.idLetter;
                if (pr.idLetter == Guid.Empty)
                {
                    //insert new dummy letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = "PROCESS_UPLOAD_SURAT";
                    letter.LETTER_DATE = DateTime.Now;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                //insert attachment
                Tr_Attachment_Table attachment = new Tr_Attachment_Table();
                attachment.ID_LETTER = idLetter;
                attachment.FILENAME = pr.filename;
                attachment.STATUS_CODE = 1;
                attachment.IS_DOC_LETTER = pr.isDocLetter;
                attachment.CREATED_ON = DateTime.Now;
                attachment.CREATED_BY = sessionUser.idUser;
                attachment.MODIFIED_ON = DateTime.Now;
                attachment.MODIFIED_BY = sessionUser.idUser;

                db.tr_attachment.Add(attachment);
                db.SaveChanges();

                outputAttachment.idLetter = idLetter;

                output.Status = "OK";
                output.Result = outputAttachment;
                output.Message = "SUCCESS INSERT ATTACHMENT";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel InsertMemo(ParamInsertMemo pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachmentMemo outputAttachment = new OutputInsertAttachmentMemo();

                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                DateTime today = DateTime.Now;
                string formattedDate = today.ToString("yyyy-MM-dd");

                //var checkmanager = (from u in db.tm_user
                //                    join p in db.tm_position.Where(p => p.ID_UNIT == sessionUser.idUnit)
                //                        on u.ID_POSITION equals p.ID_POSITION
                //                    join l in db.tr_level_employee.Where(p => p.ID_LEVEL == 6)
                //                        on u.ID_USER equals l.ID_USER
                //                    select u).FirstOrDefault();
                //if (pr.outboxType != 2) 
                //{
                //    if (checkmanager != null)
                //    {
                //        var checker = JsonConvert.DeserializeObject<List<ParamInsertChecker>>(pr.idUserChecker).ToList();
                //        var checkanotherunit = checker.Where(p => p.idUnitChecker != sessionUser.idUnit).FirstOrDefault();
                //        var checkermanager = checker.Where(p => p.idUserChecker == checkmanager.ID_USER).FirstOrDefault();
                //        if (checkanotherunit != null && checkermanager == null)
                //        {
                //            output.Status = "NG";
                //            output.Message = "Pemeriksa harus ada user level manager untuk lintas divisi";

                //            return output;
                //        }
                //    }
                //    else
                //    {
                //        output.Status = "NG";
                //        output.Message = "Manager pada divisi " + sessionUser.unitCode + " belum di setting!Silahkan hubungi admin";

                //        return output;
                //    }
                //}

                //string letterType = GetStringMapping("tm_letter", "LETTER_TYPE_CODE", 1);
                if (pr.idresponsesurat == Guid.Empty)
                {
                    //insert new letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = noLetter;
                    letter.ABOUT = pr.about;
                    letter.OUTBOX_TYPE_CODE = pr.outboxType;
                    letter.MEMO_TYPE_ID = pr.idMemoType;
                    letter.RESULT_TYPE_CODE = pr.resultType;
                    letter.SIGNATURE_TYPE_CODE = pr.signatureType;
                    letter.ATTACHMENT_DESC = pr.attachmentCount;
                    letter.PRIORITY = pr.priority;
                    letter.LETTER_TYPE_CODE = pr.letterTypeCode;
                    letter.STATUS_CODE = pr.saveType;
                    //letter.SENDER_NAME = pr.senderName;
                    //letter.SENDER_ADDRESS = pr.senderAddress;
                    letter.LETTER_DATE = DateTime.Now;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                else
                {
                    if (pr.saveType == 1 || pr.saveType == 2)
                    {
                        var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idresponsesurat).FirstOrDefault();

                        dtLetter.LETTER_NUMBER = noLetter;
                        dtLetter.ABOUT = pr.about;
                        dtLetter.OUTBOX_TYPE_CODE = pr.outboxType;
                        dtLetter.MEMO_TYPE_ID = pr.idMemoType;
                        dtLetter.RESULT_TYPE_CODE = pr.resultType;
                        dtLetter.SIGNATURE_TYPE_CODE = pr.signatureType;
                        dtLetter.ATTACHMENT_DESC = pr.attachmentCount;
                        dtLetter.PRIORITY = pr.priority;
                        dtLetter.LETTER_TYPE_CODE = pr.letterTypeCode;
                        dtLetter.STATUS_CODE = pr.saveType;
                        //dtLetter.SENDER_NAME = pr.senderName;
                        //dtLetter.SENDER_ADDRESS = pr.senderAddress;
                        dtLetter.LETTER_DATE = DateTime.Now;
                        dtLetter.MODIFIED_ON = DateTime.Now;
                        dtLetter.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }

                }
                if (pr.saveType == 1 || pr.saveType == 2)//disimpan atau baru dikirim
                {
                    //INSERT ISI
                    var dtContent = db.tr_content.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtContent != null)
                    {
                        db.tr_content.Remove(dtContent);
                        db.SaveChanges();
                    }

                    Tr_Content_Table content = new Tr_Content_Table();
                    content.ID_LETTER = idLetter;
                    content.LETTER_CONTENT = pr.isiSurat;
                    content.CREATED_ON = DateTime.Now;
                    content.CREATED_BY = sessionUser.idUser;
                    content.MODIFIED_ON = DateTime.Now;
                    content.MODIFIED_BY = sessionUser.idUser;
                    content.SUMMARY = pr.summary;
                    db.tr_content.Add(content);
                    db.SaveChanges();

                    //insert pengirim
                    var dtSender = db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtSender != null)
                    {
                        db.tr_letter_sender.Remove(dtSender);
                        db.SaveChanges();
                    }

                    Tr_Letter_Sender_Table sender = new Tr_Letter_Sender_Table();
                    sender.ID_LETTER = idLetter;
                    sender.ID_USER_SENDER = pr.bossUserId;
                    sender.ID_POSITION_SENDER = pr.bossPositionId;
                    sender.ID_UNIT_SENDER = pr.bossUnitId;
                    sender.ID_LEVEL_SENDER = pr.bossLevelId;
                    sender.IS_MAIN = 1;
                    sender.CREATED_ON = DateTime.Now;
                    sender.CREATED_BY = sessionUser.idUser;
                    sender.MODIFIED_ON = DateTime.Now;
                    sender.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_sender.Add(sender);
                    db.SaveChanges();

                    //INSERT To (PENERIMA) 

                    var dtReceiver = db.tr_receiver.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtReceiver != null)
                    {
                        db.tr_receiver.RemoveRange(dtReceiver);
                        db.SaveChanges();
                    }
                    var ReceiverList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPenerima>>(pr.idUserCheckerPenerima).ToList();
                    foreach (var item in ReceiverList)
                    {
                        //ambil id jabatan di tabel user

                        var dtUserPenerima = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima).FirstOrDefault();

                        Tr_Receiver_Table recipient = new Tr_Receiver_Table();
                        recipient.ID_LETTER = idLetter;
                        recipient.ID_USER_RECEIVER = item.idUserCheckerPenerima;
                        recipient.ID_POSITION_RECEIVER = dtUserPenerima.ID_POSITION;
                        recipient.CREATED_ON = DateTime.Now;
                        recipient.CREATED_BY = sessionUser.idUser;
                        recipient.MODIFIED_ON = DateTime.Now;
                        recipient.MODIFIED_BY = sessionUser.idUser;
                        db.tr_receiver.Add(recipient);
                        db.SaveChanges();
                    }


                    // insert delibration
                    var dtDelibration = db.tr_deliberation.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtDelibration != null)
                    {
                        db.tr_deliberation.RemoveRange(dtDelibration);
                        db.SaveChanges();
                    }
                    var DelibrationList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoDelibretion>>(pr.idUserCheckerDelibretion).ToList();
                    foreach (var item in DelibrationList)
                    {
                       
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerDelibretion && p.STATUS_APPROVER == 1).FirstOrDefault();

                      
                        //ambil id jabatan di tabel user
                        var dtUserDelibration = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerDelibretion).FirstOrDefault();

                        Tr_Deliberation_Table delibration = new Tr_Deliberation_Table();
                        delibration.ID_LETTER = idLetter;
                        delibration.ID_USER = item.idUserCheckerDelibretion;
                        delibration.ID_POSITION = dtUserDelibration.ID_POSITION;
                        delibration.STATUS_CODE = 1;

                        if(dataDel !=null)
                        { 

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                delibration.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }

                        db.tr_deliberation.Add(delibration);
                        db.SaveChanges();
                    }
                    //INSERT Cc (Carbon Copy) 

                    var dtcc = db.tr_copy.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtcc != null)
                    {
                        db.tr_copy.RemoveRange(dtcc);
                        db.SaveChanges();
                    }
                    var CcList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoCarbonCopy>>(pr.idUserCheckerCarbonCopy).ToList();
                    foreach (var item in CcList)
                    {
                        //ambil id jabatan di tabel user
                        var dtUserCc = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerCarbonCopy).FirstOrDefault();

                        Tr_Copy_Table copy = new Tr_Copy_Table();
                        copy.ID_LETTER = idLetter;
                        copy.ID_USER_COPY = item.idUserCheckerCarbonCopy;
                        copy.ID_POSITION_COPY = dtUserCc.ID_POSITION;
                        copy.CREATED_ON = DateTime.Now;
                        copy.CREATED_BY = sessionUser.idUser;
                        copy.MODIFIED_ON = DateTime.Now;
                        copy.MODIFIED_BY = sessionUser.idUser;
                        db.tr_copy.Add(copy);
                        db.SaveChanges();
                    }


                    //var ApproverList = JsonConvert.DeserializeObject<List<ParamInsertApproverMemo>>(pr.idUserApprover).ToList();
                    var checkerList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemo>>(pr.idUserChecker).ToList();
                    var ApprovalPenerimaList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPenerima>>(pr.idUserCheckerPenerima).ToList();
                    var ApprovalChekerLainList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoLainya>>(pr.idUserCheckerlain).ToList();


                    var checkerundermanager = checkerList.Where(p => p.idLevelChecker > 6).OrderByDescending(p => p.idLevelChecker).ToList();
                    var checkerName = "";
                    List<GetOuputIdSekdir> sekdirs = new List<GetOuputIdSekdir>();
                    var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtChecker != null)
                    {
                        db.tr_checker.RemoveRange(dtChecker);
                        db.SaveChanges();
                    }

                    int checkOrder = 1;
                    var ApprovalPenerima = ApprovalPenerimaList.ToList();
                    var ApprovalChekerLain = ApprovalChekerLainList.ToList();

                    foreach (var item in checkerundermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //tdr.APPROVAL_STATUS = 'Y';
                        tdr.IS_APPROVER = 3;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }

                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    

                    

                    var checkermanagerMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.idUnit && p.idLevelChecker == 6).ToList();
                    foreach (var item in checkermanagerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();

                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 3;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkeruppermanager = checkerList.Where(p => (p.idLevelChecker == 6 && p.idUnitChecker != sessionUser.idUnit) || (p.idLevelChecker < 6 && p.idLevelChecker != 2 && p.idLevelChecker != 1)).OrderByDescending(p => p.idLevelChecker).ToList();
                    int lastLevelId = 0;
                    foreach (var item in checkeruppermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 3;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }
                    if (lastLevelId != 0)
                    {
                        ++checkOrder;
                    }
                    var checkerdirectorMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.directorIdUnit && p.idLevelChecker == 2).ToList();
                    foreach (var item in checkerdirectorMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 3;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkerdirectorelse = checkerList.Where(p => (p.idLevelChecker == 2 && p.idUnitChecker != sessionUser.directorIdUnit)).OrderByDescending(p => p.idLevelChecker).ToList();
                    lastLevelId = 0;
                    foreach (var item in checkerdirectorelse)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 3;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }
                    var checkercommisionerMaker = checkerList.Where(p => p.idLevelChecker == 1).ToList();
                    foreach (var item in checkercommisionerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 3;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }



                    //

                    foreach (var item in ApprovalChekerLain)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerlain && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtPosition = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerlain).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserCheckerlain;
                        tdr.ID_POSITION_CHECKER = dtPosition.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitCheckerlain;
                        tdr.ID_LEVEL_CHECKER = item.idLevelCheckerlain;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 4;
                        tdr.APPROVAL_STATUS = 'X';
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //tdr.IS_APPROVER = 1;
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }


                    #region Penerima Approval

                    foreach (var item in ApprovalPenerima)
                    {
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerPenerima && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtPosition = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima).FirstOrDefault();

                        var level = (from c in db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima)
                                     join j in db.tm_position
                                             on c.ID_POSITION equals j.ID_POSITION
                                     join u in db.tm_unit
                                         on j.ID_UNIT equals u.ID_UNIT
                                     join l in db.tr_level_employee on u.ID_UNIT equals l.ID_UNIT
                                     select new OutputListCheckerMemo
                                     {
                                         idLevelChecker = l.ID_LEVEL
                                     }).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserCheckerPenerima;
                        tdr.ID_POSITION_CHECKER = dtPosition.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitCheckerPenerima;
                        tdr.ID_LEVEL_CHECKER = level.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 5;
                        tdr.APPROVAL_STATUS = 'X';
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //tdr.IS_APPROVER = 1;
                        if (dataDel !=null)
                        {
                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    #endregion

                }
                var description = "Memo disimpan";
                if (pr.saveType == 2)
                {
                    description = "Memo dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Memo disetujui";
                }
                if (pr.saveType == 5)
                {
                    description = "Memo ditolak";
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 1 && pr.saveType == 4)
                {
                    description = "Memo dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan surat";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim surat";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui surat";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak surat";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetDistribusiMemo(ParamGetMemoWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<DocumentOutput> data = new List<DocumentOutput>();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;

                var getLetter = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 0 && p.STATUS_CODE != 1 && p.LETTER_TYPE_CODE == 3).OrderByDescending(p => p.LETTER_DATE)
                                 join maker in db.tm_user
                                    on l.CREATED_BY equals maker.ID_USER
                                 join position in db.tm_position
                                    on maker.ID_POSITION equals position.ID_POSITION
                                 join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                 join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                         on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                 select new MemoOutput
                                 {
                                     idLetter = l.ID_LETTER,
                                     idDocument = l.ID_DOCUMENT,
                                     letterNumber = l.LETTER_NUMBER,
                                     letterDate = l.LETTER_DATE,
                                     about = l.ABOUT,
                                     attachmentDesc = l.ATTACHMENT_DESC,
                                     priority = l.PRIORITY,
                                     letterTypeValue = ltc.VALUE,
                                     letterTypeCode = l.LETTER_TYPE_CODE,
                                     senderName = l.SENDER_NAME,
                                     senderAddress = l.SENDER_ADDRESS,
                                     letterDateIn = l.LETTER_DATE_IN,
                                     letterNumberIn = l.LETTER_NUMBER_IN,
                                     createdBy = l.CREATED_BY,
                                     createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     fullname = maker.FULLNAME,
                                     positionName = position.POSITION_NAME,
                                     createdOn = l.CREATED_ON,
                                     modifiedOn = l.MODIFIED_ON,
                                     statusCode = l.STATUS_CODE,
                                     statusCodeValue = stc.VALUE,
                                 }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 0 && p.STATUS_CODE != 1 && p.LETTER_TYPE_CODE == 4).OrderByDescending(p => p.LETTER_DATE)
                                          join maker in db.tm_user
                                             on l.CREATED_BY equals maker.ID_USER
                                          join position in db.tm_position
                                             on maker.ID_POSITION equals position.ID_POSITION
                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                          join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                          //join mmyt in db.tr_memo_type
                                          //       on ltc.ID_STRINGMAP equals mmyt.ID_STRINGMAP
                                          select new MemoOutput
                                          {
                                              idLetter = l.ID_LETTER,
                                              idDocument = l.ID_DOCUMENT,
                                              letterNumber = l.LETTER_NUMBER,
                                              letterDate = l.LETTER_DATE,
                                              about = l.ABOUT,
                                              attachmentDesc = l.ATTACHMENT_DESC,
                                              priority = l.PRIORITY,
                                              letterTypeValue = ltc.VALUE,
                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                              senderName = l.SENDER_NAME,
                                              senderAddress = l.SENDER_ADDRESS,
                                              letterDateIn = l.LETTER_DATE_IN,
                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                              createdBy = l.CREATED_BY,
                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                              fullname = maker.FULLNAME,
                                              positionName = position.POSITION_NAME,
                                              createdOn = l.CREATED_ON,
                                              modifiedOn = l.MODIFIED_ON,
                                              statusCode = l.STATUS_CODE,
                                              statusCodeValue = stc.VALUE,
                                              //idmemoType = mmyt.ID_MEMO_TYPE
                                          }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 0 && p.STATUS_CODE != 1 && p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.LETTER_DATE)
                                                   join maker in db.tm_user
                                                      on l.CREATED_BY equals maker.ID_USER
                                                   join position in db.tm_position
                                                      on maker.ID_POSITION equals position.ID_POSITION
                                                   join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                          on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                   join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                        on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                   //join mmyt in db.tr_memo_type
                                                   //     on ltc.ID_STRINGMAP equals mmyt.ID_STRINGMAP
                                                   select new MemoOutput
                                                   {
                                                       idLetter = l.ID_LETTER,
                                                       idDocument = l.ID_DOCUMENT,
                                                       letterNumber = l.LETTER_NUMBER,
                                                       letterDate = l.LETTER_DATE,
                                                       about = l.ABOUT,
                                                       attachmentDesc = l.ATTACHMENT_DESC,
                                                       priority = l.PRIORITY,
                                                       letterTypeValue = ltc.VALUE,
                                                       letterTypeCode = l.LETTER_TYPE_CODE,
                                                       senderName = l.SENDER_NAME,
                                                       senderAddress = l.SENDER_ADDRESS,
                                                       letterDateIn = l.LETTER_DATE_IN,
                                                       letterNumberIn = l.LETTER_NUMBER_IN,
                                                       createdBy = l.CREATED_BY,
                                                       createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                       fullname = maker.FULLNAME,
                                                       positionName = position.POSITION_NAME,
                                                       createdOn = l.CREATED_ON,
                                                       modifiedOn = l.MODIFIED_ON,
                                                       statusCode = l.STATUS_CODE,
                                                       statusCodeValue = stc.VALUE,
                                                       //idmemoType = mmyt.ID_MEMO_TYPE
                                                   })
                                                   
                                                   .AsQueryable();

                if (pr.startDate != null && pr.endDate != null)
                {
                    DateTime startDate = Convert.ToDateTime(pr.startDate).Date;
                    DateTime endDate = Convert.ToDateTime(pr.endDate).Date;
                    getLetter = getLetter.Where(p => p.letterDate.Date >= startDate && p.letterDate.Date <= endDate);
                }
                if (pr.letterNumber != null)
                {
                    getLetter = getLetter.Where(p => p.letterNumber.Contains(pr.letterNumber) || p.letterNumberIn.Contains(pr.letterNumber));
                }
                //if (pr.letterOutboxType != null)
                //{
                //    getLetter = getLetter.Where(p => p.letterTypeCode == pr.letterOutboxType);
                //}
                //if (pr.idMemoType != null)
                //{
                   
                //    getLetter = getLetter.Where(p => p.idmemoType == pr.idMemoType);
                //}
                if (pr.about != null)
                {
                    getLetter = getLetter.Where(p => p.about.Contains(pr.about));
                }
                if (pr.letterType != 0 && pr.letterType != null)
                {
                    getLetter = getLetter.Where(p => p.letterTypeCode == pr.letterType);
                }
                //if (pr.readStatus != 1 && pr.readStatus != null)
                //{
                //    getLetter = getLetter.Where(p => p.readStatus == pr.readStatus);
                //}
                if (pr.onprogress =="2")
                {

                    getLetter = getLetter.Where(p => p.letterNumber =="NO_LETTER");

                }

                //recordsTotal = getLetter.Count();
                //var letterList = getLetter.OrderBy(p => p.statusCode).OrderByDescending(p => p.modifiedOn).Skip(skip).Take(pr.pageSize).OrderByDescending(p => p.createdOn).ToList();
                //var letterList = getLetter.OrderByDescending(p => p.modifiedOn).Skip(skip).Take(pr.pageSize).ToList();
                //int letterListCount = letterList.Count();
                //List<MemoOutput> letterListFinal = new List<MemoOutput>();

                recordsTotal = getLetter.Count();

                var letterList = getLetter.OrderBy(p => p.statusCode).OrderByDescending(p => p.modifiedOn).Skip(skip).Take(pr.pageSize).OrderByDescending(p => p.createdOn).ToList();
                int letterListCount = letterList.Count();
                List<MemoOutput> letterListFinal = new List<MemoOutput>();
                foreach (var item in letterList)
                {
                    //get count checker done/ongoing approve
                    var allChecker = db.tr_checker.Where(p => p.ID_LETTER == item.idLetter && p.APPROVAL_STATUS != 'D').AsQueryable();
                    var countCheckerDO = allChecker.Where(p => p.APPROVAL_STATUS == 'Y' || p.APPROVAL_STATUS == 'Z').Count();
                    var countChecker = allChecker.Count();
                    letterListFinal.Add(new MemoOutput
                    {
                        idLetter = item.idLetter,
                        idDocument = item.idDocument,
                        letterNumber = item.letterNumber,
                        letterDate = item.letterDate,
                        about = item.about,
                        attachmentDesc = item.attachmentDesc,
                        priority = item.priority,
                        letterTypeValue = item.letterTypeValue,
                        letterTypeCode = item.letterTypeCode,
                        senderName = item.senderName,
                        senderAddress = item.senderAddress,
                        letterDateIn = item.letterDateIn,
                        letterNumberIn = item.letterNumberIn,
                        createdBy = item.createdBy,
                        createdByPositionId = item.createdByPositionId,
                        fullname = item.fullname,
                        positionName = item.positionName,
                        createdOn = item.createdOn,
                        modifiedOn = item.modifiedOn,
                        statusCode = item.statusCode,
                        statusCodeValue = item.statusCodeValue,
                        approvalcounter = countCheckerDO + " / " + countChecker
                    });
                }

                var getLetterDraft = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1 && p.STATUS_CODE != 0 && (p.LETTER_TYPE_CODE == 3 || p.LETTER_TYPE_CODE == 4 || p.LETTER_TYPE_CODE == 5)).OrderByDescending(p => p.MODIFIED_ON)
                                      join maker in db.tm_user
                                         on l.CREATED_BY equals maker.ID_USER
                                      join position in db.tm_position
                                         on maker.ID_POSITION equals position.ID_POSITION
                                      join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                             on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                      select new MemoOutput
                                      {
                                          idLetter = l.ID_LETTER,
                                          idDocument = l.ID_DOCUMENT,
                                          letterNumber = l.LETTER_NUMBER,
                                          letterDate = l.LETTER_DATE,
                                          about = l.ABOUT,
                                          attachmentDesc = l.ATTACHMENT_DESC,
                                          priority = l.PRIORITY,
                                          letterTypeValue = ltc.VALUE,
                                          letterTypeCode = l.LETTER_TYPE_CODE,
                                          senderName = l.SENDER_NAME,
                                          senderAddress = l.SENDER_ADDRESS,
                                          letterDateIn = l.LETTER_DATE_IN,
                                          letterNumberIn = l.LETTER_NUMBER_IN,
                                          createdBy = l.CREATED_BY,
                                          createdByPositionId = l.CREATED_BY_POSITION_ID,
                                          fullname = maker.FULLNAME,
                                          positionName = position.POSITION_NAME,
                                          createdOn = l.CREATED_ON,
                                          modifiedOn = l.MODIFIED_ON
                                      }).Count();

                float pageLengthCoumt = (float)recordsTotal / (float)20;
                int pageLength = (int)Math.Ceiling(pageLengthCoumt);
                MemoOutputWeb result = new MemoOutputWeb();
                result.draw = pr.draw == "0" ? "1" : pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.pagelength = pageLength;
                result.outboxCount = recordsTotal;
                result.draftCount = getLetterDraft;
                result.pagelength = pageLength;
                result.limit = letterListCount < 20 ? skip + letterListCount : skip + 20;
                result.data = letterListFinal.OrderBy(p => p.statusCode).ToList();

                //float pageLengthCoumt = (float)recordsTotal / (float)20;
                //int pageLength = (int)Math.Ceiling(pageLengthCoumt);
                //LetterOutputWeb result = new LetterOutputWeb();
                //result.draw = pr.draw == "0" ? "1" : pr.draw;
                //result.recordsTotal = recordsTotal;
                //result.recordsFiltered = filterRecord;
                //result.pagelength = pageLength;
                //result.limit = letterListCount < 20 ? skip + letterListCount : skip + 20;
                //result.data = letterListFinal.OrderBy(p => p.statusCode).ToList();

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetMemoDraft(ParamGetMemoWeb pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<DocumentOutput> data = new List<DocumentOutput>();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;

                var getLetter = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser &&  p.STATUS_CODE == 1 && p.LETTER_TYPE_CODE == 3).OrderByDescending(p => p.LETTER_DATE)
                                 join maker in db.tm_user
                                    on l.CREATED_BY equals maker.ID_USER
                                 join position in db.tm_position
                                    on maker.ID_POSITION equals position.ID_POSITION
                                 join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                 join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                         on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                 select new MemoOutput
                                 {
                                     idLetter = l.ID_LETTER,
                                     idDocument = l.ID_DOCUMENT,
                                     letterNumber = l.LETTER_NUMBER,
                                     letterDate = l.LETTER_DATE,
                                     about = l.ABOUT,
                                     attachmentDesc = l.ATTACHMENT_DESC,
                                     priority = l.PRIORITY,
                                     letterTypeValue = ltc.VALUE,
                                     letterTypeCode = l.LETTER_TYPE_CODE,
                                     senderName = l.SENDER_NAME,
                                     senderAddress = l.SENDER_ADDRESS,
                                     letterDateIn = l.LETTER_DATE_IN,
                                     letterNumberIn = l.LETTER_NUMBER_IN,
                                     createdBy = l.CREATED_BY,
                                     createdByPositionId = l.CREATED_BY_POSITION_ID,
                                     fullname = maker.FULLNAME,
                                     positionName = position.POSITION_NAME,
                                     createdOn = l.CREATED_ON,
                                     modifiedOn = l.MODIFIED_ON,
                                     statusCode = l.STATUS_CODE,
                                     statusCodeValue = stc.VALUE,
                                 }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1 && p.LETTER_TYPE_CODE == 4).OrderByDescending(p => p.LETTER_DATE)
                                          join maker in db.tm_user
                                             on l.CREATED_BY equals maker.ID_USER
                                          join position in db.tm_position
                                             on maker.ID_POSITION equals position.ID_POSITION
                                          join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                 on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                          join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                  on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                          //join mmyt in db.tr_memo_type
                                          //       on ltc.ID_STRINGMAP equals mmyt.ID_STRINGMAP
                                          select new MemoOutput
                                          {
                                              idLetter = l.ID_LETTER,
                                              idDocument = l.ID_DOCUMENT,
                                              letterNumber = l.LETTER_NUMBER,
                                              letterDate = l.LETTER_DATE,
                                              about = l.ABOUT,
                                              attachmentDesc = l.ATTACHMENT_DESC,
                                              priority = l.PRIORITY,
                                              letterTypeValue = ltc.VALUE,
                                              letterTypeCode = l.LETTER_TYPE_CODE,
                                              senderName = l.SENDER_NAME,
                                              senderAddress = l.SENDER_ADDRESS,
                                              letterDateIn = l.LETTER_DATE_IN,
                                              letterNumberIn = l.LETTER_NUMBER_IN,
                                              createdBy = l.CREATED_BY,
                                              createdByPositionId = l.CREATED_BY_POSITION_ID,
                                              fullname = maker.FULLNAME,
                                              positionName = position.POSITION_NAME,
                                              createdOn = l.CREATED_ON,
                                              modifiedOn = l.MODIFIED_ON,
                                              statusCode = l.STATUS_CODE,
                                              statusCodeValue = stc.VALUE,
                                              //idmemoType = mmyt.ID_MEMO_TYPE
                                          }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE == 1 && p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.LETTER_DATE)
                                                   join maker in db.tm_user
                                                      on l.CREATED_BY equals maker.ID_USER
                                                   join position in db.tm_position
                                                      on maker.ID_POSITION equals position.ID_POSITION
                                                   join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                          on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                   join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                        on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                   //join mmyt in db.tr_memo_type
                                                   //     on ltc.ID_STRINGMAP equals mmyt.ID_STRINGMAP
                                                   select new MemoOutput
                                                   {
                                                       idLetter = l.ID_LETTER,
                                                       idDocument = l.ID_DOCUMENT,
                                                       letterNumber = l.LETTER_NUMBER,
                                                       letterDate = l.LETTER_DATE,
                                                       about = l.ABOUT,
                                                       attachmentDesc = l.ATTACHMENT_DESC,
                                                       priority = l.PRIORITY,
                                                       letterTypeValue = ltc.VALUE,
                                                       letterTypeCode = l.LETTER_TYPE_CODE,
                                                       senderName = l.SENDER_NAME,
                                                       senderAddress = l.SENDER_ADDRESS,
                                                       letterDateIn = l.LETTER_DATE_IN,
                                                       letterNumberIn = l.LETTER_NUMBER_IN,
                                                       createdBy = l.CREATED_BY,
                                                       createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                       fullname = maker.FULLNAME,
                                                       positionName = position.POSITION_NAME,
                                                       createdOn = l.CREATED_ON,
                                                       modifiedOn = l.MODIFIED_ON,
                                                       statusCode = l.STATUS_CODE,
                                                       statusCodeValue = stc.VALUE,
                                                       //idmemoType = mmyt.ID_MEMO_TYPE
                                                  }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    DateTime startDate = Convert.ToDateTime(pr.startDate).Date;
                    DateTime endDate = Convert.ToDateTime(pr.endDate).Date;
                    getLetter = getLetter.Where(p => p.letterDate.Date >= startDate && p.letterDate.Date <= endDate);
                }
                if (pr.about != null)
                {
                    getLetter = getLetter.Where(p => p.about.Contains(pr.about));
                }
                recordsTotal = getLetter.Count();

                var letterList = getLetter.OrderByDescending(p => p.modifiedOn).Skip(skip).Take(20).ToList();
                int letterListCount = letterList.Count();
                var getLetterOutbox = (from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 0 && p.STATUS_CODE != 1 && p.LETTER_TYPE_CODE == 3).OrderByDescending(p => p.LETTER_DATE)
                                       join maker in db.tm_user
                                          on l.CREATED_BY equals maker.ID_USER
                                       join position in db.tm_position
                                          on maker.ID_POSITION equals position.ID_POSITION
                                       join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                              on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                       join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                               on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                       select new MemoOutput
                                       {
                                           idLetter = l.ID_LETTER,
                                           idDocument = l.ID_DOCUMENT,
                                           letterNumber = l.LETTER_NUMBER,
                                           letterDate = l.LETTER_DATE,
                                           about = l.ABOUT,
                                           attachmentDesc = l.ATTACHMENT_DESC,
                                           priority = l.PRIORITY,
                                           letterTypeValue = ltc.VALUE,
                                           letterTypeCode = l.LETTER_TYPE_CODE,
                                           senderName = l.SENDER_NAME,
                                           senderAddress = l.SENDER_ADDRESS,
                                           letterDateIn = l.LETTER_DATE_IN,
                                           letterNumberIn = l.LETTER_NUMBER_IN,
                                           createdBy = l.CREATED_BY,
                                           createdByPositionId = l.CREATED_BY_POSITION_ID,
                                           fullname = maker.FULLNAME,
                                           positionName = position.POSITION_NAME,
                                           createdOn = l.CREATED_ON,
                                           modifiedOn = l.MODIFIED_ON,
                                           statusCode = l.STATUS_CODE,
                                           statusCodeValue = stc.VALUE,
                                       }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 0 && p.STATUS_CODE != 1 && p.LETTER_TYPE_CODE == 4).OrderByDescending(p => p.LETTER_DATE)
                                                join maker in db.tm_user
                                                   on l.CREATED_BY equals maker.ID_USER
                                                join position in db.tm_position
                                                   on maker.ID_POSITION equals position.ID_POSITION
                                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                       on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                        on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                //join mmyt in db.tr_memo_type
                                                //       on ltc.ID_STRINGMAP equals mmyt.ID_STRINGMAP
                                                select new MemoOutput
                                                {
                                                    idLetter = l.ID_LETTER,
                                                    idDocument = l.ID_DOCUMENT,
                                                    letterNumber = l.LETTER_NUMBER,
                                                    letterDate = l.LETTER_DATE,
                                                    about = l.ABOUT,
                                                    attachmentDesc = l.ATTACHMENT_DESC,
                                                    priority = l.PRIORITY,
                                                    letterTypeValue = ltc.VALUE,
                                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                                    senderName = l.SENDER_NAME,
                                                    senderAddress = l.SENDER_ADDRESS,
                                                    letterDateIn = l.LETTER_DATE_IN,
                                                    letterNumberIn = l.LETTER_NUMBER_IN,
                                                    createdBy = l.CREATED_BY,
                                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                    fullname = maker.FULLNAME,
                                                    positionName = position.POSITION_NAME,
                                                    createdOn = l.CREATED_ON,
                                                    modifiedOn = l.MODIFIED_ON,
                                                    statusCode = l.STATUS_CODE,
                                                    statusCodeValue = stc.VALUE,
                                                    //idmemoType = mmyt.ID_MEMO_TYPE
                                                }).Union(from l in db.tm_letter.Where(p => p.CREATED_BY == sessionUser.idUser && p.STATUS_CODE != 0 && p.STATUS_CODE != 1 && p.LETTER_TYPE_CODE == 5).OrderByDescending(p => p.LETTER_DATE)
                                                         join maker in db.tm_user
                                                            on l.CREATED_BY equals maker.ID_USER
                                                         join position in db.tm_position
                                                            on maker.ID_POSITION equals position.ID_POSITION
                                                         join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                                on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                                         join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "STATUS_CODE")
                                                              on l.STATUS_CODE equals stc.ATTRIBUTEVALUE
                                                         //join mmyt in db.tr_memo_type
                                                         //     on ltc.ID_STRINGMAP equals mmyt.ID_STRINGMAP
                                                         select new MemoOutput
                                                         {
                                                             idLetter = l.ID_LETTER,
                                                             idDocument = l.ID_DOCUMENT,
                                                             letterNumber = l.LETTER_NUMBER,
                                                             letterDate = l.LETTER_DATE,
                                                             about = l.ABOUT,
                                                             attachmentDesc = l.ATTACHMENT_DESC,
                                                             priority = l.PRIORITY,
                                                             letterTypeValue = ltc.VALUE,
                                                             letterTypeCode = l.LETTER_TYPE_CODE,
                                                             senderName = l.SENDER_NAME,
                                                             senderAddress = l.SENDER_ADDRESS,
                                                             letterDateIn = l.LETTER_DATE_IN,
                                                             letterNumberIn = l.LETTER_NUMBER_IN,
                                                             createdBy = l.CREATED_BY,
                                                             createdByPositionId = l.CREATED_BY_POSITION_ID,
                                                             fullname = maker.FULLNAME,
                                                             positionName = position.POSITION_NAME,
                                                             createdOn = l.CREATED_ON,
                                                             modifiedOn = l.MODIFIED_ON,
                                                             statusCode = l.STATUS_CODE,
                                                             statusCodeValue = stc.VALUE,
                                                             //idmemoType = mmyt.ID_MEMO_TYPE
                                                         }).Count();

                //MemoOutputWeb result = new MemoOutputWeb();
                //result.draw = pr.draw;
                //result.recordsTotal = recordsTotal;
                //result.recordsFiltered = filterRecord;
                //result.draftCount = recordsTotal;
                //result.outboxCount = getLetterOutbox;
                //result.data = letterList.OrderByDescending(p => p.modifiedOn).ToList();

                float pageLengthCoumt = (float)recordsTotal / (float)20;
                int pageLength = (int)Math.Ceiling(pageLengthCoumt);
                MemoOutputWeb result = new MemoOutputWeb();
                result.draw = pr.draw == "0" ? "1" : pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.pagelength = pageLength;
                result.limit = letterListCount < 20 ? skip + letterListCount : skip + 20;
                result.draftCount = recordsTotal;
                result.outboxCount = getLetterOutbox;
                result.data = letterList.OrderByDescending(p => p.modifiedOn).ToList();

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailsMemo(ParamGetDetailMemo pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailMemo letter = new OutputDetailMemo();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                join tmp in db.tr_memo_type.Where(p=> p.STATUS_CODE !=0) on l.MEMO_TYPE_ID equals tmp.ID_MEMO_TYPE
                               
                                select new MemoOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME,
                                    memotypename=tmp.MEMO_TYPE_NAME,
                                    idmemoType=tmp.ID_MEMO_TYPE,
                                    letterDeliberationNumber = l.LETTER_DELIBERATION_NUMBER
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;
                    if (pr.lettertype !="33")
                    {
                        InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");
                    }

                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                        select new OutputListReceiverMemo
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            idUnit = d.ID_UNIT
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                    select new OutputListCopyMemo
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME,
                                        idUnit = d.ID_UNIT
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetterMemo
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   idUserLog = l.CREATED_BY,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachmentMemo
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionMemo
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();
                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                      join j in db.tm_position
                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                      join u in db.tm_user
                                          on c.ID_USER_SENDER equals u.ID_USER
                                      select new OutputListLetterSenderMemo
                                      {
                                          idLetterSender = c.ID_LETTER_SENDER,
                                          idPositionSender = c.ID_POSITION_SENDER,
                                          idUserSender = c.ID_USER_SENDER,
                                          idUnitSender = c.ID_UNIT_SENDER,
                                          idLevelSender = c.ID_LEVEL_SENDER,
                                          isMain = c.IS_MAIN,
                                          positionName = j.POSITION_NAME,
                                          fullname = u.FULLNAME,
                                          nip = u.NIP
                                      }).ToList();
                   var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 3 )
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                         on c.ID_USER_CHECKER equals u.ID_USER
                                       //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                       select new OutputListCheckerMemo
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS,
                                           ordernumber = c.ORDER_NUMBER,
                                           //idSekertaris = s.ID_SEKETARIS

                                       }).ToList();
                    var checkerPenerimaList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 5)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                         on c.ID_USER_CHECKER equals u.ID_USER
                                       //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                       select new OutputListCheckerMemoPenerima
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS,
                                           ordernumber = c.ORDER_NUMBER,
                                           //idSekertaris = s.ID_SEKETARIS

                                       }).ToList();
                    var checkerLainList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 4)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                         on c.ID_USER_CHECKER equals u.ID_USER
                                       //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                       select new OutputListCheckerMemoLainya
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS,
                                           ordernumber = c.ORDER_NUMBER,
                                           //idSekertaris = s.ID_SEKETARIS

                                       }).ToList();
                    var checkerSekertarisList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter)
                                                 join j in db.tm_position
                                                         on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                                 join u in db.tm_user
                                                   on c.ID_USER_CHECKER equals u.ID_USER
                                                 join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                                 select new OutputListCheckerMemoSek
                                                 {
                                                     idChecker = c.ID_CHECKER,
                                                     idPositionChecker = c.ID_POSITION_CHECKER,
                                                     idUserChecker = c.ID_USER_CHECKER,
                                                     idUnitChecker = c.ID_UNIT_CHECKER,
                                                     idLevelChecker = c.ID_LEVEL_CHECKER,
                                                     positionName = j.POSITION_NAME,
                                                     fullname = u.FULLNAME,
                                                     nip = u.NIP,
                                                     approvalStatus = c.APPROVAL_STATUS,
                                                     ordernumber = c.ORDER_NUMBER,
                                                     idSekertaris = s.ID_SEKETARIS

                                                 }).ToList();
                    //var outgoingRecipientList = (from a in db.tr_outgoing_recipient.Where(p => p.ID_LETTER == pr.idLetter)
                    //                             select new OutputListOutgoingRecipient
                    //                             {
                    //                                 idOutgoingRecipient = a.ID_OUTGOING_RECIPIENT,
                    //                                 recipientAddress = a.RECIPIENT_ADDRESS,
                    //                                 recipientName = a.RECIPIENT_NAME,
                    //                                 recipientCompany = a.RECEPIENT_COMPANY
                    //                             }).ToList();
                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                         select new OutputDetailLetterContentMemo
                                         {
                                             idContent = a.ID_CONTENT,
                                             letterContent = a.LETTER_CONTENT,
                                             summary = a.SUMMARY

                                         }).FirstOrDefault();
                    var delibarationList = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputListDeliberationMemoModel
                                            {
                                            idLetter= c.ID_LETTER,
                                            idDeliberation = c.ID_DELIBERATION,
                                            idUser = c.ID_USER,
                                            idPosition = c.ID_POSITION,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            commentdlbrt = c.COMMENT,
                                            idUnit = d.ID_UNIT,
                                            statuscode=c.STATUS_CODE
                                            
                                            }).ToList();

                   


                    var checkerListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 3)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                         on c.ID_USER_DELEGASI equals u.ID_USER
                                       //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                       select new OutputListCheckerMemoDelg
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_DELEGASI,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS,
                                           ordernumber = c.ORDER_NUMBER,
                                           //idSekertaris = s.ID_SEKETARIS

                                       }).ToList(); 
                    
                    var checkerLainListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 4)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                             on c.ID_USER_DELEGASI equals u.ID_USER
                                           //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                           select new OutputListCheckerMemoLainyaDelg
                                           {
                                               idChecker = c.ID_CHECKER,
                                               idPositionChecker = c.ID_POSITION_CHECKER,
                                               idUserChecker = c.ID_USER_DELEGASI,
                                               idUnitChecker = c.ID_UNIT_CHECKER,
                                               idLevelChecker = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               nip = u.NIP,
                                               approvalStatus = c.APPROVAL_STATUS,
                                               ordernumber = c.ORDER_NUMBER,
                                               //idSekertaris = s.ID_SEKETARIS

                                           }).ToList();
                    var checkerPenerimaListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 5)
                                                   join j in db.tm_position
                                                           on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                                   join u in db.tm_user
                                                     on c.ID_USER_DELEGASI equals u.ID_USER
                                                   //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                                   select new OutputListCheckerMemoPenerimaDelg
                                                   {
                                                       idChecker = c.ID_CHECKER,
                                                       idPositionChecker = c.ID_POSITION_CHECKER,
                                                       idUserChecker = c.ID_USER_DELEGASI,
                                                       idUnitChecker = c.ID_UNIT_CHECKER,
                                                       idLevelChecker = c.ID_LEVEL_CHECKER,
                                                       positionName = j.POSITION_NAME,
                                                       fullname = u.FULLNAME,
                                                       nip = u.NIP,
                                                       approvalStatus = c.APPROVAL_STATUS,
                                                       ordernumber = c.ORDER_NUMBER,
                                                       //idSekertaris = s.ID_SEKETARIS

                                                   }).ToList();

                    var delibarationListDelg = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                                join j in db.tm_position
                                               on c.ID_POSITION equals j.ID_POSITION
                                                join u in db.tm_user
                                                    on c.ID_USER_DELEGASI equals u.ID_USER
                                                join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                select new OutputListDeliberationDelegasiMemoModel
                                                {
                                                    idLetter= c.ID_LETTER,
                                                    idDeliberation = c.ID_DELIBERATION,
                                                    idUser = c.ID_USER_DELEGASI,
                                                    idPosition = c.ID_POSITION,
                                                    positionName = j.POSITION_NAME,
                                                    fullname = u.FULLNAME,
                                                    commentdlbrt = c.COMMENT,
                                                    idUnit = d.ID_UNIT,
                                                    statuscode=c.STATUS_CODE

                                                }).ToList();
                    //var delibarationRows = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 2)
                    //                        join j in db.tm_position
                    //                       on c.ID_POSITION equals j.ID_POSITION
                    //                        join u in db.tm_user
                    //                            on c.ID_USER equals u.ID_USER
                    //                        join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                    //                        select new OutputDeliberationMemoModel
                    //                        {
                    //                            idLetter = c.ID_LETTER,
                    //                            idDeliberation = c.ID_DELIBERATION,
                    //                            idUser = c.ID_USER,
                    //                            idPosition = c.ID_POSITION,
                    //                            positionName = j.POSITION_NAME,
                    //                            fullname = u.FULLNAME,
                    //                            commentdlbrt = c.COMMENT,
                    //                            idUnit = d.ID_UNIT,
                    //                            statuscode = c.STATUS_CODE
                    //                        }).FirstOrDefault();

                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.delibration= delibarationList;
                    letter.delibrationdelegasi = delibarationListDelg;
                    //letter.delibrationRow = delibarationRows;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;
                    letter.sender = senderList;
                    letter.checker = checkerList;
                    letter.checkerlain = checkerLainList;

                    letter.checkerDelg = checkerListDelg;
                    letter.checkerlainDelg = checkerLainListDelg;
                    letter.checkerPenerimaDelg = checkerPenerimaListDelg;

                    letter.checkerSekertaris = checkerSekertarisList;
                    letter.checkerPenerima = checkerPenerimaList;

                    //letter.outgoingRecipient = outgoingRecipientList;
                    letter.letterContent = letterContent;

                    //update status baca
                    if(pr.lettertype !="33")
                    {
                        var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                        if (tblStatus != null)
                        {
                            tblStatus.READ_STATUS = 0;
                            tblStatus.MODIFIED_ON = DateTime.Now;
                            tblStatus.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }
                   
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Memo";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail Memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel ApprovalLetterMemo(ParamApprovalLetterMemo pr, SessionUser sessionUser)
        {
            try
            {
                //int no = 0;
                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                //update pemeriksa
                var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ID_USER_CHECKER == sessionUser.idUser && p.ID_POSITION_CHECKER == sessionUser.idPosition && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                if (dtChecker == null && sessionUser.idGroup == "S")
                {
                    var dtlSekre = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                    join s in db.tr_setingseketaris
                                        on u.ID_USER equals s.ID_SEKETARIS
                                    select new SessionUser
                                    {
                                        idUser = s.ID_DIRKOM,
                                        idPosition = s.ID_POSITION_DIRKOM
                                    }).ToList();
                    List<Guid> ListDir = new List<Guid>();
                    List<Guid> ListDir2 = new List<Guid>();
                    foreach (var item in dtlSekre)
                    {
                        ListDir.Add(item.idUser);
                        ListDir2.Add(item.idPosition);
                    }
                    dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && ListDir.Contains(p.ID_USER_CHECKER) && ListDir2.Contains(p.ID_POSITION_CHECKER) && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                }
                if(dtChecker == null && sessionUser.idGroup != "S")
                {
                    var dtDelg = (from u in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser)
                                  select new
                                  {
                                      u.ID_USER_CHECKER,
                                      u.ID_POSITION_CHECKER
                                  }).FirstOrDefault();
                    dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ID_USER_CHECKER == dtDelg.ID_USER_CHECKER && p.ID_POSITION_CHECKER == dtDelg.ID_POSITION_CHECKER && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                }
                

                dtChecker.APPROVAL_STATUS = 'Z';
                dtChecker.MODIFIED_ON = DateTime.Now;
                dtChecker.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();

                if (pr.saveType == 4)//diapprove
                {
                    int nextNumberPemeriksa = dtChecker.ORDER_NUMBER + 1;
                    var dtCheckerElse = db.tr_checker.Where(p => p.APPROVAL_STATUS == 'Y' && p.ORDER_NUMBER == dtChecker.ORDER_NUMBER && p.ID_LETTER == idLetter).FirstOrDefault();
                    var dtNextChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ORDER_NUMBER == nextNumberPemeriksa).ToList();
                    if (dtNextChecker.Count() > 0 && dtCheckerElse == null)
                    {
                        foreach (var item in dtNextChecker)
                        {
                            var detailNextChecker = db.tr_checker.Where(p => p.ID_CHECKER == item.ID_CHECKER).FirstOrDefault();
                            detailNextChecker.APPROVAL_STATUS = 'Y';
                            detailNextChecker.MODIFIED_ON = DateTime.Now;
                            detailNextChecker.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                        nextApproval = 1;
                    }
                    if (dtCheckerElse != null)
                    {
                        nextApproval = 1;
                    }




                }
                //update surat
                var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                if (nextApproval == 0 && pr.saveType == 4)
                {
                    var dtTypeMemo = db.tr_memo_type.Where(p => p.ID_MEMO_TYPE == dtLetter.MEMO_TYPE_ID).FirstOrDefault();
                    noLetter = GenerateNoMemo("Memo", sessionUser, idLetter, false, DateTime.Now, dtTypeMemo.MEMO_TYPE_CODE, dtTypeMemo.ID_MEMO_TYPE);
                    var getsender = (from l in db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter)
                                     join p in db.tm_position
                                        on l.ID_POSITION_SENDER equals p.ID_POSITION
                                     join u in db.tm_unit
                                        on p.ID_UNIT equals u.ID_UNIT
                                     join em in db.tr_level_employee
                                        on l.ID_USER_SENDER equals em.ID_USER
                                     select new
                                     {
                                         u.ID_UNIT,
                                         u.UNIT_CODE,
                                         em.ID_LEVEL
                                     }).FirstOrDefault();
                    if (dtTypeMemo.MEMO_TYPE_CODE == "Memo.Div.Code" || dtTypeMemo.MEMO_TYPE_CODE == "Memo.Dept.Code")
                    {
                        if (getsender.ID_UNIT == sessionUser.idUnit)
                        {
                            if (dtChecker.ID_LEVEL_CHECKER == 2)
                            {
                                Guid memoTypeDireksi = new Guid("726A2598-2290-ED11-80D1-B7157F320A73");
                                var noDeliberation = GenerateNoMemo("Memo", sessionUser, idLetter, false, DateTime.Now, "Memo.DIR-Code", memoTypeDireksi);
                                //public string GenerateNoMemo(string letterType, SessionUser sessionUser, Guid idLetter, bool is_backdate, DateTime? letterDate, string memoType, Guid idMemotype)
                                dtLetter.LETTER_DELIBERATION_NUMBER = noDeliberation;
                            }

                        }
                    }
                    //if (dtTypeMemo.MEMO_TYPE_CODE == "Memo.Div.Code" || dtTypeMemo.MEMO_TYPE_CODE == "Memo.Dept.Code")
                    //{
                    //    Guid memoTypeDireksi = new Guid("726A2598-2290-ED11-80D1-B7157F320A73");
                    //    var noDeliberation = GenerateNoMemo("Memo", sessionUser, idLetter, false, dtLetter.LETTER_DATE, "Memo.DIR-Code", memoTypeDireksi);
                    //    //public string GenerateNoMemo(string letterType, SessionUser sessionUser, Guid idLetter, bool is_backdate, DateTime? letterDate, string memoType, Guid idMemotype)
                    //    dtLetter.LETTER_DELIBERATION_NUMBER = noDeliberation;
                    //}

                }
                dtLetter.LETTER_NUMBER = noLetter;
                if ((nextApproval == 0 && pr.saveType == 4) || pr.saveType == 5)
                {
                    dtLetter.STATUS_CODE = pr.saveType;
                }
                dtLetter.MODIFIED_ON = DateTime.Now;
                dtLetter.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();


                //var dtUser = db.tr_deliberation.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();

                //if (dtUser != null)
                //{
                //    //dtUser.COMMENT = pr.commentdlbrt;
                //    dtUser.STATUS_CODE = 2;
                //    db.SaveChanges();
                //}

                var ChekApproval = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.IS_APPROVER == 1 && p.APPROVAL_STATUS != 'Z').ToList().Count();
                if (ChekApproval == 0)
                {
                    var value = db.tr_deliberation.Where(p => p.ID_LETTER == idLetter).ToList();

                    foreach (var item in value)
                    {
                        var data = db.tr_deliberation.Where(p => p.ID_LETTER == item.ID_LETTER && p.ID_USER == item.ID_USER).FirstOrDefault();
                        data.STATUS_CODE = 2;
                        db.SaveChanges();


                        Tr_Notifikasi_Table notifikasi2 = new Tr_Notifikasi_Table();
                        notifikasi2.ID_LETTER = dtLetter.ID_LETTER;
                        notifikasi2.STATUS_DOC = "MEMO";
                        notifikasi2.ID_USER = dtLetter.CREATED_BY;
                        notifikasi2.ID_USER_APPROVAL = sessionUser.idUser;
                        notifikasi2.NOTIFIKASI = "Memo Perihal " + dtLetter.ABOUT + " Telah Ditambahkan Delibrasi Oleh " + sessionUser.nama;
                        notifikasi2.CREATED_ON = DateTime.Now;
                        notifikasi2.STATUS_READ = 0;


                        db.tr_notifikasi.Add(notifikasi2);
                        db.SaveChanges();

                    }

                }


                Tr_Notifikasi_Table notifikasi = new Tr_Notifikasi_Table();
                notifikasi.ID_LETTER = idLetter;
                notifikasi.STATUS_DOC = "MEMO";
                notifikasi.ID_USER = dtLetter.CREATED_BY;
                notifikasi.ID_USER_APPROVAL = sessionUser.idUser;
                if (pr.saveType == 4)
                {
                    notifikasi.NOTIFIKASI = "Memo Perihal " + dtLetter.ABOUT + " Telah Disetujui Oleh " + sessionUser.nama;

                }
                else if (pr.saveType == 5)
                {
                    notifikasi.NOTIFIKASI = "Memo Perihal " + dtLetter.ABOUT + " DiTolak Oleh " + sessionUser.nama;

                }
                notifikasi.CREATED_ON = DateTime.Now;
                notifikasi.STATUS_READ = 0;
             

                db.tr_notifikasi.Add(notifikasi);
                db.SaveChanges();


                var description = "Memo disimpan";
                if (pr.saveType == 2)
                {
                    description = "Surat Keluar dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Memo pemeriksa ke - " + dtChecker.ORDER_NUMBER;
                }
                if (pr.saveType == 5)
                {
                    description = "Memo pemeriksa ke - " + dtChecker.ORDER_NUMBER;
                }


                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 0 && pr.saveType == 4)
                {
                    description = "Memo dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan memo";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim memo";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui memo";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel MemoLetterNotifSecretary(ParamGetDetailLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailLetter letter = new OutputDetailLetter();
                var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0).FirstOrDefault();

                dtLetter.MODIFIED_ON = DateTime.Now;
                dtLetter.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();


                output.Status = "OK";
                output.Result = dtLetter;
                output.Message = "Berhasil kirim notifikasi";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DeleteAttachmentMemo(ParamDeleteAttachmentMemo pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var dtAttachment = db.tr_attachment.Where(p => p.ID_ATTACHMENT == pr.idAttachment).FirstOrDefault();
                if (dtAttachment != null)
                {
                    dtAttachment.STATUS_CODE = 0;
                    dtAttachment.MODIFIED_BY = sessionUser.idUser;
                    dtAttachment.MODIFIED_ON = DateTime.Now;
                    db.SaveChanges();
                    output.Status = "OK";
                    output.Result = sessionUser.idUser;
                    output.Message = "Success Delete attachment";

                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed delete attachment";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        #endregion

        #region update qrcode number kurir non eoffice

        public GeneralOutputModel UpdateQrcodeKurirNonEoffice(ParamInsertGenerateNoDocNonEoffice pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tr_letter_noneoffice.Where(p => p.ID_MAILING_NON_EOFFICE == pr.idmailingnoneoffice).FirstOrDefault();
                if (dtUser != null)
                {
                    dtUser.QRCODE_NUMBER = pr.qrcodenumber;
                    //dtUser.READ_STATUS = 9;
                    dtUser.MODIFIED_ON = DateTime.Now;
                    dtUser.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();
                    output.Status = "OK";
                    output.Message = "Success update qrcode number";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed delete letter";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        #endregion


        #region Pengadaan
        public GeneralOutputModel GetAllPengadaan_(SessionUser sessionUser)
        {
            try
            {
                var cultureInfo = CultureInfo.GetCultureInfo("id-ID");
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tp in db.tm_procurement.Where(p => p.DELETE_STATUS != 1)
                            select new PengadaanMemoOutputModel
                            {
                                idPengadaan = tp.ID,
                                namePengadaan = tp.NAME,
                                MinMaxNominal = String.Format(cultureInfo, "{0:C}", tp.MIN_NOMINAL) + "-" + String.Format(cultureInfo, "{0:C}", tp.MAX_NOMINAL),
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetPengadaanById_(ParamGetMemoPengadaanById pr, SessionUser sessionUser)
        {
            try
            {
                var cultureInfo = CultureInfo.GetCultureInfo("id-ID");
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_procurement.Where(p => p.DELETE_STATUS != 1 && pr.idPengadaan == p.ID)
                                on u.ID_USER.ToString() equals tp.APPROVER
                            //join tp2 in db.tm_procurement.Where(p=> p.DELETE_STATUS !=1 && pr.idPengadaan == p.ID)
                            //    on u.ID_USER equals Guid.Parse(tp2.APPROVER2)

                            select new PengadaanMemoOutputModel
                            {
                                idPengadaan=tp.ID,
                                MinMaxNominal = String.Format(cultureInfo, "{0:C}", tp.MIN_NOMINAL) + "-" + String.Format(cultureInfo, "{0:C}", tp.MAX_NOMINAL),
                                
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all user ";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        #endregion
        public bool IsDateTime(string text)
        {
            DateTime dateTime;
            bool isDateTime = false;

            // Check for empty string.
            if (string.IsNullOrEmpty(text))
            {
                return false;
            }

            isDateTime = DateTime.TryParse(text, out dateTime);

            return isDateTime;
        }


        public GeneralOutputModel GetStringMapMemo_(ParamGetStringmap pr, SessionUser sessionUser)
        {
            try
            {
               if(sessionUser.idGroup =="S" || sessionUser.idUnit.ToString() == "D52B6D38-EA42-ED11-958D-0050568AADBF" || sessionUser.idUnit.ToString() == "DA2B6D38-EA42-ED11-958D-0050568AADBF")
               {
                               var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                               && p.STATUS_CODE == 1).OrderBy(p => p.ATTRIBUTEVALUE)
                               select new StringmapMemoOutput
                               {
                                   id_stringmap = s.ID_STRINGMAP,
                                   attributeValue = s.ATTRIBUTEVALUE,
                                   value = s.VALUE
                               }).ToList();
                               output.Status = "OK";
                               output.Result = getMapping;
                               output.Message = "Success";
               }
               else
                {
                    var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                              && p.STATUS_CODE == 1 && p.ATTRIBUTEVALUE != 5).OrderBy(p => p.ATTRIBUTEVALUE)
                                      select new StringmapMemoOutput
                                      {
                                          id_stringmap = s.ID_STRINGMAP,
                                          attributeValue = s.ATTRIBUTEVALUE,
                                          value = s.VALUE
                                      }).ToList();
                    output.Status = "OK";
                    output.Result = getMapping;
                    output.Message = "Success";
                }
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetMemoTypeById_(ParamGetMemoTypeById pr, SessionUser sessionUser)
        {
            try
            {
                var cultureInfo = CultureInfo.GetCultureInfo("id-ID");
                GeneralOutputModel output = new GeneralOutputModel();

                var objectName = "tm_letter_Memo";
                var attributeName = "OUTBOX_TYPE_CODE";
                var getIdStringMap = db.tm_stringmap.Where(p => p.ATTRIBUTEVALUE == pr.stingMapVal && p.OBJECTNAME =="tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE").FirstOrDefault();

                var data = (from mtp in db.tr_memo_type.Where(p => p.STATUS_CODE == 1 && p.ID_STRINGMAP == getIdStringMap.ID_STRINGMAP)
                            

                            select new MemotypeOuput
                            {
                              idmemotype = mtp.ID_MEMO_TYPE,
                              memotypename=mtp.MEMO_TYPE_NAME

                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all user divisi";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel ApprovalDelebrationMemo_(ParamApprovalLetterMemo pr, SessionUser sessionUser)
        {
            try
            {
                var dtUser = db.tr_deliberation.Where(p => p.ID_LETTER == pr.idresponsesurat && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                var dtletter = db.tm_letter.Where(p => p.ID_LETTER == pr.idresponsesurat).FirstOrDefault();
                if (dtUser !=null)
                {
                    dtUser.COMMENT = pr.commentdlbrt;
                    if (pr.commentdlbrt !=null && pr.comment != "PengadaanDelebrasiBNI")
                    {
                        dtUser.STATUS_CODE = 4;
                    }
                    else
                    {
                        dtUser.STATUS_CODE = 3;
                    }

                    db.SaveChanges();


                    Tr_Notifikasi_Table notifikasi = new Tr_Notifikasi_Table();
                    notifikasi.ID_LETTER = dtletter.ID_LETTER;
                    notifikasi.STATUS_DOC = "MEMO";
                    notifikasi.ID_USER = dtUser.ID_USER;
                    notifikasi.ID_USER_APPROVAL = sessionUser.idUser;
                    notifikasi.NOTIFIKASI = "Memo Perihal " + dtletter.ABOUT + " Telah Ditambahkan Delibrasi Oleh " + sessionUser.nama;
                    notifikasi.CREATED_ON = DateTime.Now;
                    notifikasi.STATUS_READ = 0;
                    db.tr_notifikasi.Add(notifikasi);
                    db.SaveChanges();
                }
                else
                {
                    var dtUser2 = db.tr_deliberation.Where(p => p.ID_LETTER == pr.idresponsesurat && p.ID_USER_DELEGASI == sessionUser.idUser).FirstOrDefault();
                    dtUser2.COMMENT = pr.commentdlbrt;
                    if (pr.commentdlbrt !=null && pr.comment != null)
                    {
                        dtUser.STATUS_CODE = 4;
                    }
                    else
                    {
                        dtUser.STATUS_CODE = 3;
                    }

                    //dtUser2.STATUS_CODE = 3;
                    db.SaveChanges();
                }


                output.Status = "OK";
                output.Result = dtUser;
                output.Message = "Berhasil Menambahkan Delibrasi";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel InsertMemoBackDate(ParamInsertMemoBackDate pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachmentMemo outputAttachment = new OutputInsertAttachmentMemo();

                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                DateTime today = DateTime.Now;
                string formattedDate = today.ToString("yyyy-MM-dd");
                //var checkmanager = (from u in db.tm_user
                //                    join p in db.tm_position.Where(p => p.ID_UNIT == sessionUser.idUnit)
                //                        on u.ID_POSITION equals p.ID_POSITION
                //                    join l in db.tr_level_employee.Where(p => p.ID_LEVEL == 6)
                //                        on u.ID_USER equals l.ID_USER
                //                    select u).FirstOrDefault();
                //if (pr.outboxType != 2) 
                //{
                //    if (checkmanager != null)
                //    {
                //        var checker = JsonConvert.DeserializeObject<List<ParamInsertChecker>>(pr.idUserChecker).ToList();
                //        var checkanotherunit = checker.Where(p => p.idUnitChecker != sessionUser.idUnit).FirstOrDefault();
                //        var checkermanager = checker.Where(p => p.idUserChecker == checkmanager.ID_USER).FirstOrDefault();
                //        if (checkanotherunit != null && checkermanager == null)
                //        {
                //            output.Status = "NG";
                //            output.Message = "Pemeriksa harus ada user level manager untuk lintas divisi";

                //            return output;
                //        }
                //    }
                //    else
                //    {
                //        output.Status = "NG";
                //        output.Message = "Manager pada divisi " + sessionUser.unitCode + " belum di setting!Silahkan hubungi admin";

                //        return output;
                //    }
                //}

                //string letterType = GetStringMapping("tm_letter", "LETTER_TYPE_CODE", 1);
                if (pr.idresponsesurat == Guid.Empty)
                {
                    //insert new letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = noLetter;
                    letter.ABOUT = pr.about;
                    letter.OUTBOX_TYPE_CODE = pr.outboxType;
                    letter.RESULT_TYPE_CODE = pr.resultType;
                    letter.SIGNATURE_TYPE_CODE = pr.signatureType;
                    letter.ATTACHMENT_DESC = pr.attachmentCount;
                    letter.PRIORITY = pr.priority;
                    letter.LETTER_TYPE_CODE = pr.letterTypeCode;
                    letter.STATUS_CODE = pr.saveType;
                    //letter.SENDER_NAME = pr.senderName;
                    //letter.SENDER_ADDRESS = pr.senderAddress;
                    letter.LETTER_DATE = pr.letterDate;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;
                    letter.MEMO_TYPE_ID = pr.idMemoType;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                else
                {
                    if (pr.saveType == 1 || pr.saveType == 2)
                    {
                        var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idresponsesurat).FirstOrDefault();

                        dtLetter.LETTER_NUMBER = noLetter;
                        dtLetter.ABOUT = pr.about;
                        dtLetter.OUTBOX_TYPE_CODE = pr.outboxType;
                        dtLetter.RESULT_TYPE_CODE = pr.resultType;
                        dtLetter.SIGNATURE_TYPE_CODE = pr.signatureType;
                        dtLetter.ATTACHMENT_DESC = pr.attachmentCount;
                        dtLetter.PRIORITY = pr.priority;
                        dtLetter.LETTER_TYPE_CODE = pr.letterTypeCode;
                        dtLetter.STATUS_CODE = pr.saveType;
                        //dtLetter.SENDER_NAME = pr.senderName;
                        //dtLetter.SENDER_ADDRESS = pr.senderAddress;
                        dtLetter.LETTER_DATE = DateTime.Now;
                        dtLetter.MODIFIED_ON = DateTime.Now;
                        dtLetter.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }

                }
                if (pr.saveType == 1 || pr.saveType == 2)//disimpan atau baru dikirim
                {
                    //INSERT ISI
                    var dtContent = db.tr_content.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtContent != null)
                    {
                        db.tr_content.Remove(dtContent);
                        db.SaveChanges();
                    }

                    Tr_Content_Table content = new Tr_Content_Table();
                    content.ID_LETTER = idLetter;
                    content.LETTER_CONTENT = pr.isiSurat;
                    content.CREATED_ON = DateTime.Now;
                    content.CREATED_BY = sessionUser.idUser;
                    content.MODIFIED_ON = DateTime.Now;
                    content.MODIFIED_BY = sessionUser.idUser;
                    content.SUMMARY = pr.summary;
                    db.tr_content.Add(content);
                    db.SaveChanges();

                    //insert pengirim
                    var dtSender = db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtSender != null)
                    {
                        db.tr_letter_sender.Remove(dtSender);
                        db.SaveChanges();
                    }

                    Tr_Letter_Sender_Table sender = new Tr_Letter_Sender_Table();
                    sender.ID_LETTER = idLetter;
                    sender.ID_USER_SENDER = pr.bossUserId;
                    sender.ID_POSITION_SENDER = pr.bossPositionId;
                    sender.ID_UNIT_SENDER = pr.bossUnitId;
                    sender.ID_LEVEL_SENDER = pr.bossLevelId;
                    sender.IS_MAIN = 1;
                    sender.CREATED_ON = DateTime.Now;
                    sender.CREATED_BY = sessionUser.idUser;
                    sender.MODIFIED_ON = DateTime.Now;
                    sender.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_sender.Add(sender);
                    db.SaveChanges();

                    //INSERT To (PENERIMA) 

                    var dtReceiver = db.tr_receiver.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtReceiver != null)
                    {
                        db.tr_receiver.RemoveRange(dtReceiver);
                        db.SaveChanges();
                    }
                    var ReceiverList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPenerima>>(pr.idUserCheckerPenerima).ToList();
                    foreach (var item in ReceiverList)
                    {
                        //ambil id jabatan di tabel user

                        var dtUserPenerima = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima).FirstOrDefault();

                        Tr_Receiver_Table recipient = new Tr_Receiver_Table();
                        recipient.ID_LETTER = idLetter;
                        recipient.ID_USER_RECEIVER = item.idUserCheckerPenerima;
                        recipient.ID_POSITION_RECEIVER = dtUserPenerima.ID_POSITION;
                        recipient.CREATED_ON = DateTime.Now;
                        recipient.CREATED_BY = sessionUser.idUser;
                        recipient.MODIFIED_ON = DateTime.Now;
                        recipient.MODIFIED_BY = sessionUser.idUser;
                        db.tr_receiver.Add(recipient);
                        db.SaveChanges();
                    }


                    // insert delibration
                    var dtDelibration = db.tr_deliberation.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtDelibration != null)
                    {
                        db.tr_deliberation.RemoveRange(dtDelibration);
                        db.SaveChanges();
                    }
                    var DelibrationList = JsonConvert.DeserializeObject<List<ParamInsertDelibrationMemo>>(pr.idUserDelibration).ToList();
                    foreach (var item in DelibrationList)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserDelibration && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //ambil id jabatan di tabel user
                        var dtUserDelibration = db.tm_user.Where(p => p.ID_USER == item.idUserDelibration).FirstOrDefault();

                        Tr_Deliberation_Table delibration = new Tr_Deliberation_Table();
                        delibration.ID_LETTER = idLetter;
                        delibration.ID_USER = item.idUserDelibration;
                        delibration.ID_POSITION = dtUserDelibration.ID_POSITION;
                        delibration.STATUS_CODE = 1;
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                delibration.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        db.tr_deliberation.Add(delibration);
                        db.SaveChanges();
                    }
                    //INSERT Cc (Carbon Copy) 

                    var dtcc = db.tr_copy.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtcc != null)
                    {
                        db.tr_copy.RemoveRange(dtcc);
                        db.SaveChanges();
                    }
                    var CcList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoCarbonCopy>>(pr.idUserCheckerCarbonCopy).ToList();
                    foreach (var item in CcList)
                    {
                        //ambil id jabatan di tabel user
                        var dtUserCc = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerCarbonCopy).FirstOrDefault();

                        Tr_Copy_Table copy = new Tr_Copy_Table();
                        copy.ID_LETTER = idLetter;
                        copy.ID_USER_COPY = item.idUserCheckerCarbonCopy;
                        copy.ID_POSITION_COPY = dtUserCc.ID_POSITION;
                        copy.CREATED_ON = DateTime.Now;
                        copy.CREATED_BY = sessionUser.idUser;
                        copy.MODIFIED_ON = DateTime.Now;
                        copy.MODIFIED_BY = sessionUser.idUser;
                        db.tr_copy.Add(copy);
                        db.SaveChanges();
                    }

                    var ApproverList = JsonConvert.DeserializeObject<List<ParamInsertApproverMemo>>(pr.idUserApprover).ToList();
                    var checkerList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemo>>(pr.idUserChecker).ToList();
                    var checkerPengirimList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPengirim>>(pr.idUserCheckerPengirim).ToList();

                    var ApprovalPenerimaList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPenerima>>(pr.idUserCheckerPenerima).ToList();
                    var ApprovalChekerLainList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoLainya>>(pr.idUserCheckerlain).ToList();
                    

                    var checkerundermanager = checkerList.Where(p => p.idLevelChecker > 6).OrderByDescending(p => p.idLevelChecker).ToList();
                    var checkerName = "";
                    List<GetOuputIdSekdir> sekdirs = new List<GetOuputIdSekdir>();
                    var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtChecker != null)
                    {
                        db.tr_checker.RemoveRange(dtChecker);
                        db.SaveChanges();
                    }

                    int checkOrder = 1;
                    var checkerApprover = ApproverList.ToList();
                    var checkerPengirim = checkerPengirimList.ToList();

                    var ApprovalPenerima = ApprovalPenerimaList.ToList();

                    var ApprovalChekerLain = ApprovalChekerLainList.ToList();

                    foreach (var item in checkerPengirim)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = 1;
                        //tdr.APPROVAL_STATUS = 'Y';
                        //if (checkOrder == 1)
                        //{
                        tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 0;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }


                    foreach (var item in checkerApprover)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserApprover && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserApprover).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserApprover;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitApprover;
                        tdr.ID_LEVEL_CHECKER = item.idLevelApprover;
                        tdr.ORDER_NUMBER = 2;
                        //tdr.APPROVAL_STATUS = 'Y';
                        //if (checkOrder == 1)
                        //{
                        tdr.APPROVAL_STATUS = 'X';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 1;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    foreach (var item in checkerundermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //tdr.APPROVAL_STATUS = 'Y';
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                            tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER =2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                 
                    
                    var checkermanagerMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.idUnit && p.idLevelChecker == 6).ToList();
                    foreach (var item in checkermanagerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                            tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkeruppermanager = checkerList.Where(p => (p.idLevelChecker == 6 && p.idUnitChecker != sessionUser.idUnit) || (p.idLevelChecker < 6 && p.idLevelChecker != 2 && p.idLevelChecker != 1)).OrderByDescending(p => p.idLevelChecker).ToList();
                    int lastLevelId = 0;
                    foreach (var item in checkeruppermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //if (checkOrder == 1)
                        //{
                        //tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                        tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }
                    if (lastLevelId != 0)
                    {
                        ++checkOrder;
                    }
                    var checkerdirectorMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.directorIdUnit && p.idLevelChecker == 2).ToList();
                    foreach (var item in checkerdirectorMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                            tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkerdirectorelse = checkerList.Where(p => (p.idLevelChecker == 2 && p.idUnitChecker != sessionUser.directorIdUnit)).OrderByDescending(p => p.idLevelChecker).ToList();
                    lastLevelId = 0;
                    foreach (var item in checkerdirectorelse)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                            tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }

                    var checkercommisionerMaker = checkerList.Where(p => p.idLevelChecker == 1).ToList();
                    foreach (var item in checkercommisionerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                            tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 0;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }


                    foreach (var item in ApprovalChekerLain)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerlain && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtPosition = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerlain).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserCheckerlain;
                        tdr.ID_POSITION_CHECKER = dtPosition.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitCheckerlain;
                        tdr.ID_LEVEL_CHECKER = item.idLevelCheckerlain;
                        tdr.ORDER_NUMBER = checkOrder;
                        //tdr.IS_APPROVER = 4;
                        tdr.APPROVAL_STATUS = 'X';
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 4;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    #region Penerima Approval

                    foreach (var item in ApprovalPenerima)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerPenerima && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtPosition = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserCheckerPenerima;
                        tdr.ID_POSITION_CHECKER = dtPosition.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitCheckerPenerima;
                        tdr.ID_LEVEL_CHECKER = item.idLevelCheckerPenerima;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 5;
                        tdr.APPROVAL_STATUS = 'X';
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //tdr.IS_APPROVER = 1;
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    #endregion


                }
                var description = "Memo disimpan";
                if (pr.saveType == 2)
                {
                    description = "Memo dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Memo disetujui";
                }
                if (pr.saveType == 5)
                {
                    description = "Memo ditolak";
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 1 && pr.saveType == 4)
                {
                    description = "Memo dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan memo";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim memo";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui memo";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetDetailsMemoBackDate(ParamGetDetailMemo pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailMemoBackDate letter = new OutputDetailMemoBackDate();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                join tmp in db.tr_memo_type.Where(p => p.STATUS_CODE != 0) on l.MEMO_TYPE_ID equals tmp.ID_MEMO_TYPE

                                select new MemoOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME,
                                    memotypename = tmp.MEMO_TYPE_NAME,
                                    idmemoType = tmp.ID_MEMO_TYPE,
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;
                    if (pr.lettertype !="44")
                    {
                        InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");
                    }
                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                        select new OutputListReceiverMemo
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            idUnit = d.ID_UNIT
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                    select new OutputListCopyMemo
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME,
                                        idUnit = d.ID_UNIT
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetterMemo
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   idUserLog = l.CREATED_BY,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachmentMemo
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionMemo
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();
                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                      join j in db.tm_position
                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                      join u in db.tm_user
                                          on c.ID_USER_SENDER equals u.ID_USER
                                      select new OutputListLetterSenderMemo
                                      {
                                          idLetterSender = c.ID_LETTER_SENDER,
                                          idPositionSender = c.ID_POSITION_SENDER,
                                          idUserSender = c.ID_USER_SENDER,
                                          idUnitSender = c.ID_UNIT_SENDER,
                                          idLevelSender = c.ID_LEVEL_SENDER,
                                          isMain = c.IS_MAIN,
                                          positionName = j.POSITION_NAME,
                                          fullname = u.FULLNAME,
                                          nip = u.NIP
                                      }).ToList();
                    var checkerPengirimList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 0)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListCheckerMemoPengirim
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter &&  p.IS_APPROVER ==2)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListCheckerMemo
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    var checkerLainList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter  && p.IS_APPROVER== 4)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                             on c.ID_USER_CHECKER equals u.ID_USER
                                           //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                           select new OutputListCheckerMemoLainya
                                           {
                                               idChecker = c.ID_CHECKER,
                                               idPositionChecker = c.ID_POSITION_CHECKER,
                                               idUserChecker = c.ID_USER_CHECKER,
                                               idUnitChecker = c.ID_UNIT_CHECKER,
                                               idLevelChecker = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               nip = u.NIP,
                                               approvalStatus = c.APPROVAL_STATUS,
                                               ordernumber = c.ORDER_NUMBER,
                                               //idSekertaris = s.ID_SEKETARIS

                                           }).ToList();
                    var checkerPenerimaList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 5)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                 on c.ID_USER_CHECKER equals u.ID_USER
                                               //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                               select new OutputListCheckerMemoPenerima
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_CHECKER,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS,
                                                   ordernumber = c.ORDER_NUMBER,
                                                   //idSekertaris = s.ID_SEKETARIS

                                               }).ToList();
                    var checkerSekertarisList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter )
                                                 join j in db.tm_position
                                                         on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                                 join u in db.tm_user
                                                   on c.ID_USER_CHECKER equals u.ID_USER
                                                 join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                                 select new OutputListCheckerMemoSek
                                                 {
                                                     idChecker = c.ID_CHECKER,
                                                     idPositionChecker = c.ID_POSITION_CHECKER,
                                                     idUserChecker = c.ID_USER_CHECKER,
                                                     idUnitChecker = c.ID_UNIT_CHECKER,
                                                     idLevelChecker = c.ID_LEVEL_CHECKER,
                                                     positionName = j.POSITION_NAME,
                                                     fullname = u.FULLNAME,
                                                     nip = u.NIP,
                                                     approvalStatus = c.APPROVAL_STATUS,
                                                     ordernumber = c.ORDER_NUMBER,
                                                     idSekertaris = s.ID_SEKETARIS

                                                 }).ToList();

                    var approverList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListApproverMemo
                                       {
                                           idApprover = c.ID_CHECKER,
                                           idPositionApprover = c.ID_POSITION_CHECKER,
                                           idUserApprover = c.ID_USER_CHECKER,
                                           idUnitApprover = c.ID_UNIT_CHECKER,
                                           idLevelApprover = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    //var outgoingRecipientList = (from a in db.tr_outgoing_recipient.Where(p => p.ID_LETTER == pr.idLetter)
                    //                             select new OutputListOutgoingRecipient
                    //                             {
                    //                                 idOutgoingRecipient = a.ID_OUTGOING_RECIPIENT,
                    //                                 recipientAddress = a.RECIPIENT_ADDRESS,
                    //                                 recipientName = a.RECIPIENT_NAME,
                    //                                 recipientCompany = a.RECEPIENT_COMPANY
                    //                             }).ToList();
                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                         select new OutputDetailLetterContentMemo
                                         {
                                             idContent = a.ID_CONTENT,
                                             letterContent = a.LETTER_CONTENT,
                                             summary = a.SUMMARY
                                         }).FirstOrDefault();
                    var delibarationList = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputListDeliberationMemoModel
                                            {
                                                idLetter = c.ID_LETTER,
                                                idDeliberation = c.ID_DELIBERATION,
                                                idUser = c.ID_USER,
                                                idPosition = c.ID_POSITION,
                                                positionName = j.POSITION_NAME,
                                                fullname = u.FULLNAME,
                                                commentdlbrt = c.COMMENT,
                                                idUnit = d.ID_UNIT,
                                                statuscode = c.STATUS_CODE

                                            }).ToList();
                    var delibarationRows = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser)
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputDeliberationMemoModel
                                            {
                                                idLetter = c.ID_LETTER,
                                                idDeliberation = c.ID_DELIBERATION,
                                                idUser = c.ID_USER,
                                                idPosition = c.ID_POSITION,
                                                positionName = j.POSITION_NAME,
                                                fullname = u.FULLNAME,
                                                commentdlbrt = c.COMMENT,
                                                idUnit = d.ID_UNIT,
                                                statuscode = c.STATUS_CODE
                                            }).FirstOrDefault();
                    #region delegasi

                    var checkerPengirimListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 0)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                   on c.ID_USER_DELEGASI equals u.ID_USER
                                               select new OutputListCheckerMemoPengirimDelg
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_DELEGASI,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS
                                               }).ToList();
                    
                    var checkerListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter &&  p.IS_APPROVER ==2)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_DELEGASI equals u.ID_USER
                                       select new OutputListCheckerMemoDelg
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_DELEGASI,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    
                    var checkerLainListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter  && p.IS_APPROVER== 4)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                             on c.ID_USER_DELEGASI equals u.ID_USER
                                           //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                           select new OutputListCheckerMemoLainyaDelg
                                           {
                                               idChecker = c.ID_CHECKER,
                                               idPositionChecker = c.ID_POSITION_CHECKER,
                                               idUserChecker = c.ID_USER_DELEGASI,
                                               idUnitChecker = c.ID_UNIT_CHECKER,
                                               idLevelChecker = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               nip = u.NIP,
                                               approvalStatus = c.APPROVAL_STATUS,
                                               ordernumber = c.ORDER_NUMBER,
                                               //idSekertaris = s.ID_SEKETARIS
                                           }).ToList();
                    
                    var checkerPenerimaListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 5)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                 on c.ID_USER_DELEGASI equals u.ID_USER
                                               //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                               select new OutputListCheckerMemoPenerimaDelg
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_DELEGASI,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS,
                                                   ordernumber = c.ORDER_NUMBER,
                                                   //idSekertaris = s.ID_SEKETARIS
                                               }).ToList();
                    
                    var approverListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1)
                                        join j in db.tm_position
                                                on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on c.ID_USER_DELEGASI equals u.ID_USER
                                        select new OutputListApproverMemoDelg
                                        {
                                            idApprover = c.ID_CHECKER,
                                            idPositionApprover = c.ID_POSITION_CHECKER,
                                            idUserApprover = c.ID_USER_DELEGASI,
                                            idUnitApprover = c.ID_UNIT_CHECKER,
                                            idLevelApprover = c.ID_LEVEL_CHECKER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            approvalStatus = c.APPROVAL_STATUS
                                        }).ToList();
                    
                    var delibarationListDelg = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER_DELEGASI equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputListDeliberationDelegasiMemoModel
                                            {
                                                idLetter = c.ID_LETTER,
                                                idDeliberation = c.ID_DELIBERATION,
                                                idUser = c.ID_USER_DELEGASI,
                                                idPosition = c.ID_POSITION,
                                                positionName = j.POSITION_NAME,
                                                fullname = u.FULLNAME,
                                                commentdlbrt = c.COMMENT,
                                                idUnit = d.ID_UNIT,
                                                statuscode = c.STATUS_CODE
                                            }).ToList();

                    #endregion

                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.delibration = delibarationList;
                    letter.delibrationRow = delibarationRows;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;
                    letter.sender = senderList;
                    letter.checker = checkerList;
                    letter.checkerPengirim = checkerPengirimList;
                    letter.checkerPenerima = checkerPenerimaList;
                    letter.checkerSekertaris = checkerSekertarisList;
                    letter.checkerlain = checkerLainList;
                    letter.Approver = approverList;
                    //letter.outgoingRecipient = outgoingRecipientList;
                    letter.letterContent = letterContent;

                    //delegasi
                    letter.checkerPengirimDelg = checkerPengirimListDelg;
                    letter.checkerDelg = checkerListDelg;
                    letter.checkerlainDelg = checkerLainListDelg;
                    letter.checkerPenerimaDelg = checkerPenerimaListDelg;
                    letter.ApproverDelg = approverListDelg;
                    letter.delibrationDelegasi = delibarationListDelg;
                    //     

                    //end

                    //update status baca
                    if (pr.lettertype !="44")
                    {
                        var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                        if (tblStatus != null)
                        {
                            tblStatus.READ_STATUS = 0;
                            tblStatus.MODIFIED_ON = DateTime.Now;
                            tblStatus.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }
                   
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Memo";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail Memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }
        
        
        public GeneralOutputModel GetDataNominalMinMaxById(ParamCheckMinMaxNomial pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = db.tm_procurement.Where(p => p.ID == pr.IdPengadaan).AsQueryable();
                if (data != null)
                {
                   
                    data = data.Where(p => Convert.ToDecimal(pr.minMaxNomnal) >= p.MIN_NOMINAL && Convert.ToDecimal(pr.minMaxNomnal) <= p.MAX_NOMINAL);
                    var dt = data.Count();
                    if(dt > 0)
                    {
                        output.Status = "OK";
                        output.Message = "Nominal " + pr.minMaxNomnal + " Available";
                        return output;
                    }
                    else
                    {
                        output.Status = "NG";
                        output.Message = "Nominal " + pr.minMaxNomnal + " Not Available";
                        return output;
                    }
                    
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Nomial " + pr.minMaxNomnal + " Not Available";

                    return output;
                }
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetApprovalPengadaanById_(ParamGetMemoPengadaanById pr, SessionUser sessionUser)
        {
            try
            {
                var cultureInfo = CultureInfo.GetCultureInfo("id-ID");
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            join po in db.tm_position.Where(p => p.STATUS_CODE == 1)
                            on u.ID_POSITION equals po.ID_POSITION
                            join tu in db.tm_unit.Where(p=> p.STATUS_CODE == 1)
                            on po.ID_UNIT equals tu.ID_UNIT
                            join tp in db.tm_procurement.Where(p => p.DELETE_STATUS != 1 && pr.idPengadaan == p.ID)
                                on u.ID_USER.ToString() equals tp.APPROVER
                            select new PengadaanMemoOutputModel
                            {
                                Fullname = u.FULLNAME  + "-" + po.POSITION_NAME,
                                PositionName = po.POSITION_NAME,
                                IdUser = u.ID_USER,
                                idPosition = po.ID_POSITION,
                                idUnit = tu.ID_UNIT

                            }).Union(
                            (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                             join po in db.tm_position.Where(p => p.STATUS_CODE == 1)
                             on u.ID_POSITION equals po.ID_POSITION
                             join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                             on po.ID_UNIT equals tu.ID_UNIT
                             join tp in db.tm_procurement.Where(p => p.DELETE_STATUS != 1 && pr.idPengadaan == p.ID)
                                 on u.ID_USER.ToString() equals tp.APPROVER2
                             select new PengadaanMemoOutputModel
                             {
                                 Fullname = u.FULLNAME + "-" + po.POSITION_NAME,
                                 PositionName = po.POSITION_NAME,
                                 IdUser = u.ID_USER,
                                 idPosition = po.ID_POSITION,
                                 idUnit = tu.ID_UNIT

                             })).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel InsertMemoPengadaan(ParamInsertMemoPengadaan pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachmentMemo outputAttachment = new OutputInsertAttachmentMemo();
                //string MemotypeID = "70E7AAA4-2390-ED11-80D1-B7157F320A73";
                //Guid MtpeID = new Guid(MemotypeID);
                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                DateTime today = DateTime.Now;
                string formattedDate = today.ToString("yyyy-MM-dd");
                if (pr.idresponsesurat == Guid.Empty)
                {
                    //insert new letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = noLetter;
                    letter.ABOUT = pr.about;
                    letter.MEMO_TYPE_ID = pr.idMemoType;
                    letter.OUTBOX_TYPE_CODE = pr.outboxType;
                    letter.RESULT_TYPE_CODE = pr.resultType;
                    letter.SIGNATURE_TYPE_CODE = pr.signatureType;
                    letter.ATTACHMENT_DESC = pr.attachmentCount;
                    letter.PRIORITY = pr.priority;
                    letter.LETTER_TYPE_CODE = pr.letterTypeCode;
                    letter.STATUS_CODE = pr.saveType;
                    letter.LETTER_DATE = DateTime.Now;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                else
                {
                    if (pr.saveType == 1 || pr.saveType == 2)
                    {
                        var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idresponsesurat).FirstOrDefault();

                        dtLetter.LETTER_NUMBER = noLetter;
                        dtLetter.ABOUT = pr.about;
                        dtLetter.OUTBOX_TYPE_CODE = pr.outboxType;
                        dtLetter.RESULT_TYPE_CODE = pr.resultType;
                        dtLetter.SIGNATURE_TYPE_CODE = pr.signatureType;
                        dtLetter.ATTACHMENT_DESC = pr.attachmentCount;
                        dtLetter.PRIORITY = pr.priority;
                        dtLetter.LETTER_TYPE_CODE = pr.letterTypeCode;
                        dtLetter.STATUS_CODE = pr.saveType;
                        dtLetter.LETTER_DATE = DateTime.Now;
                        dtLetter.MODIFIED_ON = DateTime.Now;
                        dtLetter.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }

                }
                if (pr.saveType == 1 || pr.saveType == 2)//disimpan atau baru dikirim
                {
                    //INSERT ISI
                    var dtContent = db.tr_content.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtContent != null)
                    {
                        db.tr_content.Remove(dtContent);
                        db.SaveChanges();
                    }

                    Tr_Content_Table content = new Tr_Content_Table();
                    content.ID_LETTER = idLetter;
                    content.LETTER_CONTENT = pr.isiSurat;
                    content.CREATED_ON = DateTime.Now;
                    content.CREATED_BY = sessionUser.idUser;
                    content.MODIFIED_ON = DateTime.Now;
                    content.MODIFIED_BY = sessionUser.idUser;
                    content.SUMMARY = pr.summary;
                    db.tr_content.Add(content);
                    db.SaveChanges();


                    // Insert Pengadaan
                    var dtPr = db.tr_procurement.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtPr != null)
                    {
                        db.tr_procurement.Remove(dtPr);
                        db.SaveChanges();
                    }

                    Tr_Procurement_Table Procurement = new Tr_Procurement_Table();
                    Procurement.ID_LETTER = idLetter;
                    Procurement.ID_PROCUREMENT = pr.idMixMax;
                    Procurement.NOMINAL = pr.MinMaxNomnal;
                    Procurement.CREATED_ON = DateTime.Now;
                    Procurement.CREATED_BY = sessionUser.idUser;
                    Procurement.MODIFIED_ON = DateTime.Now;
                    Procurement.MODIFIED_BY = sessionUser.idUser;
                    db.tr_procurement.Add(Procurement);
                    db.SaveChanges();


                    //insert pengirim
                    var dtSender = db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtSender != null)
                    {
                        db.tr_letter_sender.Remove(dtSender);
                        db.SaveChanges();
                    }

                    Tr_Letter_Sender_Table sender = new Tr_Letter_Sender_Table();
                    sender.ID_LETTER = idLetter;
                    sender.ID_USER_SENDER = pr.bossUserId;
                    sender.ID_POSITION_SENDER = pr.bossPositionId;
                    sender.ID_UNIT_SENDER = pr.bossUnitId;
                    sender.ID_LEVEL_SENDER = pr.bossLevelId;
                    sender.IS_MAIN = 1;
                    sender.CREATED_ON = DateTime.Now;
                    sender.CREATED_BY = sessionUser.idUser;
                    sender.MODIFIED_ON = DateTime.Now;
                    sender.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_sender.Add(sender);
                    db.SaveChanges();

                    //INSERT To (PENERIMA) 

                    var dtReceiver = db.tr_receiver.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtReceiver != null)
                    {
                        db.tr_receiver.RemoveRange(dtReceiver);
                        db.SaveChanges();
                    }
                    var ReceiverList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPenerima>>(pr.idUserCheckerPenerima).ToList();
                    foreach (var item in ReceiverList)
                    {
                        //ambil id jabatan di tabel user

                        var dtUserPenerima = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima).FirstOrDefault();

                        Tr_Receiver_Table recipient = new Tr_Receiver_Table();
                        recipient.ID_LETTER = idLetter;
                        recipient.ID_USER_RECEIVER = item.idUserCheckerPenerima;
                        recipient.ID_POSITION_RECEIVER = dtUserPenerima.ID_POSITION;
                        recipient.CREATED_ON = DateTime.Now;
                        recipient.CREATED_BY = sessionUser.idUser;
                        recipient.MODIFIED_ON = DateTime.Now;
                        recipient.MODIFIED_BY = sessionUser.idUser;
                        db.tr_receiver.Add(recipient);
                        db.SaveChanges();
                    }


                    // insert delibration
                    var dtDelibration = db.tr_deliberation.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtDelibration != null)
                    {
                        db.tr_deliberation.RemoveRange(dtDelibration);
                        db.SaveChanges();
                    }
                    //var ApprovalPengadaanList1 = JsonConvert.DeserializeObject<List<ParamInsertApprovalPengadaan>>(pr.idUserApprovalPengadaan).ToList();
                    //foreach (var item in ApprovalPengadaanList1)
                    //{
                    //    // ambil id user delegasi
                    //    var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserApprovalPengadaan && p.STATUS_APPROVER == 1).FirstOrDefault();
                    //    //var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserApprover).FirstOrDefault();

                    //    Tr_Deliberation_Table delibration2 = new Tr_Deliberation_Table();
                    //    delibration2.ID_LETTER = idLetter;
                    //    delibration2.ID_USER = item.idUserApprovalPengadaan;
                    //    delibration2.ID_POSITION = item.idUserApprovalPositionPengadaan;
                    //    delibration2.STATUS_CODE = 1;
                    //    if (dataDel !=null)
                    //    {

                    //        DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                    //        DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                    //        DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                    //        if (NowDate >= startDate && NowDate <= EndDate)
                    //        {
                    //            delibration2.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                    //        }

                    //    }
                    //    db.tr_deliberation.Add(delibration2);
                    //    db.SaveChanges();
                    //}
                    var DelibrationList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoDelibretion>>(pr.idUserCheckerDelibretion).ToList();
                    foreach (var item in DelibrationList)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerDelibretion && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //ambil id jabatan di tabel user
                        var dtUserDelibration = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerDelibretion).FirstOrDefault();

                        Tr_Deliberation_Table delibration = new Tr_Deliberation_Table();
                        delibration.ID_LETTER = idLetter;
                        delibration.ID_USER = item.idUserCheckerDelibretion;
                        delibration.ID_POSITION = dtUserDelibration.ID_POSITION;
                        delibration.STATUS_CODE = 1;
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                delibration.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        db.tr_deliberation.Add(delibration);
                        db.SaveChanges();
                    }
                    var ApproverList1 = JsonConvert.DeserializeObject<List<ParamInsertApproverMemo>>(pr.idUserApprover).ToList();
                    var ApprovalPengadaanList1 = JsonConvert.DeserializeObject<List<ParamInsertApprovalPengadaan>>(pr.idUserApprovalPengadaan).ToList();


                    foreach (var item in ApprovalPengadaanList1)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserApprovalPengadaan && p.STATUS_APPROVER == 1).FirstOrDefault();
                       
                        Tr_Deliberation_Table delibration = new Tr_Deliberation_Table();
                        delibration.ID_LETTER = idLetter;
                        delibration.ID_USER = item.idUserApprovalPengadaan;
                        delibration.ID_POSITION = item.idUserApprovalPositionPengadaan;
                        delibration.STATUS_CODE = 4;
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                delibration.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        db.tr_deliberation.Add(delibration);


                        db.SaveChanges();
                    }

                    foreach (var item in ApproverList1)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserApprover && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserApprover).FirstOrDefault();


                        Tr_Deliberation_Table delibration = new Tr_Deliberation_Table();
                        delibration.ID_LETTER = idLetter;
                        delibration.ID_USER =  item.idUserApprover;
                        delibration.ID_POSITION = dtUserChecker.ID_POSITION;
                        delibration.STATUS_CODE = 4;
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                delibration.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        db.tr_deliberation.Add(delibration);
                        db.SaveChanges();
                    }

                    //INSERT Cc (Carbon Copy) 

                    var dtcc = db.tr_copy.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtcc != null)
                    {
                        db.tr_copy.RemoveRange(dtcc);
                        db.SaveChanges();
                    }
                    var CcList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoCarbonCopy>>(pr.idUserCheckerCarbonCopy).ToList();
                    foreach (var item in CcList)
                    {
                        //ambil id jabatan di tabel user
                        var dtUserCc = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerCarbonCopy).FirstOrDefault();

                        Tr_Copy_Table copy = new Tr_Copy_Table();
                        copy.ID_LETTER = idLetter;
                        copy.ID_USER_COPY = item.idUserCheckerCarbonCopy;
                        copy.ID_POSITION_COPY = dtUserCc.ID_POSITION;
                        copy.CREATED_ON = DateTime.Now;
                        copy.CREATED_BY = sessionUser.idUser;
                        copy.MODIFIED_ON = DateTime.Now;
                        copy.MODIFIED_BY = sessionUser.idUser;
                        db.tr_copy.Add(copy);
                        db.SaveChanges();
                    }

                    var ApproverList = JsonConvert.DeserializeObject<List<ParamInsertApproverMemo>>(pr.idUserApprover).ToList();
                    var checkerList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemo>>(pr.idUserChecker).ToList();
                    //var checkerPengirimList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPengirim>>(pr.idUserCheckerPengirim).ToList();
                    var ApprovalPengadaanList = JsonConvert.DeserializeObject<List<ParamInsertApprovalPengadaan>>(pr.idUserApprovalPengadaan).ToList();
                    var ApprovalChekerLainList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoLainya>>(pr.idUserCheckerlain).ToList();
                    var ApprovalPenerimaList = JsonConvert.DeserializeObject<List<ParamInsertCheckerMemoPenerima>>(pr.idUserCheckerPenerima).ToList();


                    var checkerundermanager = checkerList.Where(p => p.idLevelChecker > 6).OrderByDescending(p => p.idLevelChecker).ToList();
                    var checkerName = "";
                    List<GetOuputIdSekdir> sekdirs = new List<GetOuputIdSekdir>();
                    var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtChecker != null)
                    {
                        db.tr_checker.RemoveRange(dtChecker);
                        db.SaveChanges();
                    }

                    var cekdata = db.tr_checker.Where(p => p.ORDER_NUMBER != 0 && p.ID_LETTER == idLetter).FirstOrDefault();

                    int checkOrder = 1;
                    var checkerApprover = ApproverList.ToList();
                    //var checkerPengirim = checkerPengirimList.ToList();
                    var ApproverPengadaan = ApprovalPengadaanList.ToList();
                    var ApprovalChekerLain = ApprovalChekerLainList.ToList();
                    var ApprovalPenerima = ApprovalPenerimaList.ToList();



                    //foreach (var item in checkerPengirim)
                    //{
                    //    // ambil id user delegasi
                    //    var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                    //    //select detail user
                    //    var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                    //    Tr_Checker_Table tdr = new Tr_Checker_Table();
                    //    tdr.ID_LETTER = idLetter;
                    //    tdr.ID_USER_CHECKER = item.idUserChecker;
                    //    tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                    //    tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                    //    tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                    //    tdr.ORDER_NUMBER = 1;
                    //    //tdr.APPROVAL_STATUS = 'Y';
                    //    //if (checkOrder == 1)
                    //    //{
                    //    tdr.APPROVAL_STATUS = 'Y';
                    //    //}
                    //    //else
                    //    //{
                    //    //    tdr.APPROVAL_STATUS = 'X';
                    //    //}
                    //    if (dataDel !=null)
                    //    {

                    //        DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                    //        DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                    //        DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                    //        if (NowDate >= startDate && NowDate <= EndDate)
                    //        {
                    //            tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                    //        }

                    //    }
                    //    tdr.IS_APPROVER = 0;
                    //    tdr.CREATED_ON = DateTime.Now;
                    //    tdr.CREATED_BY = sessionUser.idUser;
                    //    tdr.MODIFIED_ON = DateTime.Now;
                    //    tdr.MODIFIED_BY = sessionUser.idUser;

                    //    db.tr_checker.Add(tdr);
                    //    db.SaveChanges();
                    //    checkOrder++;
                    //}


                    



                    foreach (var item in checkerundermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        //tdr.APPROVAL_STATUS = 'Y';
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }





                    var checkermanagerMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.idUnit && p.idLevelChecker == 6).ToList();
                    foreach (var item in checkermanagerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkeruppermanager = checkerList.Where(p => (p.idLevelChecker == 6 && p.idUnitChecker != sessionUser.idUnit) || (p.idLevelChecker < 6 && p.idLevelChecker != 2 && p.idLevelChecker != 1)).OrderByDescending(p => p.idLevelChecker).ToList();
                    int lastLevelId = 0;

                    foreach (var item in checkeruppermanager)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }

                    if (lastLevelId != 0)
                    {
                        ++checkOrder;
                    }

                    var checkerdirectorMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.directorIdUnit && p.idLevelChecker == 2).ToList();
                    foreach (var item in checkerdirectorMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkerdirectorelse = checkerList.Where(p => (p.idLevelChecker == 2 && p.idUnitChecker != sessionUser.directorIdUnit)).OrderByDescending(p => p.idLevelChecker).ToList();
                    lastLevelId = 0;

                    foreach (var item in checkerdirectorelse)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }

                    var checkercommisionerMaker = checkerList.Where(p => p.idLevelChecker == 1).ToList();

                    foreach (var item in checkercommisionerMaker)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserChecker && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }


                    foreach (var item in ApproverPengadaan)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserApprovalPengadaan && p.STATUS_APPROVER == 1).FirstOrDefault();
                        //var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserApprover).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserApprovalPengadaan;
                        tdr.ID_POSITION_CHECKER = item.idUserApprovalPositionPengadaan;
                        tdr.ID_UNIT_CHECKER = item.idUserApprovalunitPengadaan;
                        tdr.ID_LEVEL_CHECKER = checkOrder;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 1;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    foreach (var item in checkerApprover)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserApprover && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserApprover).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserApprover;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitApprover;
                        tdr.ID_LEVEL_CHECKER = item.idLevelApprover;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.IS_APPROVER = 3;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    foreach (var item in ApprovalChekerLain)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerlain && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtPosition = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerlain).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserCheckerlain;
                        tdr.ID_POSITION_CHECKER = dtPosition.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitCheckerlain;
                        tdr.ID_LEVEL_CHECKER = item.idLevelCheckerlain;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 4;
                        tdr.APPROVAL_STATUS = 'X';
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //tdr.IS_APPROVER = 1;
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    #region Penerima Approval

                    foreach (var item in ApprovalPenerima)
                    {
                        // ambil id user delegasi
                        var dataDel = db.tr_delegasi.Where(p => p.ID_USER == item.idUserCheckerPenerima && p.STATUS_APPROVER == 1).FirstOrDefault();
                        var dtPosition = db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima).FirstOrDefault();

                        var level = (from c in db.tm_user.Where(p => p.ID_USER == item.idUserCheckerPenerima)
                                     join j in db.tm_position
                                             on c.ID_POSITION equals j.ID_POSITION
                                     join u in db.tm_unit
                                         on j.ID_UNIT equals u.ID_UNIT
                                     join l in db.tr_level_employee on u.ID_UNIT equals l.ID_UNIT
                                     select new OutputListCheckerMemo
                                     {
                                         idLevelChecker = l.ID_LEVEL
                                     }).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserCheckerPenerima;
                        tdr.ID_POSITION_CHECKER = dtPosition.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitCheckerPenerima;
                        tdr.ID_LEVEL_CHECKER = level.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        tdr.IS_APPROVER = 5;
                        tdr.APPROVAL_STATUS = 'X';
                        //if (checkOrder == 1)
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        //tdr.IS_APPROVER = 1;
                        if (dataDel !=null)
                        {

                            DateTime NowDate = Convert.ToDateTime(formattedDate).Date;
                            DateTime startDate = Convert.ToDateTime(dataDel.STARTDATE).Date;
                            DateTime EndDate = Convert.ToDateTime(dataDel.ENDDATE).Date;

                            if (NowDate >= startDate && NowDate <= EndDate)
                            {
                                tdr.ID_USER_DELEGASI=dataDel.ID_USER_DELEGASI;
                            }

                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    #endregion

                }
                var description = "Memo disimpan";
                if (pr.saveType == 2)
                {
                    description = "Memo dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Memo disetujui";
                }
                if (pr.saveType == 5)
                {
                    description = "Memo ditolak";
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 1 && pr.saveType == 4)
                {
                    description = "Memo dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan memo";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim memo";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui memo";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDetailsMemoPengadaan(ParamGetDetailMemo pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailMemoPengadaan letter = new OutputDetailMemoPengadaan();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                join tmp in db.tr_memo_type on l.MEMO_TYPE_ID equals tmp.ID_MEMO_TYPE

                                select new MemoOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME,
                                    memotypename = tmp.MEMO_TYPE_NAME,
                                    idmemoType = tmp.ID_MEMO_TYPE,
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;
                    if (pr.lettertype !="55")
                    {
                        InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");
                    }

                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                        select new OutputListReceiverMemo
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            idUnit = d.ID_UNIT
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                    select new OutputListCopyMemo
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME,
                                        idUnit = d.ID_UNIT
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetterMemo
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   idUserLog = l.CREATED_BY,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      
                                      select new OutputListAttachmentMemo
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionMemo
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();
                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                      join j in db.tm_position
                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                      join u in db.tm_user
                                          on c.ID_USER_SENDER equals u.ID_USER
                                      select new OutputListLetterSenderMemo
                                      {
                                          idLetterSender = c.ID_LETTER_SENDER,
                                          idPositionSender = c.ID_POSITION_SENDER,
                                          idUserSender = c.ID_USER_SENDER,
                                          idUnitSender = c.ID_UNIT_SENDER,
                                          idLevelSender = c.ID_LEVEL_SENDER,
                                          isMain = c.IS_MAIN,
                                          positionName = j.POSITION_NAME,
                                          fullname = u.FULLNAME,
                                          nip = u.NIP
                                      }).ToList();
                    var checkerPengirimList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 0)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                   on c.ID_USER_CHECKER equals u.ID_USER
                                               select new OutputListCheckerMemoPengirim
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_CHECKER,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS
                                               }).ToList();
                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER ==2)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListCheckerMemo
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    var checkerLainList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 4)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                             on c.ID_USER_CHECKER equals u.ID_USER
                                           //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                           select new OutputListCheckerMemoLainya
                                           {
                                               idChecker = c.ID_CHECKER,
                                               idPositionChecker = c.ID_POSITION_CHECKER,
                                               idUserChecker = c.ID_USER_CHECKER,
                                               idUnitChecker = c.ID_UNIT_CHECKER,
                                               idLevelChecker = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               nip = u.NIP,
                                               approvalStatus = c.APPROVAL_STATUS,
                                               ordernumber = c.ORDER_NUMBER,
                                               //idSekertaris = s.ID_SEKETARIS

                                           }).ToList();
                    var checkerPenerimaList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 5)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                 on c.ID_USER_CHECKER equals u.ID_USER
                                               //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                               select new OutputListCheckerMemoPenerima
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_CHECKER,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS,
                                                   ordernumber = c.ORDER_NUMBER,
                                                   //idSekertaris = s.ID_SEKETARIS

                                               }).ToList();
                    var checkerSekertarisList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter)
                                                 join j in db.tm_position
                                                         on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                                 join u in db.tm_user
                                                   on c.ID_USER_CHECKER equals u.ID_USER
                                                 join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                                 select new OutputListCheckerMemoSek
                                                 {
                                                     idChecker = c.ID_CHECKER,
                                                     idPositionChecker = c.ID_POSITION_CHECKER,
                                                     idUserChecker = c.ID_USER_CHECKER,
                                                     idUnitChecker = c.ID_UNIT_CHECKER,
                                                     idLevelChecker = c.ID_LEVEL_CHECKER,
                                                     positionName = j.POSITION_NAME,
                                                     fullname = u.FULLNAME,
                                                     nip = u.NIP,
                                                     approvalStatus = c.APPROVAL_STATUS,
                                                     ordernumber = c.ORDER_NUMBER,
                                                     idSekertaris = s.ID_SEKETARIS

                                                 }).ToList();



                    var approverListOne = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1 && p.IS_APPROVER !=4)
                                        join j in db.tm_position
                                                on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on c.ID_USER_CHECKER equals u.ID_USER
                                        select new OutputListApproverMemo
                                        {
                                            idApprover = c.ID_CHECKER,
                                            idPositionApprover = c.ID_POSITION_CHECKER,
                                            idUserApprover = c.ID_USER_CHECKER,
                                            idUnitApprover = c.ID_UNIT_CHECKER,
                                            idLevelApprover = c.ID_LEVEL_CHECKER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            approvalStatus = c.APPROVAL_STATUS
                                        }).ToList();
                    var approverListTwo = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 3)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                               on c.ID_USER_CHECKER equals u.ID_USER
                                           select new OutputListApproverMemo
                                           {
                                               idApprover = c.ID_CHECKER,
                                               idPositionApprover = c.ID_POSITION_CHECKER,
                                               idUserApprover = c.ID_USER_CHECKER,
                                               idUnitApprover = c.ID_UNIT_CHECKER,
                                               idLevelApprover = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               approvalStatus = c.APPROVAL_STATUS
                                           }).ToList();
                    var approverListAll = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER != 0 && p.IS_APPROVER != 2  && p.IS_APPROVER !=4 && p.IS_APPROVER !=5)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                               on c.ID_USER_CHECKER equals u.ID_USER
                                           select new OutputListApproverMemo
                                           {
                                               idApprover = c.ID_CHECKER,
                                               idPositionApprover = c.ID_POSITION_CHECKER,
                                               idUserApprover = c.ID_USER_CHECKER,
                                               idUnitApprover = c.ID_UNIT_CHECKER,
                                               idLevelApprover = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               approvalStatus = c.APPROVAL_STATUS
                                           }).ToList();
                    var NominalRows = (from a in db.tr_procurement.Where(p => p.ID_LETTER == pr.idLetter)
                                   join b in db.tm_procurement.Where(p => p.DELETE_STATUS != 1)
                                      on a.ID_PROCUREMENT equals b.ID
                                         select new OutputDetailNominalMemoPengadaan
                                         {
                                             idpr = a.ID_LETTER,
                                             nameProcurement = b.NAME,
                                             idprocurement=a.ID_PROCUREMENT,
                                             idletter = a.ID_LETTER,
                                             nominal=a.NOMINAL
                                         }).FirstOrDefault();
                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                         select new OutputDetailLetterContentMemo
                                         {
                                             idContent = a.ID_CONTENT,
                                             letterContent = a.LETTER_CONTENT,
                                             summary=a.SUMMARY
                                         }).FirstOrDefault();
                    var delibarationList = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter )
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputListDeliberationMemoModel
                                            {
                                                idLetter = c.ID_LETTER,
                                                idDeliberation = c.ID_DELIBERATION,
                                                idUser = c.ID_USER,
                                                idPosition = c.ID_POSITION,
                                                positionName = j.POSITION_NAME,
                                                fullname = u.FULLNAME,
                                                commentdlbrt = c.COMMENT,
                                                idUnit = d.ID_UNIT,
                                                statuscode = c.STATUS_CODE

                                            }).ToList();
                    var delibarationRows = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser)
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputDeliberationMemoModel
                                            {
                                                idLetter = c.ID_LETTER,
                                                idDeliberation = c.ID_DELIBERATION,
                                                idUser = c.ID_USER,
                                                idPosition = c.ID_POSITION,
                                                positionName = j.POSITION_NAME,
                                                fullname = u.FULLNAME,
                                                commentdlbrt = c.COMMENT,
                                                idUnit = d.ID_UNIT,
                                                statuscode = c.STATUS_CODE
                                            }).FirstOrDefault();
                    #region delegasi

                                        var checkerPengirimListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 0)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                   on c.ID_USER_DELEGASI equals u.ID_USER
                                               select new OutputListCheckerMemoPengirimDelg
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_DELEGASI,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS
                                               }).ToList();

                                        var checkerListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER ==2)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                   on c.ID_USER_DELEGASI equals u.ID_USER
                                               select new OutputListCheckerMemoDelg
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_DELEGASI,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS
                                               }).ToList();

                                        var checkerLainListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 4)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                 on c.ID_USER_DELEGASI equals u.ID_USER
                                               //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                               select new OutputListCheckerMemoLainyaDelg
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_DELEGASI,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS,
                                                   ordernumber = c.ORDER_NUMBER,
                                                   //idSekertaris = s.ID_SEKETARIS

                                               }).ToList();

                                        var checkerPenerimaListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 5)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                 on c.ID_USER_DELEGASI equals u.ID_USER
                                               //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                               select new OutputListCheckerMemoPenerimaDelg
                                               {
                                                   idChecker = c.ID_CHECKER,
                                                   idPositionChecker = c.ID_POSITION_CHECKER,
                                                   idUserChecker = c.ID_USER_DELEGASI,
                                                   idUnitChecker = c.ID_UNIT_CHECKER,
                                                   idLevelChecker = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   nip = u.NIP,
                                                   approvalStatus = c.APPROVAL_STATUS,
                                                   ordernumber = c.ORDER_NUMBER,
                                                   //idSekertaris = s.ID_SEKETARIS

                                               }).ToList();

                                        var approverListOneDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1 && p.IS_APPROVER !=4)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                   on c.ID_USER_DELEGASI equals u.ID_USER
                                               select new OutputListApproverMemoDelg
                                               {
                                                   idApprover = c.ID_CHECKER,
                                                   idPositionApprover = c.ID_POSITION_CHECKER,
                                                   idUserApprover = c.ID_USER_DELEGASI,
                                                   idUnitApprover = c.ID_UNIT_CHECKER,
                                                   idLevelApprover = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   approvalStatus = c.APPROVAL_STATUS
                                               }).ToList();

                                        var approverListTwoDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 3)
                                               join j in db.tm_position
                                                       on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                               join u in db.tm_user
                                                   on c.ID_USER_DELEGASI equals u.ID_USER
                                               select new OutputListApproverMemoDelg
                                               {
                                                   idApprover = c.ID_CHECKER,
                                                   idPositionApprover = c.ID_POSITION_CHECKER,
                                                   idUserApprover = c.ID_USER_DELEGASI,
                                                   idUnitApprover = c.ID_UNIT_CHECKER,
                                                   idLevelApprover = c.ID_LEVEL_CHECKER,
                                                   positionName = j.POSITION_NAME,
                                                   fullname = u.FULLNAME,
                                                   approvalStatus = c.APPROVAL_STATUS
                                               }).ToList();

                                        var delibarationListDelg = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                                join j in db.tm_position
                                                    on c.ID_POSITION equals j.ID_POSITION
                                                join u in db.tm_user
                                                    on c.ID_USER_DELEGASI equals u.ID_USER
                                                join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                select new OutputListDeliberationDelegasiMemoModel
                                                {
                                                    idLetter = c.ID_LETTER,
                                                    idDeliberation = c.ID_DELIBERATION,
                                                    idUser = c.ID_USER_DELEGASI,
                                                    idPosition = c.ID_POSITION,
                                                    positionName = j.POSITION_NAME,
                                                    fullname = u.FULLNAME,
                                                    commentdlbrt = c.COMMENT,
                                                    idUnit = d.ID_UNIT,
                                                    statuscode = c.STATUS_CODE

                                                }).ToList();
                    #endregion


                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.delibration = delibarationList;
                    letter.delibrationRow = delibarationRows;
                    letter.ApproverOne = approverListOne;
                    letter.ApproverTwo = approverListTwo;
                    letter.ApproverListAllPd = approverListAll;
                    letter.Nominal = NominalRows;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;
                    letter.sender = senderList;
                    letter.checker = checkerList;
                    letter.checkerlain = checkerLainList;
                    //letter.outgoingRecipient = outgoingRecipientList;
                    letter.letterContent = letterContent;
                    letter.checkerPengirim = checkerPengirimList;
                    letter.checkerPenerima = checkerPenerimaList;
                    letter.checkerSekertaris = checkerSekertarisList;
                    //delegasi
                    letter.checkerPengirimDelg = checkerPengirimListDelg;
                    letter.checkerDelg = checkerListDelg;
                    letter.checkerlainDelg = checkerLainListDelg;
                    letter.checkerPenerimaDelg = checkerPenerimaListDelg;

                    letter.ApproverOneDelg = approverListOneDelg;
                    letter.ApproverTwoDelg = approverListTwoDelg;

                    letter.delibrationDelegasi = delibarationListDelg;


                    //update status baca
                    if (pr.lettertype !="55")
                    {
                        var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                        if (tblStatus != null)
                        {
                            tblStatus.READ_STATUS = 0;
                            tblStatus.MODIFIED_ON = DateTime.Now;
                            tblStatus.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }
                    
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Memo";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail Memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetAllDwopdownAdminPengadaan(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputSuperUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                unitName = u.UNIT_NAME,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi PGA";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDataAdminPengadaanWeb(SessionUser sessionUser, ParamGetUsertWeb pr)
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from tu in db.tm_user.Where(p => p.ID_GROUP == "P").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                                   join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                                   on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                                   join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                            on tu.ID_POSITION equals tp.ID_POSITION
                                   join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                                            on tp.ID_UNIT equals u.ID_UNIT
                                   select new DataOuputAdminPengadaan
                                   {
                                       Iduser = tu.ID_USER,
                                       Nip = tu.NIP,
                                       Fullname = tu.FULLNAME,
                                       unitName = u.UNIT_NAME,
                                       Position_Name = tp.POSITION_NAME

                                   }).AsQueryable();

                recordsTotal = getDocument.Count();

                //search data when search value found
                if (!string.IsNullOrEmpty(pr.searchValue))
                {
                    getDocument = getDocument.Where(x =>
                                    x.Nip.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Fullname.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.unitName.ToLower().Contains(pr.searchValue.ToLower()) ||
                                    x.Position_Name.ToLower().Contains(pr.searchValue.ToLower()));
                }
                filterRecord = getDocument.Count();
                //sort data
                if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                {
                    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                }
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                AdminPengadaanOutputWeb result = new AdminPengadaanOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdateDataAdminPengadaan(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_GROUP = "P";
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel DeleteDataAdminPengadaan(ParamGetDetailUser pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtDocument = db.tm_user.Where(p => p.ID_USER == pr.Iduser).FirstOrDefault();
                dtDocument.ID_GROUP = "U";
                dtDocument.MODIFIED_ON = DateTime.Now;
                dtDocument.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();


                output.Status = "OK";
                output.Result = dtDocument;
                output.Message = "Success Update setting user";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetAllDwopdownSetPengadaan(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            //join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputSuperUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                unitName = u.UNIT_NAME,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi PGA";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDataSetPengadaanWeb(SessionUser sessionUser, ParamGetUsertWeb pr)
        {
            try
            {
              
              
                
                GeneralOutputModel output = new GeneralOutputModel();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
            
                var getDocument = (from tpro in db.tm_procurement.OrderBy(p => p.ID)
                                   join tu1 in db.tm_user
                                   on tpro.APPROVER equals tu1.ID_USER.ToString() into a1
                                   from a in a1.DefaultIfEmpty()
                                   join tu2 in db.tm_user
                                   on tpro.APPROVER2 equals tu2.ID_USER.ToString() into a2
                                   from b in a2.DefaultIfEmpty()
                                   join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on a.ID_POSITION equals tp1.ID_POSITION into t1
                                   from aa in t1.DefaultIfEmpty()
                                   join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on b.ID_POSITION equals tp2.ID_POSITION into t2
                                   from bb in t2.DefaultIfEmpty()
                                   join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1 )
                                   on aa.ID_UNIT equals u1.ID_UNIT into z1
                                   from aaa in z1.DefaultIfEmpty()
                                   join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1 )
                                    on bb.ID_UNIT equals u2.ID_UNIT into z2
                                   from bbb in z2.DefaultIfEmpty()

                                   select new DataOuputSetPengadaan
                                   {
                                       Id = tpro.ID,
                                       NAME_PENGADAAN = tpro.NAME,
                                       APPROVER = tpro.APPROVER,
                                       APPROVER2 = tpro.APPROVER2,
                                       APPROVER_NAME = a.NIP + " - " + a.FULLNAME + " - " + aa.POSITION_NAME,
                                       APPROVER2_NAME = b.NIP + " - " + b.FULLNAME + " - " + bb.POSITION_NAME,
                                       POSITION1 = aa.POSITION_NAME,
                                       POSITION2 = bb.POSITION_NAME,
                                       JABATAN1 = aaa.UNIT_NAME,
                                       JABATAN2 = bbb.UNIT_NAME,
                                       MIN_NOMINAL = Convert.ToString(tpro.MIN_NOMINAL),
                                       MAX_NOMINAL = Convert.ToString(tpro.MAX_NOMINAL),
                                       STATUS = tpro.STATUS_APPROVE == 0 ? "Waiting For Approval" : "Approved",
                                       STATUS_APPROVAL = tpro.STATUS_APPROVE,
                                   }).ToList();

                recordsTotal = getDocument.Count();

                //search data when search value found
                //if (!string.IsNullOrEmpty(pr.searchValue))
                //{
                //    getDocument = getDocument.Where(x =>
                //                    x.Approver.ToLower().Contains(pr.searchValue.ToLower()) ||
                //                    x.Approver2.ToLower().Contains(pr.searchValue.ToLower()) ||
                //                    x.Min_Nominal.ToLower().Contains(pr.searchValue.ToLower()) ||
                //                    x.Max_Nominal.ToLower().Contains(pr.searchValue.ToLower()));
                //}
                filterRecord = getDocument.Count();
                //sort data
                //if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                //{
                //    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                //    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                //}
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                SetPengadaanOutputWeb result = new SetPengadaanOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel InsertDataPengadaan(ParamInsertPengadaan pr, SessionUser sessionUser)
        {
            try
            {
             
                if (pr.Id.ToString() == "00000000-0000-0000-0000-000000000000" || pr.Id == null)
                {

                    Tm_Procurement_Table pengadaan = new Tm_Procurement_Table();
                    pengadaan.NAME = pr.name;
                    pengadaan.MIN_NOMINAL = Convert.ToDecimal(pr.min_nominal);
                    pengadaan.MAX_NOMINAL = Convert.ToDecimal(pr.max_nominal);
                    pengadaan.APPROVER = pr.approver1;
                    pengadaan.APPROVER2 = pr.approver2 != null ? pr.approver2 : null;
                    pengadaan.CREATED_ON = DateTime.Now;
                    pengadaan.CREATED_BY = sessionUser.idUser;
                    pengadaan.MODIFIED_ON = DateTime.Now;
                    pengadaan.MODIFIED_BY = sessionUser.idUser;

                    db.tm_procurement.Add(pengadaan);
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Message = "Berhasil menambahkan Pengadaan";
                    return output;
                }
                else
                {
                    var pengadaan = db.tm_procurement.Where(p => p.ID == pr.Id).FirstOrDefault();
                    pengadaan.STATUS_APPROVE = 0;
                    pengadaan.MODIFIED_ON = DateTime.Now;
                    pengadaan.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    Tm_Procurement_Detail_Table detail_pengadaan = new Tm_Procurement_Detail_Table();
                    detail_pengadaan.ID_PRODCUREMENT = pr.Id;                    
                    detail_pengadaan.NAME = pr.name;
                    detail_pengadaan.MIN_NOMINAL = Convert.ToDecimal(pr.min_nominal);
                    detail_pengadaan.MAX_NOMINAL = Convert.ToDecimal(pr.max_nominal);
                    detail_pengadaan.APPROVER = pr.approver1;
                    detail_pengadaan.APPROVER2 = pr.approver2 != null ? pr.approver2 : null;
                    detail_pengadaan.CREATED_ON = DateTime.Now;
                    detail_pengadaan.CREATED_BY = sessionUser.idUser;

                    db.tm_procurement_detail.Add(detail_pengadaan);
                    db.SaveChanges();

                  

                    output.Status = "OK";
                    output.Message = "Berhasil Mengedit Pengadaan";
                    return output;
                }


            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();
                return output;
            }
        }


        public GeneralOutputModel GetAllDwopdownSetDelegasi(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tu in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H").OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_user" && p.ATTRIBUTENAME == "STATUS_CODE")
                            on tu.STATUS_CODE equals st.ATTRIBUTEVALUE
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                     on tu.ID_POSITION equals tp.ID_POSITION
                            join u in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE != "CFO" || p.UNIT_CODE != "DCM" || p.UNIT_CODE != "DNC" || p.UNIT_CODE != "CEO" || p.UNIT_CODE != "BOD" || p.UNIT_CODE != "KOM" || p.UNIT_CODE != "DPS"|| p.UNIT_CODE !="DIR-01"|| p.UNIT_CODE !="DIR-02"|| p.UNIT_CODE !="DIR-03" || p.UNIT_CODE!="DIR-05")
                            on tp.ID_UNIT equals u.ID_UNIT
                            select new DataOuputSuperUser
                            {
                                Iduser = tu.ID_USER,
                                Nip = tu.NIP,
                                Fullname = tu.FULLNAME,
                                unitName = u.UNIT_NAME,
                                Position_Name = tp.POSITION_NAME
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get all divisi PGA";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetAllDataSetDelegasiWeb(SessionUser sessionUser, ParamGetUsertWeb pr)
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                int skip = pr.start != null ? Convert.ToInt32(pr.start) : 0;
                int recordsTotal = 0;
                int filterRecord = 0;
                var getDocument = (from trd in db.tr_delegasi.Where(p => p.ID_USER == sessionUser.idUser).OrderBy(p => p.ID)
                                   join tu1 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                                   on trd.ID_USER equals tu1.ID_USER
                                   join tu2 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                                   on trd.ID_USER_DELEGASI equals tu2.ID_USER
                                   join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on tu1.ID_POSITION equals tp1.ID_POSITION
                                   join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on tu2.ID_POSITION equals tp2.ID_POSITION
                                   join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                   on tp1.ID_UNIT equals u1.ID_UNIT
                                   join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                   on tp2.ID_UNIT equals u2.ID_UNIT

                                   select new DataOuputSetDelegasi
                                   {
                                       Id = trd.ID,
                                       id_user = trd.ID_USER,
                                       id_user_delegasi = trd.ID_USER_DELEGASI,
                                       user_name = tu1.NIP + " - " + tu1.FULLNAME + " - " + tp1.POSITION_NAME,
                                       user_name_delegasi = tu2.NIP + " - " + tu2.FULLNAME + " - " + tp2.POSITION_NAME,
                                       POSITION = tp1.POSITION_NAME,
                                       POSITION_DELEGASI = tp2.POSITION_NAME,
                                       JABATAN = u1.UNIT_NAME,
                                       JABATAN_DELEGASI = u2.UNIT_NAME,
                                       startdate = trd.STARTDATE,
                                       enddate = trd.ENDDATE,
                                       startdatestring = Convert.ToDateTime(trd.STARTDATE).ToString("dd-MM-yyyy"),
                                       enddatestring = Convert.ToDateTime(trd.ENDDATE).ToString("dd-MM-yyyy"),

                                       Status_approver = (trd.STATUS_APPROVER == 0 ? "Waiting" : "Approved"),
                                   }).ToList();

                recordsTotal = getDocument.Count();

                //search data when search value found
                //if (!string.IsNullOrEmpty(pr.searchValue))
                //{
                //    getDocument = getDocument.Where(x =>
                //                    x.Approver.ToLower().Contains(pr.searchValue.ToLower()) ||
                //                    x.Approver2.ToLower().Contains(pr.searchValue.ToLower()) ||
                //                    x.Min_Nominal.ToLower().Contains(pr.searchValue.ToLower()) ||
                //                    x.Max_Nominal.ToLower().Contains(pr.searchValue.ToLower()));
                //}
                filterRecord = getDocument.Count();
                //sort data
                //if (!string.IsNullOrEmpty(pr.sortColumn) && !string.IsNullOrEmpty(pr.sortColumnDirection))
                //{
                //    bool isAscending = pr.sortColumnDirection == "asc" ? true : false;
                //    getDocument = LinqHelper.OrderBys(getDocument, pr.sortColumn, isAscending);
                //}
                var DocumentFinal = getDocument.Skip(skip).Take(pr.pageSize).ToList();

                SetDelegasiOutputWeb result = new SetDelegasiOutputWeb();
                result.draw = pr.draw;
                result.recordsTotal = recordsTotal;
                result.recordsFiltered = filterRecord;
                result.data = DocumentFinal;

                output.Status = "OK";
                output.Result = result;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel InsertDataDelegasi(ParamInsertDelegasi pr, SessionUser sessionUser)
        {
            try
            {


                if (pr.Id.ToString() == "00000000-0000-0000-0000-000000000000" || pr.Id == null)
                {

                    Tr_Delegasi_Table delegasi = new Tr_Delegasi_Table();
                    delegasi.ID_USER = sessionUser.idUser;
                    delegasi.ID_USER_DELEGASI = pr.Id_user_delegasi;
                    delegasi.STARTDATE = pr.StartDate;
                    delegasi.ENDDATE = pr.EndDate;
                    delegasi.STATUS_APPROVER = 0;
                    delegasi.CREATED_ON = DateTime.Now;
                    delegasi.CREATED_BY = sessionUser.idUser;
                    delegasi.MODIFIED_ON = DateTime.Now;
                    delegasi.MODIFIED_BY = sessionUser.idUser;

                    db.tr_delegasi.Add(delegasi);
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Message = "Berhasil menambahkan Delegasi";
                    return output;
                }
                else
                {
                    var delegasi = db.tr_delegasi.Where(p => p.ID == pr.Id).FirstOrDefault();
                    //Tm_Procurement_Table pengadaan = new Tm_Procurement_Table();
                    delegasi.ID_USER = pr.Id_user;
                    delegasi.ID_USER_DELEGASI = pr.Id_user_delegasi;
                    delegasi.STARTDATE = pr.StartDate;
                    delegasi.ENDDATE = pr.EndDate;
                    delegasi.STATUS_APPROVER = 0;
                    delegasi.CREATED_ON = DateTime.Now;
                    delegasi.CREATED_BY = sessionUser.idUser;
                    delegasi.MODIFIED_ON = DateTime.Now;
                    delegasi.MODIFIED_BY = sessionUser.idUser;

                    db.SaveChanges();

                    output.Status = "OK";
                    output.Message = "Berhasil Mengedit Delegasi";
                    return output;
                }


            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();
                return output;
            }
        }


        public GeneralOutputModel GetDataPengadaanAll(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                //var data = (from tpro in db.tm_procurement.Where(p => p.STATUS_APPROVE == 0).OrderBy(p => p.ID)
                //            join tu1 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                //            on tpro.APPROVER equals tu1.ID_USER.ToString()
                //            join tu2 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                //            on tpro.APPROVER2 equals tu2.ID_USER.ToString()
                //            join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                //            on tu1.ID_POSITION equals tp1.ID_POSITION
                //            join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                //            on tu2.ID_POSITION equals tp2.ID_POSITION
                //            //join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                //            join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                //            on tp1.ID_UNIT equals u1.ID_UNIT
                //            //join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                //            join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                //             on tp2.ID_UNIT equals u2.ID_UNIT

                //            select new DataOuputSetPengadaan
                //            {
                //                Id = tpro.ID,
                //                NAME_PENGADAAN = tpro.NAME,
                //                APPROVER = tpro.APPROVER,
                //                APPROVER2 = tpro.APPROVER2,
                //                APPROVER_NAME = tu1.NIP + " - " + tu1.FULLNAME + " - " + tp1.POSITION_NAME,
                //                APPROVER2_NAME = tu2.NIP + " - " + tu2.FULLNAME + " - " + tp2.POSITION_NAME,
                //                POSITION1 = tp1.POSITION_NAME,
                //                POSITION2 = tp2.POSITION_NAME,
                //                JABATAN1 = u1.UNIT_NAME,
                //                JABATAN2 = u2.UNIT_NAME,
                //                MIN_NOMINAL = Convert.ToString(tpro.MIN_NOMINAL),
                //                MAX_NOMINAL = Convert.ToString(tpro.MAX_NOMINAL),
                //                STATUS = tpro.STATUS_APPROVE == 0 ? "Waiting For Approval" : "Approved",
                //                STATUS_APPROVAL = tpro.STATUS_APPROVE,



                //            }).ToList();


                var data = (from tpro in db.tm_procurement.Where(p => p.STATUS_APPROVE == 0).OrderBy(p => p.ID)
                                   join tu1 in db.tm_user
                                   on tpro.APPROVER equals tu1.ID_USER.ToString() into a1
                                   from a in a1.DefaultIfEmpty()
                                   join tu2 in db.tm_user
                                   on tpro.APPROVER2 equals tu2.ID_USER.ToString() into a2
                                   from b in a2.DefaultIfEmpty()
                                   join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on a.ID_POSITION equals tp1.ID_POSITION into t1
                                   from aa in t1.DefaultIfEmpty()
                                   join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on b.ID_POSITION equals tp2.ID_POSITION into t2
                                   from bb in t2.DefaultIfEmpty()
                                   join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                   on aa.ID_UNIT equals u1.ID_UNIT into z1
                                   from aaa in z1.DefaultIfEmpty()
                                   join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                    on bb.ID_UNIT equals u2.ID_UNIT into z2
                                   from bbb in z2.DefaultIfEmpty()

                                   select new DataOuputSetPengadaan
                                   {
                                       Id = tpro.ID,
                                       NAME_PENGADAAN = tpro.NAME,
                                       APPROVER = tpro.APPROVER,
                                       APPROVER2 = tpro.APPROVER2,
                                       APPROVER_NAME = a.NIP + " - " + a.FULLNAME + " - " + aa.POSITION_NAME,
                                       APPROVER2_NAME = b.NIP + " - " + b.FULLNAME + " - " + bb.POSITION_NAME,
                                       POSITION1 = aa.POSITION_NAME,
                                       POSITION2 = bb.POSITION_NAME,
                                       JABATAN1 = aaa.UNIT_NAME,
                                       JABATAN2 = bbb.UNIT_NAME,
                                       MIN_NOMINAL = Convert.ToString(tpro.MIN_NOMINAL),
                                       MAX_NOMINAL = Convert.ToString(tpro.MAX_NOMINAL),
                                       STATUS = tpro.STATUS_APPROVE == 0 ? "Waiting For Approval" : "Approved",
                                       STATUS_APPROVAL = tpro.STATUS_APPROVE,
                                   }).ToList();

                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDataPengadaanApproval(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                //var data = (from tpro in db.tm_procurement.Where(p => p.STATUS_APPROVE == 1).OrderBy(p => p.ID)
                //            join tu1 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                //            on tpro.APPROVER equals tu1.ID_USER.ToString()
                //            join tu2 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                //            on tpro.APPROVER2 equals tu2.ID_USER.ToString()
                //            join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                //            on tu1.ID_POSITION equals tp1.ID_POSITION
                //            join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                //            on tu2.ID_POSITION equals tp2.ID_POSITION
                //            //join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                //            join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                //            on tp1.ID_UNIT equals u1.ID_UNIT
                //            join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                //            //join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                //             on tp2.ID_UNIT equals u2.ID_UNIT

                //            select new DataOuputSetPengadaan
                //            {
                //                Id = tpro.ID,
                //                NAME_PENGADAAN = tpro.NAME,
                //                APPROVER = tpro.APPROVER,
                //                APPROVER2 = tpro.APPROVER2,
                //                APPROVER_NAME = tu1.NIP + " - " + tu1.FULLNAME + " - " + tp1.POSITION_NAME,
                //                APPROVER2_NAME = tu2.NIP + " - " + tu2.FULLNAME + " - " + tp2.POSITION_NAME,
                //                POSITION1 = tp1.POSITION_NAME,
                //                POSITION2 = tp2.POSITION_NAME,
                //                JABATAN1 = u1.UNIT_NAME,
                //                JABATAN2 = u2.UNIT_NAME,
                //                MIN_NOMINAL = Convert.ToString(tpro.MIN_NOMINAL),
                //                MAX_NOMINAL = Convert.ToString(tpro.MAX_NOMINAL),
                //                STATUS = tpro.STATUS_APPROVE == 0 ? "Waiting For Approval" : "Approved",
                //                STATUS_APPROVAL = tpro.STATUS_APPROVE,

                //            }).ToList();

                var data = (from tpro in db.tm_procurement.Where(p => p.STATUS_APPROVE != 0).OrderBy(p => p.ID)
                                   join tu1 in db.tm_user
                                   on tpro.APPROVER equals tu1.ID_USER.ToString() into a1
                                   from a in a1.DefaultIfEmpty()
                                   join tu2 in db.tm_user
                                   on tpro.APPROVER2 equals tu2.ID_USER.ToString() into a2
                                   from b in a2.DefaultIfEmpty()
                                   join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on a.ID_POSITION equals tp1.ID_POSITION into t1
                                   from aa in t1.DefaultIfEmpty()
                                   join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on b.ID_POSITION equals tp2.ID_POSITION into t2
                                   from bb in t2.DefaultIfEmpty()
                                   join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                   on aa.ID_UNIT equals u1.ID_UNIT into z1
                                   from aaa in z1.DefaultIfEmpty()
                                   join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                    on bb.ID_UNIT equals u2.ID_UNIT into z2
                                   from bbb in z2.DefaultIfEmpty()

                                   select new DataOuputSetPengadaan
                                   {
                                       Id = tpro.ID,
                                       NAME_PENGADAAN = tpro.NAME,
                                       APPROVER = tpro.APPROVER,
                                       APPROVER2 = tpro.APPROVER2,
                                       APPROVER_NAME = a.NIP + " - " + a.FULLNAME + " - " + aa.POSITION_NAME,
                                       APPROVER2_NAME = b.NIP + " - " + b.FULLNAME + " - " + bb.POSITION_NAME,
                                       POSITION1 = aa.POSITION_NAME,
                                       POSITION2 = bb.POSITION_NAME,
                                       JABATAN1 = aaa.UNIT_NAME,
                                       JABATAN2 = bbb.UNIT_NAME,
                                       MIN_NOMINAL = Convert.ToString(tpro.MIN_NOMINAL),
                                       MAX_NOMINAL = Convert.ToString(tpro.MAX_NOMINAL),
                                       STATUS = tpro.STATUS_APPROVE == 0 ? "Waiting For Approval" : "Approved",
                                       STATUS_APPROVAL = tpro.STATUS_APPROVE,
                                   }).ToList();

                output.Status = "OK";
                output.Result = data;
                output.Message = "Success Approval Pengadaan";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel ApprovalJenisPengadaan(ParamJsonStirngPengadaan pr, SessionUser sessionUser)
        {
            try
            {
                var data = JsonConvert.DeserializeObject<List<ParamGetApprovalPengadaan>>(pr.jsonDataString);
                GeneralOutputModel output = new GeneralOutputModel();
                foreach (var item in data)
                {
                    var dtDocument = db.tm_procurement.Where(p => p.ID == item.Id).FirstOrDefault();
                    var dtDocument_deltail = db.tm_procurement_detail.Where(p => p.ID_PRODCUREMENT == item.Id).FirstOrDefault();
                    var detailcount = db.tm_procurement_detail.Where(p => p.ID_PRODCUREMENT == item.Id).ToList().Count();
                    if (detailcount == null || detailcount <= 0)
                    {
                        dtDocument.STATUS_APPROVE = 1;
                        dtDocument.MODIFIED_ON = DateTime.Now;
                        dtDocument.MODIFIED_BY = sessionUser.idUser;
                        db.SaveChanges();
                    }
                    else
                    {
                        dtDocument.STATUS_APPROVE = 1;
                        dtDocument.NAME = dtDocument_deltail.NAME;
                        dtDocument.MIN_NOMINAL = dtDocument_deltail.MIN_NOMINAL;
                        dtDocument.MAX_NOMINAL = dtDocument_deltail.MAX_NOMINAL;
                        dtDocument.APPROVER = dtDocument_deltail.APPROVER;
                        dtDocument.APPROVER2 = dtDocument_deltail.APPROVER2;
                        dtDocument.MODIFIED_ON = DateTime.Now;
                        dtDocument.MODIFIED_BY = sessionUser.idUser;
                        db.SaveChanges();
                    }
                  
                    if (dtDocument_deltail != null)
                    {
                        db.tm_procurement_detail.Remove(dtDocument_deltail);
                        db.SaveChanges();
                    }

                 
                            
                }

                if (data.Count > 0)
                {
                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Success Update setting user";
                    return output;
                }
                else
                {
                    output.Status = "NG";
                    output.Result = data;
                    output.Message = "Gagal";
                    return output;
                }
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


  
       public GeneralOutputModel GetDataPengadaanView(ParamGetPengadaanView pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tpro in db.tm_procurement_detail.Where(p => p.ID_PRODCUREMENT == pr.Id).OrderBy(p => p.ID_PRODCUREMENT)
                            join tu1 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                            on tpro.APPROVER equals tu1.ID_USER.ToString()
                            join tu2 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                            on tpro.APPROVER2 equals tu2.ID_USER.ToString()
                            join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                            on tu1.ID_POSITION equals tp1.ID_POSITION
                            join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                            on tu2.ID_POSITION equals tp2.ID_POSITION
                            //join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                            join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            on tp1.ID_UNIT equals u1.ID_UNIT
                            //join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.UNIT_CODE == "PGA")
                            join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                             on tp2.ID_UNIT equals u2.ID_UNIT

                            select new DataOuputSetPengadaan
                            {
                                Id = tpro.ID_PRODCUREMENT,
                                NAME_PENGADAAN = tpro.NAME,
                                APPROVER = tpro.APPROVER,
                                APPROVER2 = tpro.APPROVER2,
                                APPROVER_NAME = tu1.NIP + " - " + tu1.FULLNAME + " - " + tp1.POSITION_NAME,
                                APPROVER2_NAME = tu2.NIP + " - " + tu2.FULLNAME + " - " + tp2.POSITION_NAME,
                                POSITION1 = tp1.POSITION_NAME,
                                POSITION2 = tp2.POSITION_NAME,
                                JABATAN1 = u1.UNIT_NAME,
                                JABATAN2 = u2.UNIT_NAME,
                                MIN_NOMINAL = Convert.ToString(tpro.MIN_NOMINAL),
                                MAX_NOMINAL = Convert.ToString(tpro.MAX_NOMINAL),
                             



                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetDataDelegasi(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from trd in db.tr_delegasi.Where(p => p.STATUS_APPROVER == 0).OrderBy(p => p.ID)
                                   join tu1 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                                   on trd.ID_USER equals tu1.ID_USER
                                   join tu2 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                                   on trd.ID_USER_DELEGASI equals tu2.ID_USER
                                   join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on tu1.ID_POSITION equals tp1.ID_POSITION
                                   join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                   on tu2.ID_POSITION equals tp2.ID_POSITION
                                   join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                   on tp1.ID_UNIT equals u1.ID_UNIT
                                   join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                                   on tp2.ID_UNIT equals u2.ID_UNIT

                                   select new DataOuputSetDelegasi
                                   {
                                       Id = trd.ID,
                                       id_user = trd.ID_USER,
                                       id_user_delegasi = trd.ID_USER_DELEGASI,
                                       user_name = tu1.NIP + " - " + tu1.FULLNAME + " - " + tp1.POSITION_NAME,
                                       user_name_delegasi = tu2.NIP + " - " + tu2.FULLNAME + " - " + tp2.POSITION_NAME,
                                       POSITION = tp1.POSITION_NAME,
                                       POSITION_DELEGASI = tp2.POSITION_NAME,
                                       JABATAN = u1.UNIT_NAME,
                                       JABATAN_DELEGASI = u2.UNIT_NAME,
                                       startdate = trd.STARTDATE,
                                       enddate = trd.ENDDATE,
                                       startdatestring = Convert.ToDateTime(trd.STARTDATE).ToString("dd-MM-yyyy"),
                                       enddatestring = Convert.ToDateTime(trd.ENDDATE).ToString("dd-MM-yyyy"),
                                       Status_approver = (trd.STATUS_APPROVER == 0 ? "Waiting" : "Approved"),
                                   }).ToList();               
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDataDelegasiApproval(SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from trd in db.tr_delegasi.Where(p => p.STATUS_APPROVER != 0).OrderBy(p => p.ID)
                            join tu1 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                            on trd.ID_USER equals tu1.ID_USER
                            join tu2 in db.tm_user.Where(p => p.STATUS_CODE == 1 && p.ID_GROUP != "H")
                            on trd.ID_USER_DELEGASI equals tu2.ID_USER
                            join tp1 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                            on tu1.ID_POSITION equals tp1.ID_POSITION
                            join tp2 in db.tm_position.Where(p => p.STATUS_CODE == 1)
                            on tu2.ID_POSITION equals tp2.ID_POSITION
                            join u1 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            on tp1.ID_UNIT equals u1.ID_UNIT
                            join u2 in db.tm_unit.Where(p => p.STATUS_CODE == 1)
                            on tp2.ID_UNIT equals u2.ID_UNIT

                            select new DataOuputSetDelegasi
                            {
                                Id = trd.ID,
                                id_user = trd.ID_USER,
                                id_user_delegasi = trd.ID_USER_DELEGASI,
                                user_name = tu1.NIP + " - " + tu1.FULLNAME + " - " + tp1.POSITION_NAME,
                                user_name_delegasi = tu2.NIP + " - " + tu2.FULLNAME + " - " + tp2.POSITION_NAME,
                                POSITION = tp1.POSITION_NAME,
                                POSITION_DELEGASI = tp2.POSITION_NAME,
                                JABATAN = u1.UNIT_NAME,
                                JABATAN_DELEGASI = u2.UNIT_NAME,
                                startdate = trd.STARTDATE,
                                enddate = trd.ENDDATE,
                                startdatestring = Convert.ToDateTime(trd.STARTDATE).ToString("dd-MM-yyyy"),
                                enddatestring = Convert.ToDateTime(trd.ENDDATE).ToString("dd-MM-yyyy"),
                                Status_approver = (trd.STATUS_APPROVER == 0 ? "Waiting" : "Approved"),
                            }).ToList();
                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get data signature user";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel ApprovalDelegasiUser(ParamJsonStirngDelegasi pr, SessionUser sessionUser)
        {
            try
            {
                var data = JsonConvert.DeserializeObject<List<ParamGetApprovalDelegasi>>(pr.jsonDataString);
                GeneralOutputModel output = new GeneralOutputModel();
                foreach (var item in data)
                {
                    var dtDocument = db.tr_delegasi.Where(p => p.ID == item.Id).FirstOrDefault();
                  
                        dtDocument.STATUS_APPROVER = 1;
                        dtDocument.MODIFIED_ON = DateTime.Now;
                        dtDocument.MODIFIED_BY = sessionUser.idUser;                   
                        db.SaveChanges();

                    Tr_Notifikasi_Table notifikasi = new Tr_Notifikasi_Table();
                    notifikasi.ID_LETTER = dtDocument.ID;
                    notifikasi.STATUS_DOC = "DELEGASI";
                    notifikasi.ID_USER = dtDocument.CREATED_BY;
                    notifikasi.ID_USER_APPROVAL = sessionUser.idUser;
                    notifikasi.NOTIFIKASI = "Permintaan Delegasi " + dtDocument.STARTDATE + " - " + dtDocument.ENDDATE + " Telah Disetujui Oleh " + sessionUser.nama;
                    notifikasi.CREATED_ON = DateTime.Now;
                    notifikasi.STATUS_READ = 0;
                    db.tr_notifikasi.Add(notifikasi);
                    db.SaveChanges();


                }

                if (data.Count > 0)
                {
                    output.Status = "OK";
                    output.Result = data;
                    output.Message = "Success Update setting user";
                    return output;
                }
                else
                {
                    output.Status = "NG";
                    output.Result = data;
                    output.Message = "Gagal";
                    return output;
                }
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel ApprovalMemoPengadaan_(ParamApprovalLetterMemo pr, SessionUser sessionUser)
        {
            try
            {
                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                //update pemeriksa
                var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ID_USER_CHECKER == sessionUser.idUser && p.ID_POSITION_CHECKER == sessionUser.idPosition && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                if (dtChecker == null && sessionUser.idGroup == "S")
                {
                    var dtlSekre = (from u in db.tm_user.Where(p => p.ID_USER == sessionUser.idUser)
                                    join s in db.tr_setingseketaris
                                        on u.ID_USER equals s.ID_SEKETARIS
                                    select new SessionUser
                                    {
                                        idUser = s.ID_DIRKOM,
                                        idPosition = s.ID_POSITION_DIRKOM
                                    }).ToList();
                    List<Guid> ListDir = new List<Guid>();
                    List<Guid> ListDir2 = new List<Guid>();
                    foreach (var item in dtlSekre)
                    {
                        ListDir.Add(item.idUser);
                        ListDir2.Add(item.idPosition);
                    }
                    dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && ListDir.Contains(p.ID_USER_CHECKER) && ListDir2.Contains(p.ID_POSITION_CHECKER) && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                }
                if (dtChecker == null && sessionUser.idGroup != "S")
                {
                    var dtDelg = (from u in db.tr_checker.Where(p => p.ID_USER_DELEGASI == sessionUser.idUser)
                                  select new
                                  {
                                      u.ID_USER_CHECKER,
                                      u.ID_POSITION_CHECKER
                                  }).FirstOrDefault();
                    dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ID_USER_CHECKER == dtDelg.ID_USER_CHECKER && p.ID_POSITION_CHECKER == dtDelg.ID_POSITION_CHECKER && p.APPROVAL_STATUS == 'Y').FirstOrDefault();
                }
                dtChecker.APPROVAL_STATUS = 'Z';
                dtChecker.MODIFIED_ON = DateTime.Now;
                dtChecker.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();

                if (pr.saveType == 4)//diapprove
                {
                    int nextNumberPemeriksa = dtChecker.ORDER_NUMBER + 1;
                    var dtCheckerElse = db.tr_checker.Where(p => p.APPROVAL_STATUS == 'Y' && p.ORDER_NUMBER == dtChecker.ORDER_NUMBER && p.ID_LETTER == idLetter).FirstOrDefault();
                    var dtNextChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.ORDER_NUMBER == nextNumberPemeriksa).ToList();
                    if (dtNextChecker.Count() > 0 && dtCheckerElse == null)
                    {
                        foreach (var item in dtNextChecker)
                        {
                            var detailNextChecker = db.tr_checker.Where(p => p.ID_CHECKER == item.ID_CHECKER).FirstOrDefault();
                            detailNextChecker.APPROVAL_STATUS = 'Y';
                            detailNextChecker.MODIFIED_ON = DateTime.Now;
                            detailNextChecker.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                        nextApproval = 1;
                    }
                    if (dtCheckerElse != null)
                    {
                        nextApproval = 1;
                    }




                }
                //update surat
                var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                if (nextApproval == 0 && pr.saveType == 4)
                {
                    
                    var dtTypeMemo = db.tr_memo_type.Where(p => p.ID_MEMO_TYPE == dtLetter.MEMO_TYPE_ID).FirstOrDefault();
                    noLetter = GenerateNoMemo("Memo", sessionUser, idLetter, false, DateTime.Now, dtTypeMemo.MEMO_TYPE_CODE,dtTypeMemo.ID_MEMO_TYPE);
                    dtLetter.LETTER_DATE = DateTime.Now;
                }
                dtLetter.LETTER_NUMBER = noLetter;
                if ((nextApproval == 0 && pr.saveType == 4) || pr.saveType == 5)
                {
                    dtLetter.STATUS_CODE = pr.saveType;
                }
                dtLetter.MODIFIED_ON = DateTime.Now;
                dtLetter.MODIFIED_BY = sessionUser.idUser;

                db.SaveChanges();


                //var dtUser = db.tr_deliberation.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();

                //if (dtUser != null)
                //{
                //    //dtUser.COMMENT = pr.commentdlbrt;
                //    dtUser.STATUS_CODE = 2;
                //    db.SaveChanges();
                //}
                var ChekApproval = db.tr_checker.Where(p => p.ID_LETTER == idLetter && p.IS_APPROVER == 1 && p.APPROVAL_STATUS !='Z').ToList().Count();
                if(ChekApproval == 0)
                {
                    var value = db.tr_deliberation.Where(p => p.ID_LETTER == idLetter).ToList();

                    foreach (var item in value)
                    {
                        var ValueTrDlb = db.tr_deliberation.Where(p => p.ID_LETTER == item.ID_LETTER && p.ID_USER == item.ID_USER && p.STATUS_CODE ==1).ToList();
                            if (ValueTrDlb.Count > 0)
                            {
                               var data = db.tr_deliberation.Where(p => p.ID_LETTER == item.ID_LETTER && p.ID_USER == item.ID_USER && p.STATUS_CODE ==1).FirstOrDefault();
                                data.STATUS_CODE = 2;
                                db.SaveChanges();


                                Tr_Notifikasi_Table notifikasi2 = new Tr_Notifikasi_Table();
                                notifikasi2.ID_LETTER = dtLetter.ID_LETTER;
                                notifikasi2.STATUS_DOC = "MEMO";
                                notifikasi2.ID_USER = dtLetter.CREATED_BY;
                                notifikasi2.ID_USER_APPROVAL = sessionUser.idUser;
                                notifikasi2.NOTIFIKASI = "Memo Pengadaan Perihal " + dtLetter.ABOUT + " Telah Ditambahkan Delibrasi Oleh " + sessionUser.nama;
                                notifikasi2.CREATED_ON = DateTime.Now;
                                notifikasi2.STATUS_READ = 0;


                                db.tr_notifikasi.Add(notifikasi2);
                                db.SaveChanges();
                            
                            }
                            


                    }

                }


                Tr_Notifikasi_Table notifikasi = new Tr_Notifikasi_Table();
                notifikasi.ID_LETTER = idLetter;
                notifikasi.STATUS_DOC = "MEMO";
                notifikasi.ID_USER = dtLetter.CREATED_BY;
                notifikasi.ID_USER_APPROVAL = sessionUser.idUser;
                if(pr.saveType == 4)
                {
                    notifikasi.NOTIFIKASI = "Memo Pengadaan Perihal " + dtLetter.ABOUT + " Telah Disetujui Oleh " + sessionUser.nama;

                }
                else if(pr.saveType == 5)
                {
                 notifikasi.NOTIFIKASI = "Memo Pengadaan Perihal " + dtLetter.ABOUT + " DiTolak Oleh " + sessionUser.nama;

                }
                notifikasi.CREATED_ON = DateTime.Now;
                notifikasi.STATUS_READ = 0;


                db.tr_notifikasi.Add(notifikasi);
                db.SaveChanges();



                var description = "Memo disimpan";
                if (pr.saveType == 2)
                {
                    description = "Surat Keluar dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Memo pemeriksa ke - " + dtChecker.ORDER_NUMBER;
                }
                if (pr.saveType == 5)
                {
                    description = "Memo pemeriksa ke - " + dtChecker.ORDER_NUMBER;
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 0 && pr.saveType == 4)
                {
                    description = "Memo dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan memo";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim memo";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui memo";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public string GenerateNoMemo(string letterType, SessionUser sessionUser, Guid idLetter, bool is_backdate, DateTime? letterDate, string memoType,Guid idMemotype)
        {
            try
            {
                DateTime letter = Convert.ToDateTime(letterDate);
                int year = Convert.ToInt32(letter.ToString("yyyy"));
                int month = Convert.ToInt32(letter.ToString("MM"));
                int date = Convert.ToInt32(letter.ToString("dd"));
                string monthVal = month.ToString();
                string dateVal = date.ToString();
                string yearVal = letter.ToString("yy");
                string numVal = "0";
                //Guid newGuidDept = Guid.Parse("242852B4-2390-ED11-80D1-B7157F320A73");
                //Guid newGuidDiv = Guid.Parse("70E7AAA4-2390-ED11-80D1-B7157F320A73");
                //Guid MemotypeId = idMemotype == newGuidDept ? newGuidDiv : idMemotype;

                //if (is_backdate)
                //{
                //    //DateTime letter = Convert.ToDateTime(letterDate);
                //    year = Convert.ToInt32(letter.ToString("yyyy"));
                //    month = Convert.ToInt32(letter.ToString("MM"));
                //    date = Convert.ToInt32(letter.ToString("dd"));
                //    monthVal = month.ToString();
                //    dateVal = date.ToString();
                //    yearVal = letter.ToString("yy");
                //}


                 var getsender = (from l in db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter)
                                     join p in db.tm_position
                                        on l.ID_POSITION_SENDER equals p.ID_POSITION
                                     join u in db.tm_unit
                                        on p.ID_UNIT equals u.ID_UNIT
                                     join em in db.tr_level_employee
                                        on l.ID_USER_SENDER equals em.ID_USER
                                     select new { 
                                         u.ID_UNIT,
                                         u.UNIT_CODE,
                                         em.ID_LEVEL
                                     }).FirstOrDefault();
                 var getDtNumber = db.tr_letter_number.Where(p => p.ID_UNIT == getsender.ID_UNIT && p.YEAR == year
                                    && p.MONTH == month && p.DATE == date && p.MEMO_TYPE_ID == idMemotype).FirstOrDefault();

                  var  unitCodeSender = getsender.UNIT_CODE;
                  var  idUnitSender = getsender.ID_UNIT;


                    var getUnitDir = (from l in db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter)
                                     join p in db.tm_position
                                        on l.ID_POSITION_SENDER equals p.ID_POSITION
                                     join u in db.tm_unit
                                        on p.ID_UNIT equals u.ID_UNIT
                                     join em in db.tr_level_employee
                                        on l.ID_USER_SENDER equals em.ID_USER
                                     select u).FirstOrDefault();
                if (getsender.ID_LEVEL != 2)
                {

                    getUnitDir = (from l in db.tm_setting_approval.Where(p => p.ID_UNIT == idUnitSender)
                                      join usr in db.tm_user
                                         on l.ID_USER equals usr.ID_USER
                                      join p in db.tm_position
                                         on usr.ID_POSITION equals p.ID_POSITION
                                      join u in db.tm_unit
                                         on p.ID_UNIT equals u.ID_UNIT
                                      select u).FirstOrDefault();
                }
                  
                if (getDtNumber == null)
                {
                    //add new number
                    Tr_Letter_Number letterNumber = new Tr_Letter_Number();
                    letterNumber.ID_UNIT = idUnitSender;
                    letterNumber.YEAR = year;
                    letterNumber.MONTH = month;
                    letterNumber.DATE = date;
                    letterNumber.NUMBER = 1;
                    letterNumber.CREATED_ON = DateTime.Now;
                    letterNumber.CREATED_BY = sessionUser.idUser;
                    letterNumber.MODIFIED_ON = DateTime.Now;
                    letterNumber.MODIFIED_BY = sessionUser.idUser;
                    letterNumber.MEMO_TYPE_ID = idMemotype;

                    db.tr_letter_number.Add(letterNumber);
                    db.SaveChanges();

                    //var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + date;
                    }
                    
                    if(memoType == "Memo.DIR-Code")
                    {
                        return "0001.Memo." + getUnitDir.UNIT_CODE + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if(memoType == "SK.BL.DIR")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "SE.BL.DIR")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "POA.BL.DIR-Code")
                    {
                        return "0001.POA.BL." + getUnitDir.UNIT_CODE + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "KET.BL.DIR")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "POA.BL.DIR")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "POA.BL.KOM")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "SL.BL.KOM")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "SK.BL.KOM")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "POA.BL.Code")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "SL.BL.Code")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "Memo.Div.Code")
                    {
                        return "0001." + "Memo." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "Memo.Dept.Code")
                    {
                        return "0001." + "Memo." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "KET.BL.Code")
                    {
                        return "0001." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    //else if(memoType == "PGA")
                    //{
                    //    return "0001.Memo." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    //    //return "0001.POA." + letterType + ".DIR." + dateVal + "" + monthVal + "" + yearVal;
                    //}

                    return "0001.Memo.";

                }
                else
                {
                    int numbers = getDtNumber.NUMBER + 1;
                    getDtNumber.NUMBER = numbers;
                    getDtNumber.MODIFIED_ON = DateTime.Now;
                    getDtNumber.MODIFIED_BY = sessionUser.idUser;
                    db.SaveChanges();

                    //var getStringMap = GetStringMapping("tr_document_number", "NUMBER_TYPE", type);
                    if (month < 10)
                    {
                        monthVal = "0" + month;
                    }
                    if (date < 10)
                    {
                        dateVal = "0" + date;
                    }
                    if (numbers < 10)
                    {
                        numVal = "000" + numbers;
                    }
                    else if (numbers < 100)
                    {
                        numVal = "00" + numbers;
                    }
                    else if (numbers < 999)
                    {
                        numVal = "0" + numbers;
                    }
                   
                    
                    if (memoType == "Memo.DIR-Code")
                    {
                        return numVal + ".Memo." + getUnitDir.UNIT_CODE + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "SK.BL.DIR")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "SE.BL.DIR")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "POA.BL.DIR-Code")
                    {
                        return numVal + ".POA.BL." + getUnitDir.UNIT_CODE + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "KET.BL.DIR")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "POA.BL.DIR")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "POA.BL.KOM")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }
                    else if (memoType == "SL.BL.KOM")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }


                    else if (memoType == "SK.BL.KOM")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "POA.BL.Code")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "SL.BL.Code")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "Memo.Div.Code")
                    {
                        return numVal + "."+ "Memo." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "Memo.Dept.Code")
                    {
                        return numVal + "." + "Memo." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    else if (memoType == "KET.BL.Code")
                    {
                        return numVal + "." + memoType + "." + dateVal + "" + monthVal + "" + yearVal;
                    }

                    //if (memoType == "PGA")
                    //{

                    //    return numVal + ".Memo." + unitCodeSender + "." + dateVal + "" + monthVal + "" + yearVal;
                    //}

                    return "0001.Memo.";
                }

            }
            catch (Exception ex)
            {
                return "NG";
            }
        }




        public GeneralOutputModel GetDetailMemoWebPriview_(ParamGetDetailMemo pr, SessionUser sessionUser)
        {
            try
            {
                
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailMemo letter = new OutputDetailMemo();
                var checktypememo = db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter).FirstOrDefault();
                 
                        var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                        join d in db.tr_document
                                            on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                        from td in z.DefaultIfEmpty()
                                        join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                                on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                        join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                                on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                        join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                                on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                        join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                                on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                        join j in db.tm_position
                                            on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                        join u in db.tm_user
                                            on l.CREATED_BY equals u.ID_USER
                                        join tmp in db.tr_memo_type.Where(p => p.STATUS_CODE != 0) on l.MEMO_TYPE_ID equals tmp.ID_MEMO_TYPE

                                        select new MemoOutput
                                        {
                                            idLetter = l.ID_LETTER,
                                            idDocument = td.ID_DOCUMENT,
                                            trackingNumber = td.TRACKING_NUMBER,
                                            letterNumber = l.LETTER_NUMBER,
                                            letterDate = l.LETTER_DATE,
                                            about = l.ABOUT,
                                            attachmentDesc = l.ATTACHMENT_DESC,
                                            priority = l.PRIORITY,
                                            letterTypeCode = l.LETTER_TYPE_CODE,
                                            letterTypeValue = ltc.VALUE,
                                            senderName = l.SENDER_NAME,
                                            senderAddress = l.SENDER_ADDRESS,
                                            outboxType = l.OUTBOX_TYPE_CODE,
                                            outboxTypeCodeValue = otc.VALUE,
                                            resultType = l.RESULT_TYPE_CODE,
                                            resultTypeCodeValue = rtc.VALUE,
                                            signatureType = l.SIGNATURE_TYPE_CODE,
                                            signatureTypeCodeValue = stc.VALUE,
                                            statusCode = l.STATUS_CODE,
                                            createdByPositionId = l.CREATED_BY_POSITION_ID,
                                            positionName = j.POSITION_NAME,
                                            createdBy = l.CREATED_BY,
                                            fullname = u.FULLNAME,
                                            memotypename = tmp.MEMO_TYPE_NAME,
                                            idmemoType = tmp.ID_MEMO_TYPE,
                                            letterDeliberationNumber = l.LETTER_DELIBERATION_NUMBER
                                        }).FirstOrDefault();
                        if (dtLetter != null && dtLetter.letterTypeCode != 4)
                        {

                                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;

                                    InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");

                                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                                        join j in db.tm_position
                                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                                        join u in db.tm_user
                                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                                        join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                        select new OutputListReceiverMemo
                                                        {
                                                            idReceiver = r.ID_RECEIVER,
                                                            idPosition = r.ID_POSITION_RECEIVER,
                                                            idUser = r.ID_USER_RECEIVER,
                                                            positionName = j.POSITION_NAME,
                                                            fullname = u.FULLNAME,
                                                            idUnit = d.ID_UNIT
                                                        }).ToList();
                                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                                    join j in db.tm_position
                                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                                    join u in db.tm_user
                                                        on c.ID_USER_COPY equals u.ID_USER
                                                    join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                    select new OutputListCopyMemo
                                                    {
                                                        idCopy = c.ID_COPY,
                                                        idPosition = c.ID_POSITION_COPY,
                                                        idUser = c.ID_USER_COPY,
                                                        positionName = j.POSITION_NAME,
                                                        fullname = u.FULLNAME,
                                                        idUnit = d.ID_UNIT
                                                    }).ToList();
                                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                                               select new OutputLogLetterMemo
                                               {
                                                   idLogLetter = l.ID_LOG_LETTER,
                                                   idLetter = l.ID_LETTER,
                                                   idUserLog = l.CREATED_BY,
                                                   description = l.DESCRIPTION,
                                                   comment = l.COMMENT,
                                                   createdOn = l.CREATED_ON
                                               }).ToList();
                                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                                      select new OutputListAttachmentMemo
                                                      {
                                                          idAttachment = a.ID_ATTACHMENT,
                                                          idLetter = a.ID_LETTER,
                                                          filename = a.FILENAME,
                                                          isDocLetter = a.IS_DOC_LETTER
                                                      }).ToList();

                                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                                       join dd in db.tr_disposition_child
                                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                                       join udh in db.tm_user
                                                        on dh.ID_USER equals udh.ID_USER
                                                       join pdh in db.tm_position
                                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                                       join udd in db.tm_user
                                                        on dd.ID_USER equals udd.ID_USER
                                                       join pdd in db.tm_position
                                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                                       select new OutputGetDispositionMemo
                                                       {
                                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                                           idUserDispositionMaker = udh.ID_USER,
                                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                                           fullnameDispositionMaker = udh.FULLNAME,
                                                           positionDispositionMaker = pdh.POSITION_NAME,
                                                           idUserDispositionReceiver = udd.ID_USER,
                                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                                           fullnameDispositionReceiver = udd.FULLNAME,
                                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                                           dispositionDate = dh.DISPOSITION_DATE,
                                                           notes = dd.NOTES
                                                       }).OrderBy(p => p.dispositionDate).ToList();
                                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                                      join j in db.tm_position
                                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                                      join u in db.tm_user
                                                          on c.ID_USER_SENDER equals u.ID_USER
                                                      select new OutputListLetterSenderMemo
                                                      {
                                                          idLetterSender = c.ID_LETTER_SENDER,
                                                          idPositionSender = c.ID_POSITION_SENDER,
                                                          idUserSender = c.ID_USER_SENDER,
                                                          idUnitSender = c.ID_UNIT_SENDER,
                                                          idLevelSender = c.ID_LEVEL_SENDER,
                                                          isMain = c.IS_MAIN,
                                                          positionName = j.POSITION_NAME,
                                                          fullname = u.FULLNAME,
                                                          nip = u.NIP
                                                      }).ToList();
                                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER != 0)
                                                       join j in db.tm_position
                                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                                       join u in db.tm_user
                                                           on c.ID_USER_CHECKER equals u.ID_USER
                                                       select new OutputListCheckerMemo
                                                       {
                                                           idChecker = c.ID_CHECKER,
                                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                                           idUserChecker = c.ID_USER_CHECKER,
                                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                                           positionName = j.POSITION_NAME,
                                                           fullname = u.FULLNAME,
                                                           nip = u.NIP,
                                                           approvalStatus = c.APPROVAL_STATUS,
                                                           ordernumber = c.ORDER_NUMBER
                                                       }).ToList();
                                    //var outgoingRecipientList = (from a in db.tr_outgoing_recipient.Where(p => p.ID_LETTER == pr.idLetter)
                                    //                             select new OutputListOutgoingRecipient
                                    //                             {
                                    //                                 idOutgoingRecipient = a.ID_OUTGOING_RECIPIENT,
                                    //                                 recipientAddress = a.RECIPIENT_ADDRESS,
                                    //                                 recipientName = a.RECIPIENT_NAME,
                                    //                                 recipientCompany = a.RECEPIENT_COMPANY
                                    //                             }).ToList();
                                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                                         select new OutputDetailLetterContentMemo
                                                         {
                                                             idContent = a.ID_CONTENT,
                                                             letterContent = a.LETTER_CONTENT,
                                                             summary = a.SUMMARY

                                                         }).FirstOrDefault();
                                    var delibarationList = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                                            join j in db.tm_position
                                                           on c.ID_POSITION equals j.ID_POSITION
                                                            join u in db.tm_user
                                                                on c.ID_USER equals u.ID_USER
                                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                            select new OutputListDeliberationMemoModel
                                                            {
                                                                idLetter = c.ID_LETTER,
                                                                idDeliberation = c.ID_DELIBERATION,
                                                                idUser = c.ID_USER,
                                                                idPosition = c.ID_POSITION,
                                                                positionName = j.POSITION_NAME,
                                                                fullname = u.FULLNAME,
                                                                commentdlbrt = c.COMMENT,
                                                                idUnit = d.ID_UNIT,
                                                                statuscode = c.STATUS_CODE

                                                            }).ToList();
                                    var delibarationRows = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 2)
                                                            join j in db.tm_position
                                                           on c.ID_POSITION equals j.ID_POSITION
                                                            join u in db.tm_user
                                                                on c.ID_USER equals u.ID_USER
                                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                            select new OutputDeliberationMemoModel
                                                            {
                                                                idLetter = c.ID_LETTER,
                                                                idDeliberation = c.ID_DELIBERATION,
                                                                idUser = c.ID_USER,
                                                                idPosition = c.ID_POSITION,
                                                                positionName = j.POSITION_NAME,
                                                                fullname = u.FULLNAME,
                                                                commentdlbrt = c.COMMENT,
                                                                idUnit = d.ID_UNIT,
                                                                statuscode = c.STATUS_CODE
                                                            }).FirstOrDefault();

                                    letter.letter = dtLetter;
                                    letter.receiver = receiverList;
                                    letter.copy = copyList;
                                    letter.delibration = delibarationList;
                                    letter.delibrationRow = delibarationRows;
                                    letter.log = log;
                                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                                    letter.disposition = disposition;
                                    letter.sender = senderList;
                                    letter.checker = checkerList;
                                    //letter.outgoingRecipient = outgoingRecipientList;
                                    letter.letterContent = letterContent;
                            
                                    //update status baca
                                    var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                                    if (tblStatus != null)
                                    {
                                        tblStatus.READ_STATUS = 0;
                                        tblStatus.MODIFIED_ON = DateTime.Now;
                                        tblStatus.MODIFIED_BY = sessionUser.idUser;

                                        db.SaveChanges();
                                    }
                                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                                    foreach (var item in disposisi)
                                    {
                                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                                        if (disposisichild != null)
                                        {
                                            disposisichild.READ_STATUS = 0;
                                            disposisichild.MODIFIED_ON = DateTime.Now;
                                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                                            db.SaveChanges();
                                        }
                                    }

                                    output.Status = "OK";
                                    output.Result = letter;
                                    output.Message = "Success Get Detail Memo";
                        }
                        
                        else if(dtLetter != null && dtLetter.letterTypeCode == 4)
                        {
                             var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;

                                    InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");

                                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                                        join j in db.tm_position
                                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                                        join u in db.tm_user
                                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                                        join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                        select new OutputListReceiverMemo
                                                        {
                                                            idReceiver = r.ID_RECEIVER,
                                                            idPosition = r.ID_POSITION_RECEIVER,
                                                            idUser = r.ID_USER_RECEIVER,
                                                            positionName = j.POSITION_NAME,
                                                            fullname = u.FULLNAME,
                                                            idUnit = d.ID_UNIT
                                                        }).ToList();
                                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                                    join j in db.tm_position
                                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                                    join u in db.tm_user
                                                        on c.ID_USER_COPY equals u.ID_USER
                                                    join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                    select new OutputListCopyMemo
                                                    {
                                                        idCopy = c.ID_COPY,
                                                        idPosition = c.ID_POSITION_COPY,
                                                        idUser = c.ID_USER_COPY,
                                                        positionName = j.POSITION_NAME,
                                                        fullname = u.FULLNAME,
                                                        idUnit = d.ID_UNIT
                                                    }).ToList();
                                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                                               select new OutputLogLetterMemo
                                               {
                                                   idLogLetter = l.ID_LOG_LETTER,
                                                   idLetter = l.ID_LETTER,
                                                   idUserLog = l.CREATED_BY,
                                                   description = l.DESCRIPTION,
                                                   comment = l.COMMENT,
                                                   createdOn = l.CREATED_ON
                                               }).ToList();
                                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                                      select new OutputListAttachmentMemo
                                                      {
                                                          idAttachment = a.ID_ATTACHMENT,
                                                          idLetter = a.ID_LETTER,
                                                          filename = a.FILENAME,
                                                          isDocLetter = a.IS_DOC_LETTER
                                                      }).ToList();

                                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                                       join dd in db.tr_disposition_child
                                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                                       join udh in db.tm_user
                                                        on dh.ID_USER equals udh.ID_USER
                                                       join pdh in db.tm_position
                                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                                       join udd in db.tm_user
                                                        on dd.ID_USER equals udd.ID_USER
                                                       join pdd in db.tm_position
                                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                                       select new OutputGetDispositionMemo
                                                       {
                                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                                           idUserDispositionMaker = udh.ID_USER,
                                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                                           fullnameDispositionMaker = udh.FULLNAME,
                                                           positionDispositionMaker = pdh.POSITION_NAME,
                                                           idUserDispositionReceiver = udd.ID_USER,
                                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                                           fullnameDispositionReceiver = udd.FULLNAME,
                                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                                           dispositionDate = dh.DISPOSITION_DATE,
                                                           notes = dd.NOTES
                                                       }).OrderBy(p => p.dispositionDate).ToList();
                                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                                      join j in db.tm_position
                                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                                      join u in db.tm_user
                                                          on c.ID_USER_SENDER equals u.ID_USER
                                                      select new OutputListLetterSenderMemo
                                                      {
                                                          idLetterSender = c.ID_LETTER_SENDER,
                                                          idPositionSender = c.ID_POSITION_SENDER,
                                                          idUserSender = c.ID_USER_SENDER,
                                                          idUnitSender = c.ID_UNIT_SENDER,
                                                          idLevelSender = c.ID_LEVEL_SENDER,
                                                          isMain = c.IS_MAIN,
                                                          positionName = j.POSITION_NAME,
                                                          fullname = u.FULLNAME,
                                                          nip = u.NIP
                                                      }).ToList();
                                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER != 1)
                                                       join j in db.tm_position
                                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                                       join u in db.tm_user
                                                           on c.ID_USER_CHECKER equals u.ID_USER
                                                       select new OutputListCheckerMemo
                                                       {
                                                           idChecker = c.ID_CHECKER,
                                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                                           idUserChecker = c.ID_USER_CHECKER,
                                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                                           positionName = j.POSITION_NAME,
                                                           fullname = u.FULLNAME,
                                                           nip = u.NIP,
                                                           approvalStatus = c.APPROVAL_STATUS,
                                                           ordernumber = c.ORDER_NUMBER
                                                       }).ToList();
                                    //var outgoingRecipientList = (from a in db.tr_outgoing_recipient.Where(p => p.ID_LETTER == pr.idLetter)
                                    //                             select new OutputListOutgoingRecipient
                                    //                             {
                                    //                                 idOutgoingRecipient = a.ID_OUTGOING_RECIPIENT,
                                    //                                 recipientAddress = a.RECIPIENT_ADDRESS,
                                    //                                 recipientName = a.RECIPIENT_NAME,
                                    //                                 recipientCompany = a.RECEPIENT_COMPANY
                                    //                             }).ToList();
                                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                                         select new OutputDetailLetterContentMemo
                                                         {
                                                             idContent = a.ID_CONTENT,
                                                             letterContent = a.LETTER_CONTENT,
                                                             summary = a.SUMMARY

                                                         }).FirstOrDefault();
                                    var delibarationList = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                                            join j in db.tm_position
                                                           on c.ID_POSITION equals j.ID_POSITION
                                                            join u in db.tm_user
                                                                on c.ID_USER equals u.ID_USER
                                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                            select new OutputListDeliberationMemoModel
                                                            {
                                                                idLetter = c.ID_LETTER,
                                                                idDeliberation = c.ID_DELIBERATION,
                                                                idUser = c.ID_USER,
                                                                idPosition = c.ID_POSITION,
                                                                positionName = j.POSITION_NAME,
                                                                fullname = u.FULLNAME,
                                                                commentdlbrt = c.COMMENT,
                                                                idUnit = d.ID_UNIT,
                                                                statuscode = c.STATUS_CODE

                                                            }).ToList();
                                    var delibarationRows = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser && p.STATUS_CODE == 2)
                                                            join j in db.tm_position
                                                           on c.ID_POSITION equals j.ID_POSITION
                                                            join u in db.tm_user
                                                                on c.ID_USER equals u.ID_USER
                                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                                            select new OutputDeliberationMemoModel
                                                            {
                                                                idLetter = c.ID_LETTER,
                                                                idDeliberation = c.ID_DELIBERATION,
                                                                idUser = c.ID_USER,
                                                                idPosition = c.ID_POSITION,
                                                                positionName = j.POSITION_NAME,
                                                                fullname = u.FULLNAME,
                                                                commentdlbrt = c.COMMENT,
                                                                idUnit = d.ID_UNIT,
                                                                statuscode = c.STATUS_CODE
                                                            }).FirstOrDefault();

                                    letter.letter = dtLetter;
                                    letter.receiver = receiverList;
                                    letter.copy = copyList;
                                    letter.delibration = delibarationList;
                                    letter.delibrationRow = delibarationRows;
                                    letter.log = log;
                                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                                    letter.disposition = disposition;
                                    letter.sender = senderList;
                                    letter.checker = checkerList;
                                    //letter.outgoingRecipient = outgoingRecipientList;
                                    letter.letterContent = letterContent;
                            
                                    //update status baca
                                    var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                                    if (tblStatus != null)
                                    {
                                        tblStatus.READ_STATUS = 0;
                                        tblStatus.MODIFIED_ON = DateTime.Now;
                                        tblStatus.MODIFIED_BY = sessionUser.idUser;

                                        db.SaveChanges();
                                    }
                                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                                    foreach (var item in disposisi)
                                    {
                                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                                        if (disposisichild != null)
                                        {
                                            disposisichild.READ_STATUS = 0;
                                            disposisichild.MODIFIED_ON = DateTime.Now;
                                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                                            db.SaveChanges();
                                        }
                                    }

                                    output.Status = "OK";
                                    output.Result = letter;
                                    output.Message = "Success Get Detail Memo";
                        }                        

                        else
                        {
                            output.Status = "NG";
                            output.Message = "Failed Get Detail Memo";
                        }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDataPemeriksaDiv_(string keyword, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var data = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on u.ID_POSITION equals tp.ID_POSITION
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.ID_UNIT == sessionUser.idUnit)
                                on tp.ID_UNIT equals tu.ID_UNIT
                            join l in db.tr_level_employee
                                on u.ID_USER equals l.ID_USER
                            where u.FULLNAME.ToUpper().Contains(keyword.ToUpper()) || tp.POSITION_NAME.ToUpper().Contains(keyword.ToUpper())
                            select new AdminDivisionOutput
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME,
                                idUser = u.ID_USER,
                                nip = u.NIP,
                                userName = u.FULLNAME,
                                idPosition = tp.ID_POSITION,
                                positionName = tp.POSITION_NAME,
                                idLevel = l.ID_LEVEL
                            }).Union(from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                                     join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                         on u.ID_POSITION equals tp.ID_POSITION
                                     join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.ID_UNIT == sessionUser.idUnit)
                                         on tp.ID_UNIT equals tu.ID_UNIT
                                     where u.FULLNAME.ToUpper().Contains(keyword.ToUpper()) || tp.POSITION_NAME.ToUpper().Contains(keyword.ToUpper())
                                     select new AdminDivisionOutput
                                     {
                                         idUnit = tu.ID_UNIT,
                                         unitName = tu.UNIT_NAME,
                                         idUser = u.ID_USER,
                                         nip = u.NIP,
                                         userName = u.FULLNAME,
                                         idPosition = tp.ID_POSITION,
                                         positionName = tp.POSITION_NAME,
                                         idLevel = 0
                                     }).ToList();

                output.Status = "OK";
                output.Result = data;
                 output.Message = "Success get User Penerima";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDataPemeriksaDivLainya(string keyword, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var data = (from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                            join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                on u.ID_POSITION equals tp.ID_POSITION
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 &&  p.ID_UNIT != sessionUser.idUnit)
                                on tp.ID_UNIT equals tu.ID_UNIT
                            join l in db.tr_level_employee
                                on u.ID_USER equals l.ID_USER
                            where u.FULLNAME.ToUpper().Contains(keyword.ToUpper()) || tp.POSITION_NAME.ToUpper().Contains(keyword.ToUpper())
                            select new AdminDivisionOutput
                            {
                                idUnit = tu.ID_UNIT,
                                unitName = tu.UNIT_NAME,
                                idUser = u.ID_USER,
                                nip = u.NIP,
                                userName = u.FULLNAME,
                                idPosition = tp.ID_POSITION,
                                positionName = tp.POSITION_NAME,
                                idLevel = l.ID_LEVEL
                            }).Union(from u in db.tm_user.Where(p => p.STATUS_CODE == 1)
                                     join tp in db.tm_position.Where(p => p.STATUS_CODE == 1)
                                         on u.ID_POSITION equals tp.ID_POSITION
                                     join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1 && p.ID_UNIT != sessionUser.idUnit)
                                         on tp.ID_UNIT equals tu.ID_UNIT
                                     where u.FULLNAME.ToUpper().Contains(keyword.ToUpper()) || tp.POSITION_NAME.ToUpper().Contains(keyword.ToUpper())
                                     select new AdminDivisionOutput
                                     {
                                         idUnit = tu.ID_UNIT,
                                         unitName = tu.UNIT_NAME,
                                         idUser = u.ID_USER,
                                         nip = u.NIP,
                                         userName = u.FULLNAME,
                                         idPosition = tp.ID_POSITION,
                                         positionName = tp.POSITION_NAME,
                                         idLevel = 0
                                     }).ToList();

                output.Status = "OK";
                output.Result = data;
                output.Message = "Success get User Penerima";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDetailsMemoPengadaanWebPriview_(ParamGetDetailMemo pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailMemoPengadaan letter = new OutputDetailMemoPengadaan();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                join tmp in db.tr_memo_type on l.MEMO_TYPE_ID equals tmp.ID_MEMO_TYPE

                                select new MemoOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME,
                                    memotypename = tmp.MEMO_TYPE_NAME,
                                    idmemoType = tmp.ID_MEMO_TYPE,
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;

                    InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");

                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                        select new OutputListReceiverMemo
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            idUnit = d.ID_UNIT
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                    select new OutputListCopyMemo
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME,
                                        idUnit = d.ID_UNIT
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetterMemo
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   idUserLog = l.CREATED_BY,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)

                                      select new OutputListAttachmentMemo
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionMemo
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();
                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                      join j in db.tm_position
                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                      join u in db.tm_user
                                          on c.ID_USER_SENDER equals u.ID_USER
                                      select new OutputListLetterSenderMemo
                                      {
                                          idLetterSender = c.ID_LETTER_SENDER,
                                          idPositionSender = c.ID_POSITION_SENDER,
                                          idUserSender = c.ID_USER_SENDER,
                                          idUnitSender = c.ID_UNIT_SENDER,
                                          idLevelSender = c.ID_LEVEL_SENDER,
                                          isMain = c.IS_MAIN,
                                          positionName = j.POSITION_NAME,
                                          fullname = u.FULLNAME,
                                          nip = u.NIP
                                      }).ToList();
                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER !=1 && p.IS_APPROVER !=3)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListCheckerMemo
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           nip = u.NIP,
                                           approvalStatus = c.APPROVAL_STATUS,
                                           isapproval = c.IS_APPROVER
                                       }).ToList();
                    var checkerLainList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER != 1)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                             on c.ID_USER_CHECKER equals u.ID_USER
                                           //join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                           select new OutputListCheckerMemoLainya
                                           {
                                               idChecker = c.ID_CHECKER,
                                               idPositionChecker = c.ID_POSITION_CHECKER,
                                               idUserChecker = c.ID_USER_CHECKER,
                                               idUnitChecker = c.ID_UNIT_CHECKER,
                                               idLevelChecker = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               nip = u.NIP,
                                               approvalStatus = c.APPROVAL_STATUS,
                                               ordernumber = c.ORDER_NUMBER,
                                               //idSekertaris = s.ID_SEKETARIS

                                           }).ToList();
                    var checkerSekertarisList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 0)
                                                 join j in db.tm_position
                                                         on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                                 join u in db.tm_user
                                                   on c.ID_USER_CHECKER equals u.ID_USER
                                                 join s in db.tr_setingseketaris on c.ID_USER_CHECKER equals s.ID_DIRKOM

                                                 select new OutputListCheckerMemoSek
                                                 {
                                                     idChecker = c.ID_CHECKER,
                                                     idPositionChecker = c.ID_POSITION_CHECKER,
                                                     idUserChecker = c.ID_USER_CHECKER,
                                                     idUnitChecker = c.ID_UNIT_CHECKER,
                                                     idLevelChecker = c.ID_LEVEL_CHECKER,
                                                     positionName = j.POSITION_NAME,
                                                     fullname = u.FULLNAME,
                                                     nip = u.NIP,
                                                     approvalStatus = c.APPROVAL_STATUS,
                                                     ordernumber = c.ORDER_NUMBER,
                                                     idSekertaris = s.ID_SEKETARIS

                                                 }).ToList();
                    var approverListOne = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                               on c.ID_USER_CHECKER equals u.ID_USER
                                           select new OutputListApproverMemo
                                           {
                                               idApprover = c.ID_CHECKER,
                                               idPositionApprover = c.ID_POSITION_CHECKER,
                                               idUserApprover = c.ID_USER_CHECKER,
                                               idUnitApprover = c.ID_UNIT_CHECKER,
                                               idLevelApprover = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               approvalStatus = c.APPROVAL_STATUS
                                           }).ToList();
                    var approverListTwo = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 11)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                               on c.ID_USER_CHECKER equals u.ID_USER
                                           select new OutputListApproverMemo
                                           {
                                               idApprover = c.ID_CHECKER,
                                               idPositionApprover = c.ID_POSITION_CHECKER,
                                               idUserApprover = c.ID_USER_CHECKER,
                                               idUnitApprover = c.ID_UNIT_CHECKER,
                                               idLevelApprover = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               approvalStatus = c.APPROVAL_STATUS
                                           }).ToList();
                    var approverListAll = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1 && p.IS_APPROVER == 11)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                               on c.ID_USER_CHECKER equals u.ID_USER
                                           select new OutputListApproverMemo
                                           {
                                               idApprover = c.ID_CHECKER,
                                               idPositionApprover = c.ID_POSITION_CHECKER,
                                               idUserApprover = c.ID_USER_CHECKER,
                                               idUnitApprover = c.ID_UNIT_CHECKER,
                                               idLevelApprover = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               approvalStatus = c.APPROVAL_STATUS
                                           }).ToList();
                    var NominalRows = (from a in db.tr_procurement.Where(p => p.ID_LETTER == pr.idLetter)
                                       join b in db.tm_procurement.Where(p => p.DELETE_STATUS != 1)
                                          on a.ID_PROCUREMENT equals b.ID
                                       select new OutputDetailNominalMemoPengadaan
                                       {
                                           idpr = a.ID_LETTER,
                                           nameProcurement = b.NAME,
                                           idprocurement=a.ID_PROCUREMENT,
                                           idletter = a.ID_LETTER,
                                           nominal=a.NOMINAL
                                       }).FirstOrDefault();
                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                         select new OutputDetailLetterContentMemo
                                         {
                                             idContent = a.ID_CONTENT,
                                             letterContent = a.LETTER_CONTENT,
                                             summary=a.SUMMARY
                                         }).FirstOrDefault();
                    var delibarationList = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter)
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputListDeliberationMemoModel
                                            {
                                                idLetter = c.ID_LETTER,
                                                idDeliberation = c.ID_DELIBERATION,
                                                idUser = c.ID_USER,
                                                idPosition = c.ID_POSITION,
                                                positionName = j.POSITION_NAME,
                                                fullname = u.FULLNAME,
                                                commentdlbrt = c.COMMENT,
                                                idUnit = d.ID_UNIT,
                                                statuscode = c.STATUS_CODE

                                            }).ToList();
                    var delibarationRows = (from c in db.tr_deliberation.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser)
                                            join j in db.tm_position
                                           on c.ID_POSITION equals j.ID_POSITION
                                            join u in db.tm_user
                                                on c.ID_USER equals u.ID_USER
                                            join d in db.tm_unit on j.ID_UNIT equals d.ID_UNIT
                                            select new OutputDeliberationMemoModel
                                            {
                                                idLetter = c.ID_LETTER,
                                                idDeliberation = c.ID_DELIBERATION,
                                                idUser = c.ID_USER,
                                                idPosition = c.ID_POSITION,
                                                positionName = j.POSITION_NAME,
                                                fullname = u.FULLNAME,
                                                commentdlbrt = c.COMMENT,
                                                idUnit = d.ID_UNIT,
                                                statuscode = c.STATUS_CODE
                                            }).FirstOrDefault();
                    //var ChekDelibration = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1 && p.APPROVAL_STATUS != 'Z')
                    //                       select new OutputListCheckerMemo
                    //                       {
                    //                           approvalStatus = c.APPROVAL_STATUS
                    //                       }).AsQueryable().Count();


                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.delibration = delibarationList;
                    letter.delibrationRow = delibarationRows;
                    letter.ApproverOne = approverListOne;
                    letter.ApproverTwo = approverListTwo;
                    letter.ApproverListAllPd = approverListAll;
                    letter.Nominal = NominalRows;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;
                    letter.sender = senderList;
                    letter.checker = checkerList;
                    letter.checkerlain = checkerLainList;
                    //letter.outgoingRecipient = outgoingRecipientList;
                    letter.letterContent = letterContent;

                    //update status baca
                    var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                    if (tblStatus != null)
                    {
                        tblStatus.READ_STATUS = 0;
                        tblStatus.MODIFIED_ON = DateTime.Now;
                        tblStatus.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Memo";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail Memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetStringMapMemoSrch_(ParamGetStringmap pr, SessionUser sessionUser)
        {
            try
            {
                var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                                    && p.STATUS_CODE == 1 && (p.ATTRIBUTEVALUE == 3 || p.ATTRIBUTEVALUE == 4  || p.ATTRIBUTEVALUE == 5) ).OrderBy(p => p.ATTRIBUTEVALUE)
                                  select new StringmapOutput
                                  {

                                      attributeValue = s.ATTRIBUTEVALUE,
                                      value = s.VALUE
                                  }).ToList();

                output.Status = "OK";
                output.Result = getMapping;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel InsertLetterOutboxBackdate(ParamInsertLetterOutboxBackdate pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputInsertAttachment outputAttachment = new OutputInsertAttachment();

                Guid idLetter = pr.idresponsesurat;
                string noLetter = "NO_LETTER";
                var nextApproval = 0;
                //var checkmanager = (from u in db.tm_user
                //                    join p in db.tm_position.Where(p => p.ID_UNIT == sessionUser.idUnit)
                //                        on u.ID_POSITION equals p.ID_POSITION
                //                    join l in db.tr_level_employee.Where(p => p.ID_LEVEL == 6)
                //                        on u.ID_USER equals l.ID_USER
                //                    select u).FirstOrDefault();
                //if (pr.outboxType != 2) 
                //{
                //    if (checkmanager != null)
                //    {
                //        var checker = JsonConvert.DeserializeObject<List<ParamInsertChecker>>(pr.idUserChecker).ToList();
                //        var checkanotherunit = checker.Where(p => p.idUnitChecker != sessionUser.idUnit).FirstOrDefault();
                //        var checkermanager = checker.Where(p => p.idUserChecker == checkmanager.ID_USER).FirstOrDefault();
                //        if (checkanotherunit != null && checkermanager == null)
                //        {
                //            output.Status = "NG";
                //            output.Message = "Pemeriksa harus ada user level manager untuk lintas divisi";

                //            return output;
                //        }
                //    }
                //    else
                //    {
                //        output.Status = "NG";
                //        output.Message = "Manager pada divisi " + sessionUser.unitCode + " belum di setting!Silahkan hubungi admin";

                //        return output;
                //    }
                //}

                //string letterType = GetStringMapping("tm_letter", "LETTER_TYPE_CODE", 1);
                if (pr.idresponsesurat == Guid.Empty)
                {
                    //insert new letter to get id
                    Tm_Letter_Table letter = new Tm_Letter_Table();
                    letter.LETTER_NUMBER = noLetter;
                    letter.ABOUT = pr.about;
                    letter.OUTBOX_TYPE_CODE = pr.outboxType;
                    letter.RESULT_TYPE_CODE = pr.resultType;
                    letter.SIGNATURE_TYPE_CODE = pr.signatureType;
                    letter.ATTACHMENT_DESC = pr.attachmentCount;
                    letter.PRIORITY = pr.priority;
                    letter.LETTER_TYPE_CODE = pr.letterTypeCode;
                    letter.STATUS_CODE = pr.saveType;
                    //letter.SENDER_NAME = pr.senderName;
                    letter.SENDER_ADDRESS = pr.senderAddress;
                    letter.LETTER_DATE = DateTime.Now;
                    letter.CREATED_BY_POSITION_ID = sessionUser.idPosition;
                    letter.CREATED_ON = DateTime.Now;
                    letter.CREATED_BY = sessionUser.idUser;
                    letter.MODIFIED_ON = DateTime.Now;
                    letter.MODIFIED_BY = sessionUser.idUser;

                    db.tm_letter.Add(letter);
                    db.SaveChanges();

                    idLetter = letter.ID_LETTER;
                }
                else
                {
                    if (pr.saveType == 1 || pr.saveType == 2)
                    {
                        var dtLetter = db.tm_letter.Where(p => p.ID_LETTER == pr.idresponsesurat).FirstOrDefault();

                        dtLetter.LETTER_NUMBER = noLetter;
                        dtLetter.ABOUT = pr.about;
                        dtLetter.OUTBOX_TYPE_CODE = pr.outboxType;
                        dtLetter.RESULT_TYPE_CODE = pr.resultType;
                        dtLetter.SIGNATURE_TYPE_CODE = pr.signatureType;
                        dtLetter.ATTACHMENT_DESC = pr.attachmentCount;
                        dtLetter.PRIORITY = pr.priority;
                        dtLetter.LETTER_TYPE_CODE = pr.letterTypeCode;
                        dtLetter.STATUS_CODE = pr.saveType;
                        //dtLetter.SENDER_NAME = pr.senderName;
                        dtLetter.SENDER_ADDRESS = pr.senderAddress;
                        dtLetter.LETTER_DATE = DateTime.Now;
                        dtLetter.MODIFIED_ON = DateTime.Now;
                        dtLetter.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }

                }
                if (pr.saveType == 1 || pr.saveType == 2)//disimpan atau baru dikirim
                {
                    //INSERT ISI
                    var dtContent = db.tr_content.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtContent != null)
                    {
                        db.tr_content.Remove(dtContent);
                        db.SaveChanges();
                    }

                    Tr_Content_Table content = new Tr_Content_Table();
                    content.ID_LETTER = idLetter;
                    content.LETTER_CONTENT = pr.isiSurat;
                    content.CREATED_ON = DateTime.Now;
                    content.CREATED_BY = sessionUser.idUser;
                    content.MODIFIED_ON = DateTime.Now;
                    content.MODIFIED_BY = sessionUser.idUser;
                    db.tr_content.Add(content);
                    db.SaveChanges();

                    //insert pengirim
                    var dtSender = db.tr_letter_sender.Where(p => p.ID_LETTER == idLetter).FirstOrDefault();
                    if (dtSender != null)
                    {
                        db.tr_letter_sender.Remove(dtSender);
                        db.SaveChanges();
                    }

                    Tr_Letter_Sender_Table sender = new Tr_Letter_Sender_Table();
                    sender.ID_LETTER = idLetter;
                    sender.ID_USER_SENDER = pr.bossUserId;
                    sender.ID_POSITION_SENDER = pr.bossPositionId;
                    sender.ID_UNIT_SENDER = pr.bossUnitId;
                    sender.ID_LEVEL_SENDER = pr.bossLevelId;
                    sender.IS_MAIN = 1;
                    sender.SENDER_POSITION_NAME = pr.bossPositionName;
                    sender.CREATED_ON = DateTime.Now;
                    sender.CREATED_BY = sessionUser.idUser;
                    sender.MODIFIED_ON = DateTime.Now;
                    sender.MODIFIED_BY = sessionUser.idUser;

                    db.tr_letter_sender.Add(sender);
                    db.SaveChanges();

                    //INSERT PENERIMA KELUAR
                    var dtReceiver = db.tr_outgoing_recipient.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtReceiver != null)
                    {
                        db.tr_outgoing_recipient.RemoveRange(dtReceiver);
                        db.SaveChanges();
                    }

                    var ReceiverList = JsonConvert.DeserializeObject<List<ParamInsertOutgoingRecipient>>(pr.senderName).ToList();
                    foreach (var item in ReceiverList)
                    {
                        Tr_Outgoing_Recipient_Table recipient = new Tr_Outgoing_Recipient_Table();
                        recipient.ID_LETTER = idLetter;
                        recipient.RECIPIENT_NAME = item.senderName;
                        recipient.RECIPIENT_ADDRESS = item.senderAddress;
                        recipient.RECEPIENT_COMPANY = item.senderCompanyName;
                        recipient.RECIPIENT_NUMBER = item.senderPhoneNumber;
                        recipient.CREATED_ON = DateTime.Now;
                        recipient.CREATED_BY = sessionUser.idUser;
                        recipient.MODIFIED_ON = DateTime.Now;
                        recipient.MODIFIED_BY = sessionUser.idUser;
                        db.tr_outgoing_recipient.Add(recipient);
                        db.SaveChanges();
                    }


                    //insert pemeriksa
                    var checkerList = JsonConvert.DeserializeObject<List<ParamInsertChecker>>(pr.idUserChecker).ToList();
                    var ApproverList = JsonConvert.DeserializeObject<List<ParamInsertApproval>>(pr.idUserApprover).ToList();
                    //var checkerPengirimList = JsonConvert.DeserializeObject<List<ParamInsertCheckerPengirim>>(pr.idUserCheckerPengirim).ToList();
                    var checkerundermanager = checkerList.Where(p => p.idLevelChecker > 6).OrderByDescending(p => p.idLevelChecker).ToList();
                    var checkerName = "";
                    List<GetOuputIdSekdir> sekdirs = new List<GetOuputIdSekdir>();
                    var dtChecker = db.tr_checker.Where(p => p.ID_LETTER == idLetter).ToList();
                    if (dtChecker != null)
                    {
                        db.tr_checker.RemoveRange(dtChecker);
                        db.SaveChanges();
                    }





                    int checkOrder = 1;

                    var checkerApprover = ApproverList.ToList();
                    //var checkerPengirim = checkerPengirimList.ToList();


                    //foreach (var item in checkerPengirim)
                    //{
                    //    //select detail user
                    //    var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                    //    Tr_Checker_Table tdr = new Tr_Checker_Table();
                    //    tdr.ID_LETTER = idLetter;
                    //    tdr.ID_USER_CHECKER = item.idUserChecker;
                    //    tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                    //    tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                    //    tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                    //    tdr.ORDER_NUMBER = 1;
                    //    //tdr.APPROVAL_STATUS = 'Y';
                    //    //if (checkOrder == 1)
                    //    //{
                    //    tdr.APPROVAL_STATUS = 'Y';
                    //    //}
                    //    //else
                    //    //{
                    //    //    tdr.APPROVAL_STATUS = 'X';
                    //    //}
                    //    tdr.IS_APPROVER = 0;
                    //    tdr.CREATED_ON = DateTime.Now;
                    //    tdr.CREATED_BY = sessionUser.idUser;
                    //    tdr.MODIFIED_ON = DateTime.Now;
                    //    tdr.MODIFIED_BY = sessionUser.idUser;

                    //    db.tr_checker.Add(tdr);
                    //    db.SaveChanges();
                    //    checkOrder++;
                    //}


                    foreach (var item in checkerApprover)
                    {
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserApprover).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserApprover;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitApprover;
                        tdr.ID_LEVEL_CHECKER = item.idLevelApprover;
                        tdr.ORDER_NUMBER = 1;
                        //tdr.APPROVAL_STATUS = 'Y';
                        //if (checkOrder == 1)
                        //{
                        tdr.APPROVAL_STATUS = 'Y';
                        //}
                        //else
                        //{
                        //    tdr.APPROVAL_STATUS = 'X';
                        //}
                        tdr.IS_APPROVER = 1;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }


                    foreach (var item in checkerundermanager)
                    {
                        //select detail user
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }
                    var checkermanagerMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.idUnit && p.idLevelChecker == 6).ToList();
                    foreach (var item in checkermanagerMaker)
                    {
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkeruppermanager = checkerList.Where(p => (p.idLevelChecker == 6 && p.idUnitChecker != sessionUser.idUnit) || (p.idLevelChecker < 6 && p.idLevelChecker != 2 && p.idLevelChecker != 1)).OrderByDescending(p => p.idLevelChecker).ToList();
                    int lastLevelId = 0;
                    foreach (var item in checkeruppermanager)
                    {
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }
                    if (lastLevelId != 0)
                    {
                        ++checkOrder;
                    }
                    var checkerdirectorMaker = checkerList.Where(p => p.idUnitChecker == sessionUser.directorIdUnit && p.idLevelChecker == 2).ToList();
                    foreach (var item in checkerdirectorMaker)
                    {
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;
                        tdr.IS_APPROVER = 2;
                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }

                    var checkerdirectorelse = checkerList.Where(p => (p.idLevelChecker == 2 && p.idUnitChecker != sessionUser.directorIdUnit)).OrderByDescending(p => p.idLevelChecker).ToList();
                    lastLevelId = 0;
                    foreach (var item in checkerdirectorelse)
                    {
                        if (lastLevelId == 0)
                        {
                            lastLevelId = item.idLevelChecker;
                        }

                        if (lastLevelId != item.idLevelChecker)
                        {
                            ++checkOrder;
                            lastLevelId = item.idLevelChecker;
                        }
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();

                    }
                    var checkercommisionerMaker = checkerList.Where(p => p.idLevelChecker == 1).ToList();
                    foreach (var item in checkercommisionerMaker)
                    {
                        var dtUserChecker = db.tm_user.Where(p => p.ID_USER == item.idUserChecker).FirstOrDefault();

                        Tr_Checker_Table tdr = new Tr_Checker_Table();
                        tdr.ID_LETTER = idLetter;
                        tdr.ID_USER_CHECKER = item.idUserChecker;
                        tdr.ID_POSITION_CHECKER = dtUserChecker.ID_POSITION;
                        tdr.ID_UNIT_CHECKER = item.idUnitChecker;
                        tdr.ID_LEVEL_CHECKER = item.idLevelChecker;
                        tdr.ORDER_NUMBER = checkOrder;
                        if (checkOrder == 1)
                        {
                            tdr.APPROVAL_STATUS = 'Y';
                        }
                        else
                        {
                            tdr.APPROVAL_STATUS = 'X';
                        }
                        tdr.IS_APPROVER = 2;
                        tdr.CREATED_ON = DateTime.Now;
                        tdr.CREATED_BY = sessionUser.idUser;
                        tdr.MODIFIED_ON = DateTime.Now;
                        tdr.MODIFIED_BY = sessionUser.idUser;

                        db.tr_checker.Add(tdr);
                        db.SaveChanges();
                        checkOrder++;
                    }


                }
                var description = "Surat Keluar disimpan";
                if (pr.saveType == 2)
                {
                    description = "Surat Keluar dikirim";
                }
                if (pr.saveType == 4)
                {
                    description = "Surat Keluar disetujui";
                }
                if (pr.saveType == 5)
                {
                    description = "Surat Keluar ditolak";
                }
                InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                if (nextApproval == 1 && pr.saveType == 4)
                {
                    description = "Surat Keluar dinomori " + noLetter;
                    InsertLogLetter(idLetter, sessionUser, description, pr.comment);
                }

                output.Status = "OK";
                output.Result = idLetter;
                output.Message = "Berhasil menyimpan surat";
                if (pr.saveType == 2)
                {
                    output.Message = "Berhasil mengirim surat";
                }
                else if (pr.saveType == 4)
                {
                    output.Message = "Berhasil menyetujui surat";
                }
                else if (pr.saveType == 5)
                {
                    output.Message = "Berhasil menolak surat";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailLetterSKBackdate(ParamGetDetailLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailLetter letter = new OutputDetailLetter();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                select new LetterOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;
                    if (pr.lettertype !="66")
                    {
                        InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");
                    }
                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        select new OutputListReceiver
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    select new OutputListCopy
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetter
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachment
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionLetter
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();
                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                      join j in db.tm_position
                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                      join u in db.tm_user
                                          on c.ID_USER_SENDER equals u.ID_USER
                                      select new OutputListLetterSender
                                      {
                                          idLetterSender = c.ID_LETTER_SENDER,
                                          idPositionSender = c.ID_POSITION_SENDER,
                                          idUserSender = c.ID_USER_SENDER,
                                          idUnitSender = c.ID_UNIT_SENDER,
                                          idLevelSender = c.ID_LEVEL_SENDER,
                                          isMain = c.IS_MAIN,
                                          positionName = j.POSITION_NAME,
                                          fullname = u.FULLNAME,
                                          nip = u.NIP
                                      }).ToList();
                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 2)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListChecker
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    var ApprovalList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 1)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListApproval
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    var PengirimList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter && p.IS_APPROVER == 0)
                                        join j in db.tm_position
                                                on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on c.ID_USER_CHECKER equals u.ID_USER
                                        select new OutputListPengirim
                                        {
                                            idChecker = c.ID_CHECKER,
                                            idPositionChecker = c.ID_POSITION_CHECKER,
                                            idUserChecker = c.ID_USER_CHECKER,
                                            idUnitChecker = c.ID_UNIT_CHECKER,
                                            idLevelChecker = c.ID_LEVEL_CHECKER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME,
                                            approvalStatus = c.APPROVAL_STATUS
                                        }).ToList();
                    var outgoingRecipientList = (from a in db.tr_outgoing_recipient.Where(p => p.ID_LETTER == pr.idLetter)
                                                 select new OutputListOutgoingRecipient
                                                 {
                                                     idOutgoingRecipient = a.ID_OUTGOING_RECIPIENT,
                                                     recipientAddress = a.RECIPIENT_ADDRESS,
                                                     recipientName = a.RECIPIENT_NAME,
                                                     recipientCompany = a.RECEPIENT_COMPANY,
                                                     recipientPhoneNumber = a.RECIPIENT_NUMBER
                                                 }).ToList();
                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                         select new OutputDetailLetterContent
                                         {
                                             idContent = a.ID_CONTENT,
                                             letterContent = a.LETTER_CONTENT
                                         }).FirstOrDefault();

                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;
                    letter.sender = senderList;
                    letter.checker = checkerList;
                    letter.approval = ApprovalList;
                    letter.pengirim = PengirimList;
                    letter.outgoingRecipient = outgoingRecipientList;
                    letter.letterContent = letterContent;

                    //update status baca
                    if (pr.lettertype !="66")
                    {
                        var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                        if (tblStatus != null)
                        {
                            tblStatus.READ_STATUS = 0;
                            tblStatus.MODIFIED_ON = DateTime.Now;
                            tblStatus.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }
                   
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Letter";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail letter";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


		public GeneralOutputModel UpdateResetPassword(ParamUpdateAdminDivisi pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var dtUser = db.tm_user.Where(p => p.ID_USER == pr.idUser).FirstOrDefault();

                dtUser.PASSWORD = "MTIz";
                dtUser.MODIFIED_ON = DateTime.Now;
                dtUser.MODIFIED_BY = sessionUser.idUser;
                db.SaveChanges();
                

                output.Status = "OK";
                output.Message = "Success Update Password Reset";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetStringMapSearchInbox(ParamGetStringmap pr)
        {
            try
            {
                var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                                    && p.STATUS_CODE == 1).OrderBy(p => p.ATTRIBUTEVALUE)
                                  select new StringmapOutput
                                  {

                                      attributeValue = s.ATTRIBUTEVALUE,
                                      value = s.VALUE
                                  }).ToList();

                output.Status = "OK";
                output.Result = getMapping;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetStringmapLevelStgJbtn_(ParamGetStringmap pr)
        {
            try
            {
                var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                                    && p.STATUS_CODE == 1 ).OrderBy(p => p.ATTRIBUTEVALUE)
                                  select new StringmapOutput
                                  {

                                      attributeValue = s.ATTRIBUTEVALUE,
                                      value = s.VALUE
                                  }).ToList();

                output.Status = "OK";
                output.Result = getMapping;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetStringMapSearchOutbox_(ParamGetStringmap pr)
        {
            try
            {
                var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                                    && p.STATUS_CODE == 1  && (p.ATTRIBUTEVALUE == 2 || p.ATTRIBUTEVALUE == 6)).OrderBy(p => p.ATTRIBUTEVALUE)
                                  select new StringmapOutput
                                  {

                                      attributeValue = s.ATTRIBUTEVALUE,
                                      value = s.VALUE
                                  }).ToList();

                output.Status = "OK";
                output.Result = getMapping;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel UpdateStatusNotif(ParamUpdateNotif pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();

                var dtLetter = db.tr_notifikasi.Where(p => p.ID_NOTIFIKASI == pr.idNotif).FirstOrDefault();
                if (dtLetter != null)
                {
                    dtLetter.STATUS_READ = 1;
                    db.SaveChanges();

                    output.Status = "OK";
                    output.Result = pr.idNotif;
                    output.Message = "Success Update Notifikasi";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed update Status Notifikasi";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel PushNotifikasiToMobile_(ParamPushNotifikasi pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var getApprovalLetter = (from s in db.tr_checker.Where(p => p.ID_LETTER == pr.idletter && p.APPROVAL_STATUS =='Y')
                                         join d in db.tm_user on s.ID_USER_CHECKER equals d.ID_USER
                                         join c in db.tm_letter on s.ID_LETTER equals c.ID_LETTER
                                         select new GetDataPushNotifikasi
                                         {
                                             idOneSignal = d.ID_ONE_SIGNAL,
                                             lettertypeCode=c.LETTER_TYPE_CODE,
                                             about=c.ABOUT,
                                             fullname = d.FULLNAME

                                         }).ToList();

                output.Status = "OK";
                output.Result = getApprovalLetter;
                //output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel UpdatePasswordLoginUser_(ParamUpdatePasswordLogin pr)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                //var dtUser = db.tm_user.Where(p => p.RECOVERY_TOKEN == pr.recoveryToken).FirstOrDefault();
                //var dtUser = null;
                //if (dtUser != null)
                //{
                //    var passwordBytes = System.Text.Encoding.UTF8.GetBytes(pr.newPassword);
                //    var passwordEncode = System.Convert.ToBase64String(passwordBytes);

                //    dtUser.PASSWORD = passwordEncode;
                //    dtUser.RECOVERY_TOKEN = Guid.Empty;
                //    dtUser.MODIFIED_ON = DateTime.Now;
                //    db.SaveChanges();

                //    output.Status = "OK";
                //    output.Result = dtUser;
                //    output.Message = "Berhasil merubah password silahkan login kembali";
                //}
                //else
                //{
                //    output.Status = "NG";
                //    output.Message = "Recovery Token Tidak Valid";
                //}

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetStringMapSearchInboxWM_(ParamGetStringmap pr)
        {
            try
            {
                var getMapping = (from s in db.tm_stringmap.Where(p => p.OBJECTNAME == pr.objectName && p.ATTRIBUTENAME == pr.attributeName
                                    && p.STATUS_CODE == 1  && (p.ATTRIBUTEVALUE == 1)).OrderBy(p => p.ATTRIBUTEVALUE)
                                  select new StringmapOutput
                                  {

                                      attributeValue = s.ATTRIBUTEVALUE,
                                      value = s.VALUE
                                  }).ToList();

                output.Status = "OK";
                output.Result = getMapping;
                output.Message = "Success";
                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDetailLetterSKMobile_(ParamPriviewMobile pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailLetter letter = new OutputDetailLetter();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                select new LetterOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME
                                }).FirstOrDefault();
                if (dtLetter != null)
                {

                    var description = "Surat Telah Dibaca oleh " + sessionUser.nip + " - " + sessionUser.nama;

                    InsertLogLetter(pr.idLetter, sessionUser, description, "DIBACA");

                    var receiverList = (from r in db.tr_receiver.Where(p => p.ID_LETTER == pr.idLetter)
                                        join j in db.tm_position
                                            on r.ID_POSITION_RECEIVER equals j.ID_POSITION
                                        join u in db.tm_user
                                            on r.ID_USER_RECEIVER equals u.ID_USER
                                        select new OutputListReceiver
                                        {
                                            idReceiver = r.ID_RECEIVER,
                                            idPosition = r.ID_POSITION_RECEIVER,
                                            idUser = r.ID_USER_RECEIVER,
                                            positionName = j.POSITION_NAME,
                                            fullname = u.FULLNAME
                                        }).ToList();
                    var copyList = (from c in db.tr_copy.Where(p => p.ID_LETTER == pr.idLetter)
                                    join j in db.tm_position
                                            on c.ID_POSITION_COPY equals j.ID_POSITION
                                    join u in db.tm_user
                                        on c.ID_USER_COPY equals u.ID_USER
                                    select new OutputListCopy
                                    {
                                        idCopy = c.ID_COPY,
                                        idPosition = c.ID_POSITION_COPY,
                                        idUser = c.ID_USER_COPY,
                                        positionName = j.POSITION_NAME,
                                        fullname = u.FULLNAME
                                    }).ToList();
                    var log = (from l in db.tr_log_letter.Where(p => p.ID_LETTER == pr.idLetter).OrderByDescending(p => p.CREATED_ON)
                               select new OutputLogLetter
                               {
                                   idLogLetter = l.ID_LOG_LETTER,
                                   idLetter = l.ID_LETTER,
                                   description = l.DESCRIPTION,
                                   comment = l.COMMENT,
                                   createdOn = l.CREATED_ON
                               }).ToList();
                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachment
                                      {
                                          idAttachment = a.ID_ATTACHMENT,
                                          idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          isDocLetter = a.IS_DOC_LETTER
                                      }).ToList();

                    var disposition = (from dh in db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter)
                                       join dd in db.tr_disposition_child
                                        on dh.ID_DISPOSITION_HEADER equals dd.ID_DISPOSITION_HEADER
                                       join udh in db.tm_user
                                        on dh.ID_USER equals udh.ID_USER
                                       join pdh in db.tm_position
                                        on dh.ID_POSITION equals pdh.ID_POSITION
                                       join udd in db.tm_user
                                        on dd.ID_USER equals udd.ID_USER
                                       join pdd in db.tm_position
                                        on dd.ID_POSITION equals pdd.ID_POSITION
                                       select new OutputGetDispositionLetter
                                       {
                                           idDispositionHeader = dh.ID_DISPOSITION_HEADER,
                                           idDispositionChild = dd.ID_DISPOSITION_CHILD,
                                           idUserDispositionMaker = udh.ID_USER,
                                           idPositionDispositionMaker = pdh.ID_POSITION,
                                           fullnameDispositionMaker = udh.FULLNAME,
                                           positionDispositionMaker = pdh.POSITION_NAME,
                                           idUserDispositionReceiver = udd.ID_USER,
                                           idPositionDispositionReceiver = pdd.ID_POSITION,
                                           fullnameDispositionReceiver = udd.FULLNAME,
                                           positionDispositionReceiver = pdd.POSITION_NAME,
                                           dispositionDate = dh.DISPOSITION_DATE,
                                           notes = dd.NOTES
                                       }).OrderBy(p => p.dispositionDate).ToList();
                    var senderList = (from c in db.tr_letter_sender.Where(p => p.ID_LETTER == pr.idLetter)
                                      join j in db.tm_position
                                              on c.ID_POSITION_SENDER equals j.ID_POSITION
                                      join u in db.tm_user
                                          on c.ID_USER_SENDER equals u.ID_USER
                                      select new OutputListLetterSender
                                      {
                                          idLetterSender = c.ID_LETTER_SENDER,
                                          idPositionSender = c.ID_POSITION_SENDER,
                                          idUserSender = c.ID_USER_SENDER,
                                          idUnitSender = c.ID_UNIT_SENDER,
                                          idLevelSender = c.ID_LEVEL_SENDER,
                                          isMain = c.IS_MAIN,
                                          positionName = j.POSITION_NAME,
                                          fullname = u.FULLNAME,
                                          nip = u.NIP
                                      }).ToList();
                    var checkerList = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter)
                                       join j in db.tm_position
                                               on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                       join u in db.tm_user
                                           on c.ID_USER_CHECKER equals u.ID_USER
                                       select new OutputListChecker
                                       {
                                           idChecker = c.ID_CHECKER,
                                           idPositionChecker = c.ID_POSITION_CHECKER,
                                           idUserChecker = c.ID_USER_CHECKER,
                                           idUnitChecker = c.ID_UNIT_CHECKER,
                                           idLevelChecker = c.ID_LEVEL_CHECKER,
                                           positionName = j.POSITION_NAME,
                                           fullname = u.FULLNAME,
                                           approvalStatus = c.APPROVAL_STATUS
                                       }).ToList();
                    var outgoingRecipientList = (from a in db.tr_outgoing_recipient.Where(p => p.ID_LETTER == pr.idLetter)
                                                 select new OutputListOutgoingRecipient
                                                 {
                                                     idOutgoingRecipient = a.ID_OUTGOING_RECIPIENT,
                                                     recipientAddress = a.RECIPIENT_ADDRESS,
                                                     recipientName = a.RECIPIENT_NAME,
                                                     recipientCompany = a.RECEPIENT_COMPANY,
                                                     recipientPhoneNumber = a.RECIPIENT_NUMBER
                                                 }).ToList();
                    var letterContent = (from a in db.tr_content.Where(p => p.ID_LETTER == pr.idLetter)
                                         select new OutputDetailLetterContent
                                         {
                                             idContent = a.ID_CONTENT,
                                             letterContent = a.LETTER_CONTENT
                                         }).FirstOrDefault();

                    var checkerListDelg = (from c in db.tr_checker.Where(p => p.ID_LETTER == pr.idLetter)
                                           join j in db.tm_position
                                                   on c.ID_POSITION_CHECKER equals j.ID_POSITION
                                           join u in db.tm_user
                                               on c.ID_USER_DELEGASI equals u.ID_USER
                                           select new OutputListCheckerDelg
                                           {
                                               idChecker = c.ID_CHECKER,
                                               idPositionChecker = c.ID_POSITION_CHECKER,
                                               idUserChecker = c.ID_USER_DELEGASI,
                                               idUnitChecker = c.ID_UNIT_CHECKER,
                                               idLevelChecker = c.ID_LEVEL_CHECKER,
                                               positionName = j.POSITION_NAME,
                                               fullname = u.FULLNAME,
                                               approvalStatus = c.APPROVAL_STATUS
                                           }).ToList();

                    letter.letter = dtLetter;
                    letter.receiver = receiverList;
                    letter.copy = copyList;
                    letter.log = log;
                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);
                    letter.disposition = disposition;
                    letter.sender = senderList;
                    letter.checker = checkerList;
                    letter.outgoingRecipient = outgoingRecipientList;
                    letter.letterContent = letterContent;

                    letter.checkerDelg = checkerListDelg;

                    //update status baca
                    var tblStatus = db.tr_tbl_status.Where(p => p.ID_LETTER == pr.idLetter && p.ID_USER == sessionUser.idUser).FirstOrDefault();
                    if (tblStatus != null)
                    {
                        tblStatus.READ_STATUS = 0;
                        tblStatus.MODIFIED_ON = DateTime.Now;
                        tblStatus.MODIFIED_BY = sessionUser.idUser;

                        db.SaveChanges();
                    }
                    var disposisi = db.tr_disposition_header.Where(p => p.ID_LETTER == pr.idLetter).ToList();
                    foreach (var item in disposisi)
                    {
                        var disposisichild = db.tr_disposition_child.Where(p => p.ID_DISPOSITION_HEADER == item.ID_DISPOSITION_HEADER && p.ID_USER == sessionUser.idUser && p.ID_POSITION == sessionUser.idPosition).FirstOrDefault();
                        if (disposisichild != null)
                        {
                            disposisichild.READ_STATUS = 0;
                            disposisichild.MODIFIED_ON = DateTime.Now;
                            disposisichild.MODIFIED_BY = sessionUser.idUser;

                            db.SaveChanges();
                        }
                    }

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Letter";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail letter";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel GetDataPriviewMobile_(ParamPriviewMobile pr, SessionUser sessionUser)
        {
            try
            {

                GeneralOutputModel output = new GeneralOutputModel();
                OutputDeatilMemoMobile letter = new OutputDeatilMemoMobile();
                var checktypememo = db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter).FirstOrDefault();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                join tmp in db.tr_memo_type.Where(p => p.STATUS_CODE != 0) on l.MEMO_TYPE_ID equals tmp.ID_MEMO_TYPE

                                select new MemoOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME,
                                    memotypename = tmp.MEMO_TYPE_NAME,
                                    idmemoType = tmp.ID_MEMO_TYPE,
                                    letterDeliberationNumber = l.LETTER_DELIBERATION_NUMBER
                                }).FirstOrDefault();

                if (dtLetter != null && dtLetter.letterTypeCode != 4)
                {


                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachmentMemo
                                      {
                                          //idAttachment = a.ID_ATTACHMENT,
                                          //idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          //isDocLetter = a.IS_DOC_LETTER
                                          //urlname="http://10.22.13.34/EOFFICEBNILWEB/uploads/letter/"+a.FILENAME+""
                                          urlname="http://172.20.20.156/EOFFICEBNILWEB/uploads/letter/"+a.FILENAME+""
                                      }).ToList();




                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);


                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Memo";
                }

                else if (dtLetter != null && dtLetter.letterTypeCode == 4)
                {

                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                      select new OutputListAttachmentMemo
                                      {
                                          //idAttachment = a.ID_ATTACHMENT,
                                          //idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          //isDocLetter = a.IS_DOC_LETTER,
                                          urlname="http://10.1.19.26/EOFFICEBNILWEB/uploads/letter/"+a.FILENAME+""
                                      }).ToList();




                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);

                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Memo";
                }

                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail Memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        public GeneralOutputModel GetDetailsMemoPengadaanMobilePriview_(ParamPriviewMobile pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                OutputDetailMemoPengadaan letter = new OutputDetailMemoPengadaan();
                var dtLetter = (from l in db.tm_letter.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)
                                join d in db.tr_document
                                    on l.ID_DOCUMENT equals d.ID_DOCUMENT into z
                                from td in z.DefaultIfEmpty()
                                join ltc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "LETTER_TYPE_CODE")
                                        on l.LETTER_TYPE_CODE equals ltc.ATTRIBUTEVALUE
                                join otc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter_Memo" && p.ATTRIBUTENAME == "OUTBOX_TYPE_CODE")
                                        on l.OUTBOX_TYPE_CODE equals otc.ATTRIBUTEVALUE
                                join rtc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "RESULT_TYPE_CODE")
                                        on l.RESULT_TYPE_CODE equals rtc.ATTRIBUTEVALUE
                                join stc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tm_letter" && p.ATTRIBUTENAME == "SIGNATURE_TYPE_CODE")
                                        on l.SIGNATURE_TYPE_CODE equals stc.ATTRIBUTEVALUE
                                join j in db.tm_position
                                    on l.CREATED_BY_POSITION_ID equals j.ID_POSITION
                                join u in db.tm_user
                                    on l.CREATED_BY equals u.ID_USER
                                join tmp in db.tr_memo_type on l.MEMO_TYPE_ID equals tmp.ID_MEMO_TYPE

                                select new MemoOutput
                                {
                                    idLetter = l.ID_LETTER,
                                    idDocument = td.ID_DOCUMENT,
                                    trackingNumber = td.TRACKING_NUMBER,
                                    letterNumber = l.LETTER_NUMBER,
                                    letterDate = l.LETTER_DATE,
                                    about = l.ABOUT,
                                    attachmentDesc = l.ATTACHMENT_DESC,
                                    priority = l.PRIORITY,
                                    letterTypeCode = l.LETTER_TYPE_CODE,
                                    letterTypeValue = ltc.VALUE,
                                    senderName = l.SENDER_NAME,
                                    senderAddress = l.SENDER_ADDRESS,
                                    outboxType = l.OUTBOX_TYPE_CODE,
                                    outboxTypeCodeValue = otc.VALUE,
                                    resultType = l.RESULT_TYPE_CODE,
                                    resultTypeCodeValue = rtc.VALUE,
                                    signatureType = l.SIGNATURE_TYPE_CODE,
                                    signatureTypeCodeValue = stc.VALUE,
                                    statusCode = l.STATUS_CODE,
                                    createdByPositionId = l.CREATED_BY_POSITION_ID,
                                    positionName = j.POSITION_NAME,
                                    createdBy = l.CREATED_BY,
                                    fullname = u.FULLNAME,
                                    memotypename = tmp.MEMO_TYPE_NAME,
                                    idmemoType = tmp.ID_MEMO_TYPE,
                                }).FirstOrDefault();
                if (dtLetter != null)
                {


                    var attachment = (from a in db.tr_attachment.Where(p => p.ID_LETTER == pr.idLetter && p.STATUS_CODE != 0)

                                      select new OutputListAttachmentMemo
                                      {
                                          //idAttachment = a.ID_ATTACHMENT,
                                          //idLetter = a.ID_LETTER,
                                          filename = a.FILENAME,
                                          //isDocLetter = a.IS_DOC_LETTER
                                          urlname="http://10.1.19.26/EOFFICEBNILWEB/uploads/letter/"+a.FILENAME+""
                                      }).ToList();


                    letter.attachment = attachment.Where(p => p.isDocLetter != 1).ToList();
                    letter.docLetter = attachment.FirstOrDefault(p => p.isDocLetter == 1);


                    output.Status = "OK";
                    output.Result = letter;
                    output.Message = "Success Get Detail Memo";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Failed Get Detail Memo";
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetSearchReportDocumentNonEofficeByUser(ParamReportNonOuboxLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 1 && p.NIP == sessionUser.nip).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE == 1)
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                            join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                            join dd in db.tm_user
                                   on tl.MODIFIED_BY equals dd.ID_USER
                            select new ReportNonOutboxLetterOutput
                            {
                                nmrawb = tl.NO_AWB,
                                nmrreferen = tl.REFERENCE_NUMBER,
                                ReceiptDate = tl.RECEIPTDATE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                nip = tl.NIP,
                                unitname = tu.UNIT_NAME,
                                kodeunit = tu.UNIT_CODE,
                                letter_number = tl.LETTER_NUMBER,
                                docReceiver = tl.DOC_RECEIVER,
                                phonenumber = tl.PHONE_NUMBER,
                                address = tl.ADDRESS,
                                purposename = tl.PURPOSE_NAME,
                                statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "Dikembalikan" : tl.STATUS_SENDER == 3 ? "Selesai" : ""),
                                statuskirim = tl.STATUS_SENDER,
                                DateUntil = tl.DATE_UNTIL,
                                delivery_type = tl.DELIVERY_TYPE,
                                cretaeby = ss.FULLNAME,
                                updateby = dd.FULLNAME,

                            }).AsQueryable();
                if (pr.startDate != null && pr.endDate != null)
                {
                    data = data.Where(p => p.ReceiptDate >= pr.startDate && p.ReceiptDate <= pr.endDate);
                }
                //if (pr.delivery_type == 1)
                //{
                //    data = data.Where(p => p.delivery_type == pr.delivery_type);

                //}
                //if (pr.type_report == 1)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                //if (pr.type_report == 2)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                var docFinal = data.ToList();
                output.Status = "OK";
                output.Result = docFinal.OrderByDescending(p => p.ReceiptDate);
                output.Message = "Success get all data";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel GetSearchOutgoingLetterNumber(ParamGetReportSeacrhoutGoing pr, SessionUser sessionUser)
        {
            try
            {
                //DateTime endDates = Convert.ToDateTime(pr.endDate).AddHours(23).AddMinutes(59);
                var data = (from l in db.tm_letter.Where(p => p.STATUS_CODE == 4 && (p.LETTER_TYPE_CODE == 2 || p.LETTER_TYPE_CODE == 6))
                            join r in db.tr_letter_sender
                                on l.ID_LETTER equals r.ID_LETTER
                            join u in db.tm_user
                                on r.ID_USER_SENDER equals u.ID_USER
                            join p in db.tm_position
                                on u.ID_POSITION equals p.ID_POSITION
                            join rc in db.tr_outgoing_recipient
                                on l.ID_LETTER equals rc.ID_LETTER
                            join tu in db.tm_unit
                                on p.ID_UNIT equals tu.ID_UNIT

                            join ld in db.tr_letter_delivery
                                 on l.ID_LETTER equals ld.ID_LETTER
                            join d in db.tr_delivery
                                on ld.ID_DELIVERY equals d.ID_DELIVERY
                            join sc in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "STATUS_CODE")
                                on d.STATUS_CODE equals sc.ATTRIBUTEVALUE
                            join sh in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "SHIPPING_TYPE_CODE")
                                on d.SHIPPING_TYPE_CODE equals sh.ATTRIBUTEVALUE
                            join dt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_delivery" && p.ATTRIBUTENAME == "DELIVERY_TYPE_CODE")
                                on d.DELIVERY_TYPE_CODE equals dt.ATTRIBUTEVALUE into dt2
                            from dt3 in dt2.DefaultIfEmpty()
                            orderby l.MODIFIED_ON descending
                            select new DeliveryReportOutput
                            {
                                letterNumber = l.LETTER_NUMBER,
                                receiveDate = d.RECEIVE_DATE,
                                sender = u.FULLNAME,
                                senderDivision = tu.UNIT_NAME,
                                receiver = rc.RECIPIENT_NAME,
                                destination_receiver_name = d.DESTINATION_RECEIVER_NAME,
                                receiverAddress = rc.RECIPIENT_ADDRESS,
                                receiverPhone = rc.RECIPIENT_NUMBER,
                                statusCode = d.STATUS_CODE,
                                statusCodeValue = sc.VALUE,
                                deliveryTypeCode = d.DELIVERY_TYPE_CODE,
                                deliveryTypeCodeValue = dt3.VALUE,
                                idDelivery = ld.ID_DELIVERY,
                                shippingTypeCode = d.SHIPPING_TYPE_CODE,
                                shippingTypeCodeValue = sh.VALUE,
                                deliveryNumber = d.DELIVERY_NUMBER,
                                modifiedOn = l.MODIFIED_ON,
                                receiptNumber = d.RECEIPT_NUMBER,
                                referenceNumber = d.REFERENCE_NUMBER,
                                expedition = d.EXPEDITION,
                                drafterReadStatus = d.DRAFTER_READ_STATUS,
                                senderReadStatus = d.SENDER_READ_STATUS
                            }).AsQueryable();
                
                if (pr.trackingNumber != null)
                {
                    output.Result = data.Where(p => p.letterNumber == pr.trackingNumber || p.receiptNumber == pr.trackingNumber);
                }
                //if (pr.statusElse != 0)
                //{
                //    output.Result = data.OrderByDescending(p => p.modifiedOn).Where(p => p.statusCode != pr.statusElse).ToList();
                //}
                //else
                //{
                //    output.Result = data.OrderByDescending(p => p.modifiedOn).ToList();
                //}
                output.Status = "OK";
                output.Message = "Berhasil mengambil data pengiriman";

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }



        public GeneralOutputModel SearchSuratKeluarKurirNonEoffice(ParamReportNonOuboxLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null).OrderByDescending(p => p.RECEIPTDATE).OrderBy(p => p.STATUS_CODE == 1)
                            join st in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "DELIVERY_TYPE")
                                   on tl.REPORT_TYPE equals st.ATTRIBUTEVALUE
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                            join stt in db.tm_stringmap.Where(p => p.OBJECTNAME == "tr_letter_noneoffice" && p.ATTRIBUTENAME == "STATUS_SEND")
                                   on tl.STATUS_SENDER equals stt.ATTRIBUTEVALUE
                            join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                            join dd in db.tm_user
                                   on tl.MODIFIED_BY equals dd.ID_USER
                            select new ReportNonOutboxLetterOutput
                            {
                                nmrawb = tl.NO_AWB,
                                letter_number = tl.LETTER_NUMBER,
                                deliveryname = st.VALUE,
                                ReceiptDate = tl.RECEIPTDATE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                unitname = tu.UNIT_NAME,
                                docReceiver = tl.DOC_RECEIVER,
                                statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "Dikembalikan" : tl.STATUS_SENDER == 3 ? "Selesai Antar" : ""),
                                nmrreferen = tl.REFERENCE_NUMBER,
                                address = tl.ADDRESS,
                                purposename = tl.PURPOSE_NAME,
                                tgluntil = Convert.ToDateTime(tl.DATE_UNTIL).ToString("dd/MM/yyyy"),
                                delivery_type = tl.DELIVERY_TYPE,
                                phonenumber = tl.PHONE_NUMBER,
                                cretaeby = ss.FULLNAME,
                                updateby = dd.FULLNAME,
                                type_report = tl.REPORT_TYPE,
                                nmresi=tl.QRCODE_NUMBER,
                                nip = tl.NIP,
                                statuskirim = tl.STATUS_SENDER,
                                DateUntil = tl.DATE_UNTIL

                            }).AsQueryable();
                if (pr.trackingNumber != null)
                {
                    data = data.Where(p => p.letter_number == pr.trackingNumber || p.nmresi ==pr.trackingNumber );
                }
                
               
                int targetValue = 0;
                var docFinal = data.ToList();
                if (docFinal.Count == targetValue)
                {
                    var data1 = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 1 || p.DELIVERY_TYPE == 2).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE == 1)
                                join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                                join ss in db.tm_user
                                       on tl.CREATED_BY equals ss.ID_USER
                                join dd in db.tm_user
                                       on tl.MODIFIED_BY equals dd.ID_USER
                                select new ReportNonOutboxLetterOutput
                                {
                                    nmrawb = tl.NO_AWB,
                                    nmrreferen = tl.REFERENCE_NUMBER,
                                    ReceiptDate = tl.RECEIPTDATE,
                                    expedition_name = tl.EXPEDITION_NAME,
                                    sender_name = tl.SENDER_NAME,
                                    nip = tl.NIP,
                                    unitname = tu.UNIT_NAME,
                                    kodeunit = tu.UNIT_CODE,
                                    letter_number = tl.LETTER_NUMBER,
                                    docReceiver = tl.DOC_RECEIVER,
                                    phonenumber = tl.PHONE_NUMBER,
                                    address = tl.ADDRESS,
                                    purposename = tl.PURPOSE_NAME,
                                    statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "Dikembalikan" : tl.STATUS_SENDER == 3 ? "Selesai/Sampai" : ""),
                                    statuskirim = tl.STATUS_SENDER,
                                    DateUntil = tl.DATE_UNTIL,
                                    delivery_type = tl.DELIVERY_TYPE,
                                    cretaeby = ss.FULLNAME,
                                    updateby = dd.FULLNAME,
                                    nmresi=tl.QRCODE_NUMBER

                                }).AsQueryable();
                    if (pr.trackingNumber != null)
                    {
                        data1 = data1.Where(p => p.letter_number == pr.trackingNumber || p.nmrawb == pr.trackingNumber || p.nmrreferen == pr.trackingNumber);
                    }
                    var docFinal1 = data1.ToList();
                    output.Status = "OK";
                    output.Result = docFinal1.OrderByDescending(p => p.ReceiptDate);

                    output.Message = "Success get all data";

                    return output;
                }
                output.Status = "OK";
                output.Result = docFinal.OrderByDescending(p => p.ReceiptDate);

                output.Message = "Success get all data";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }


        public GeneralOutputModel SearchSuratKeluarEkspedisiNonEoffice(ParamReportNonOuboxLetter pr, SessionUser sessionUser)
        {
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                var data = (from tl in db.tr_letter_noneoffice.Where(p => p.LETTER_NUMBER != null && p.DELIVERY_TYPE == 1 || p.DELIVERY_TYPE == 2).OrderByDescending(p => p.MODIFIED_ON).OrderBy(p => p.STATUS_CODE == 1)
                            join tu in db.tm_unit.Where(p => p.STATUS_CODE == 1) on tl.ID_UNIT equals tu.ID_UNIT
                            join ss in db.tm_user
                                   on tl.CREATED_BY equals ss.ID_USER
                            join dd in db.tm_user
                                   on tl.MODIFIED_BY equals dd.ID_USER
                            select new ReportNonOutboxLetterOutput
                            {
                                nmrawb = tl.NO_AWB,
                                nmrreferen = tl.REFERENCE_NUMBER,
                                ReceiptDate = tl.RECEIPTDATE,
                                expedition_name = tl.EXPEDITION_NAME,
                                sender_name = tl.SENDER_NAME,
                                nip = tl.NIP,
                                unitname = tu.UNIT_NAME,
                                kodeunit = tu.UNIT_CODE,
                                letter_number = tl.LETTER_NUMBER,
                                docReceiver = tl.DOC_RECEIVER,
                                phonenumber = tl.PHONE_NUMBER,
                                address = tl.ADDRESS,
                                purposename = tl.PURPOSE_NAME,
                                statusname = (tl.STATUS_SENDER == 1 ? "Proses" : tl.STATUS_SENDER == 2 ? "Dikembalikan" : tl.STATUS_SENDER == 3 ? "Selesai/Sampai" : ""),
                                statuskirim = tl.STATUS_SENDER,
                                DateUntil = tl.DATE_UNTIL,
                                delivery_type = tl.DELIVERY_TYPE,
                                cretaeby = ss.FULLNAME,
                                updateby = dd.FULLNAME,
                                nmresi=tl.QRCODE_NUMBER

                            }).AsQueryable();
                if (pr.trackingNumber != null)
                {
                    data = data.Where(p => p.letter_number == pr.trackingNumber || p.nmrawb == pr.trackingNumber);
                }
                //if (pr.delivery_type == 1)
                //{
                //    data = data.Where(p => p.delivery_type == pr.delivery_type);

                //}
                //if (pr.type_report == 1)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                //if (pr.type_report == 2)
                //{
                //    data = data.Where(p => p.type_report == pr.type_report);
                //}
                var docFinal = data.ToList();
                output.Status = "OK";
                output.Result = docFinal.OrderByDescending(p => p.ReceiptDate);
                output.Message = "Success get all data";

                return output;

            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();

                return output;
            }
        }

        #region Api

        public GeneralOutputModel SyncUserHCIS(ParamSyncHCIS jsonData)
        {
            Guid idLogSync = Guid.Empty;
            try
            {
                GeneralOutputModel output = new GeneralOutputModel();
                List<OutputSyncHCIS> outputSync = new List<OutputSyncHCIS>();
                var jsonSerializejsonData = JsonConvert.SerializeObject(jsonData);

                //insert log Sync
                Tr_Log_Sync_Table logSync = new Tr_Log_Sync_Table();
                logSync.REQUEST_JSON = jsonSerializejsonData;
                logSync.SYNC_TYPE_CODE = 1;
                logSync.CREATED_ON = DateTime.Now;
                logSync.MODIFIED_ON = DateTime.Now;
                logSync.METHOD = "Pegawai";

                db.tr_log_sync.Add(logSync);
                db.SaveChanges();

                idLogSync = logSync.ID_LOG_SYNC;

                //var json = JsonConvert.DeserializeObject<ParamSyncHCIS>(jsonData);
                var dataJson = jsonData.JSON.data;
                var passwordBytes = System.Text.Encoding.UTF8.GetBytes("123456");
                var passwordEncode = System.Convert.ToBase64String(passwordBytes);
                if (dataJson.Count() > 0)
                {
                    foreach (var item in dataJson)
                    {
                        var dtUser = db.tm_user.Where(p => p.NIP == item.EmployeeNo).FirstOrDefault();
                        var dtPosition = db.tm_position.Where(p => p.POSITION_CODE == item.PositionCode).FirstOrDefault();

                        string phoneNumberString = item.PhoneNumber == "" ? "0" : item.PhoneNumber;
                        if (dtUser != null)
                        {
                            if (dtPosition != null)
                            {
                                dtUser.NIP = item.EmployeeNo;
                                dtUser.USERNAME = item.EmployeeNo;
                                dtUser.FULLNAME = item.EmployeeName;
                                dtUser.EMAIL = item.Email;
                                dtUser.PHONE = Convert.ToInt64(phoneNumberString);
                                dtUser.STATUS_CODE = item.Status;
                                dtUser.MODIFIED_ON = DateTime.Now;

                                db.SaveChanges();

                                outputSync.Add(new OutputSyncHCIS
                                {
                                    EmployeeNo = item.EmployeeNo,
                                    EmployeeName = item.EmployeeName,
                                    Email = item.Email,
                                    PositionCode = item.PositionCode,
                                    PhoneUser = item.PhoneNumber,
                                    Status = item.Status,
                                    StatusSync = "Data User berhasil di Update"
                                });
                            }
                            else
                            {
                                outputSync.Add(new OutputSyncHCIS
                                {
                                    EmployeeNo = item.EmployeeNo,
                                    EmployeeName = item.EmployeeName,
                                    Email = item.Email,
                                    PositionCode = item.PositionCode,
                                    PhoneUser = item.PhoneNumber,
                                    Status = item.Status,
                                    StatusSync = "Position Code Tidak ditemukan"
                                });
                            }
                        }
                        else
                        {
                            if (dtPosition != null)
                            {
                                Tm_User_Table userNew = new Tm_User_Table();
                                userNew.NIP = item.EmployeeNo;
                                userNew.USERNAME = item.EmployeeNo;
                                userNew.FULLNAME = item.EmployeeName;
                                userNew.ID_POSITION = dtPosition.ID_POSITION;
                                userNew.PASSWORD = passwordEncode;
                                userNew.ID_GROUP = "U";
                                userNew.EMAIL = item.Email;
                                userNew.PHONE = Convert.ToInt64(phoneNumberString);
                                userNew.STATUS_CODE = item.Status;
                                userNew.CREATED_ON = DateTime.Now;
                                userNew.MODIFIED_ON = DateTime.Now;

                                db.tm_user.Add(userNew);
                                db.SaveChanges();

                                outputSync.Add(new OutputSyncHCIS
                                {
                                    EmployeeNo = item.EmployeeNo,
                                    EmployeeName = item.EmployeeName,
                                    Email = item.Email,
                                    PositionCode = item.PositionCode,
                                    PhoneUser = item.PhoneNumber,
                                    Status = item.Status,
                                    StatusSync = "Data User berhasil di tambahkan"
                                });
                            }
                            else
                            {
                                outputSync.Add(new OutputSyncHCIS
                                {
                                    EmployeeNo = item.EmployeeNo,
                                    EmployeeName = item.EmployeeName,
                                    Email = item.Email,
                                    PositionCode = item.PositionCode,
                                    PhoneUser = item.PhoneNumber,
                                    Status = item.Status,
                                    StatusSync = "Position Code Tidak ditemukan"
                                });
                            }

                        }
                    }

                    output.Status = "OK";
                    output.Result = outputSync;
                    output.Message = "Success Update User";
                }
                else
                {
                    output.Status = "NG";
                    output.Message = "Data Request Kosong";
                }
                var jsonSerialize = JsonConvert.SerializeObject(output);
                //update log
                var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
                if (getLog != null)
                {
                    getLog.RESPONSE_JSON = jsonSerialize;
                    getLog.MODIFIED_ON = DateTime.Now;

                    db.SaveChanges();
                }

                return output;
            }
            catch (Exception ex)
            {
                output.Status = "NG";
                output.Message = ex.ToString();
                var jsonSerialize = JsonConvert.SerializeObject(output);
                //update log
                var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
                if (getLog != null)
                {
                    getLog.RESPONSE_JSON = jsonSerialize;
                    getLog.MODIFIED_ON = DateTime.Now;

                    db.SaveChanges();
                }

                return output;
            }
        }


        //public GeneralOutputModel SyncDivisiHCIS(ParamSyncDivisiHCIS jsonData)
        //{
        //    Guid idLogSync = Guid.Empty;
        //    try
        //    {
        //        GeneralOutputModel output = new GeneralOutputModel();
        //        List<OutputSyncDivisiHCIS> outputSync = new List<OutputSyncDivisiHCIS>();
        //        var jsonSerializejsonData = JsonConvert.SerializeObject(jsonData);

        //        //insert log Sync
        //        Tr_Log_Sync_Table logSync = new Tr_Log_Sync_Table();
        //        logSync.REQUEST_JSON = jsonSerializejsonData;
        //        logSync.SYNC_TYPE_CODE = 1;
        //        logSync.CREATED_ON = DateTime.Now;
        //        logSync.MODIFIED_ON = DateTime.Now;
        //        logSync.METHOD = "Divisi";
        //        db.tr_log_sync.Add(logSync);
        //        db.SaveChanges();

        //        idLogSync = logSync.ID_LOG_SYNC;

        //        //var json = JsonConvert.DeserializeObject<ParamSyncHCIS>(jsonData);
        //        var dataJson = jsonData.JSON.data;
        //        var passwordBytes = System.Text.Encoding.UTF8.GetBytes("123456");
        //        var passwordEncode = System.Convert.ToBase64String(passwordBytes);
        //        if (dataJson.Count() > 0)
        //        {
        //            foreach (var item in dataJson)
        //            {
        //                var dtDiv = db.tm_unit.Where(p => p.UNIT_CODE == item.unit_code).FirstOrDefault();
        //                //var dtPosition = db.tm_position.Where(p => p.POSITION_CODE == item.PositionCode).FirstOrDefault();

        //                //string phoneNumberString = item.PhoneNumber == "" ? "0" : item.PhoneNumber;
        //                if (dtDiv != null || dtDiv.UNIT_CODE_OLD == null || dtDiv.UNIT_CODE_OLD !=null)
        //                {
        //                    dtDiv.UNIT_CODE = item.unit_code;
        //                    dtDiv.UNIT_CODE = dtDiv.UNIT_CODE_OLD != dtDiv.UNIT_CODE ? dtDiv.UNIT_CODE_OLD : dtDiv.UNIT_CODE_OLD == dtDiv.UNIT_CODE ? dtDiv.UNIT_CODE : dtDiv.UNIT_CODE_OLD == null ? dtDiv.UNIT_CODE : dtDiv.UNIT_CODE_OLD  == "" ? dtDiv.UNIT_CODE : dtDiv.UNIT_CODE;
        //                    dtDiv.UNIT_NAME = item.unit_name;
        //                    dtDiv.UNIT_TYPE = item.unit_type;
        //                    //dtDiv.UNIT_CODE_SUPERIOR = item.code_atasan;
        //                    //dtDiv.UNIT_CODE_OLD = item.unit_code_old;
        //                    dtDiv.STATUS_CODE = item.Status;
        //                    dtDiv.CREATED_ON = DateTime.Now;
        //                    dtDiv.MODIFIED_ON = DateTime.Now;

        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncDivisiHCIS
        //                    {
        //                        unit_code = item.unit_code,
        //                        unit_name = item.unit_name,
        //                        unit_type = item.unit_type,
        //                        code_atasan = item.code_atasan,
        //                        unit_code_old = item.unit_code_old,
        //                        Status = item.Status,
        //                        StatusSync = "Data Divsi berhasil di Update"
        //                    });
        //                }
        //                else
        //                {



        //                    Tm_Unit_Table UntiNew = new Tm_Unit_Table();

        //                    UntiNew.UNIT_CODE = item.unit_code;
        //                    UntiNew.UNIT_NAME = item.unit_name;
        //                    UntiNew.UNIT_TYPE = item.unit_type;
        //                    //UntiNew.UNIT_CODE_SUPERIOR = item.code_atasan;
        //                    //UntiNew.UNIT_CODE_OLD = item.unit_code_old;
        //                    UntiNew.STATUS_CODE = item.Status;
        //                    UntiNew.CREATED_ON = DateTime.Now;
        //                    UntiNew.MODIFIED_ON = DateTime.Now;
        //                    db.tm_unit.Add(UntiNew);
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncDivisiHCIS
        //                    {
        //                        unit_code = item.unit_code,
        //                        unit_name = item.unit_name,
        //                        unit_type = item.unit_type,
        //                        code_atasan = item.code_atasan,
        //                        unit_code_old = item.unit_code_old,
        //                        Status = item.Status,
        //                        StatusSync = "Data Divsi berhasil di tambahkan"
        //                    });

        //                }
        //            }

        //            output.Status = "OK";
        //            output.Result = outputSync;
        //            output.Message = "Success";
        //        }
        //        else
        //        {
        //            output.Status = "NG";
        //            output.Message = "Data Request Kosong";
        //        }
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //    catch (Exception ex)
        //    {
        //        output.Status = "NG";
        //        output.Message = ex.ToString();
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //}


        //public GeneralOutputModel SyncPositionHCIS(ParamSyncPositionHCIS jsonData)
        //{
        //    Guid idLogSync = Guid.Empty;
        //    try
        //    {
        //        GeneralOutputModel output = new GeneralOutputModel();
        //        List<OutputSyncPositionHCIS> outputSync = new List<OutputSyncPositionHCIS>();
        //        var jsonSerializejsonData = JsonConvert.SerializeObject(jsonData);

        //        //insert log Sync
        //        Tr_Log_Sync_Table logSync = new Tr_Log_Sync_Table();
        //        logSync.REQUEST_JSON = jsonSerializejsonData;
        //        logSync.SYNC_TYPE_CODE = 1;
        //        logSync.CREATED_ON = DateTime.Now;
        //        logSync.MODIFIED_ON = DateTime.Now;
        //        logSync.METHOD = "Position";
        //        db.tr_log_sync.Add(logSync);
        //        db.SaveChanges();

        //        idLogSync = logSync.ID_LOG_SYNC;

        //        //var json = JsonConvert.DeserializeObject<ParamSyncHCIS>(jsonData);
        //        var dataJson = jsonData.JSON.data;
        //        var passwordBytes = System.Text.Encoding.UTF8.GetBytes("123456");
        //        var passwordEncode = System.Convert.ToBase64String(passwordBytes);
        //        if (dataJson.Count() > 0)
        //        {
        //            foreach (var item in dataJson)
        //            {
        //                var dtPosition = db.tm_position.Where(p => p.POSITION_CODE == item.position_code).FirstOrDefault();
        //                //var dtPosition = db.tm_position.Where(p => p.POSITION_CODE == item.PositionCode).FirstOrDefault();

        //                //string phoneNumberString = item.PhoneNumber == "" ? "0" : item.PhoneNumber;
        //                if (dtPosition != null  || dtPosition.POSITION_CODE_OLD != null || dtPosition.POSITION_CODE_OLD == null)
        //                {



        //                    dtPosition.POSITION_CODE = dtPosition.POSITION_CODE_OLD != dtPosition.POSITION_CODE ? dtPosition.POSITION_CODE : dtPosition.POSITION_CODE_OLD == dtPosition.POSITION_CODE ? dtPosition.POSITION_CODE : dtPosition.POSITION_CODE_OLD == null ? dtPosition.POSITION_CODE : dtPosition.POSITION_CODE_OLD == "" ? dtPosition.POSITION_CODE : dtPosition.POSITION_CODE;
        //                    dtPosition.POSITION_NAME = item.position_name;
        //                    dtPosition.POSITION_CODE_SUPERIOR = item.code_atasan;
        //                    dtPosition.POSITION_CODE_OLD = item.position_code_old;
        //                    dtPosition.UNIT_CODE = item.unit_code;
        //                    dtPosition.STATUS_CODE = item.Status;
        //                    dtPosition.LEVEL = item.level;
        //                    dtPosition.CREATED_ON = DateTime.Now;
        //                    dtPosition.MODIFIED_ON = DateTime.Now;
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncPositionHCIS
        //                    {
        //                        position_code = item.position_code,
        //                        position_name = item.position_name,
        //                        code_atasan = item.code_atasan,
        //                        position_code_old = item.position_code_old,
        //                        unit_code = item.unit_code,
        //                        level = item.level,
        //                        Status = item.Status,
        //                        StatusSync = "Data Jabatan berhasil di Update"
        //                    });
        //                }
        //                else
        //                {



        //                    Tm_Position_Table PositionNew = new Tm_Position_Table();

        //                    PositionNew.POSITION_CODE = item.position_code;
        //                    PositionNew.POSITION_NAME = item.position_name;
        //                    PositionNew.POSITION_CODE_SUPERIOR = item.code_atasan;
        //                    PositionNew.POSITION_CODE_OLD = item.position_code_old;
        //                    PositionNew.UNIT_CODE = item.unit_code;
        //                    PositionNew.STATUS_CODE = item.Status;
        //                    PositionNew.LEVEL = item.level;
        //                    PositionNew.CREATED_ON = DateTime.Now;
        //                    PositionNew.MODIFIED_ON = DateTime.Now;
        //                    db.tm_position.Add(PositionNew);
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncPositionHCIS
        //                    {
        //                        position_code = item.position_code,
        //                        position_name = item.position_name,
        //                        code_atasan = item.code_atasan,
        //                        position_code_old = item.position_code_old,
        //                        unit_code = item.unit_code,
        //                        Status = item.Status,
        //                        level = item.level,
        //                        StatusSync = "Data Jabatan berhasil di tambahkan"
        //                    });

        //                }
        //            }

        //            output.Status = "OK";
        //            output.Result = outputSync;
        //            output.Message = "Success";
        //        }
        //        else
        //        {
        //            output.Status = "NG";
        //            output.Message = "Data Request Kosong";
        //        }
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //    catch (Exception ex)
        //    {
        //        output.Status = "NG";
        //        output.Message = ex.ToString();
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //}


        //public GeneralOutputModel SyncCutiHCIS(ParamSyncCutiHCIS jsonData)
        //{
        //    Guid idLogSync = Guid.Empty;
        //    try
        //    {
        //        GeneralOutputModel output = new GeneralOutputModel();
        //        List<OutputSyncCutiHCIS> outputSync = new List<OutputSyncCutiHCIS>();
        //        var jsonSerializejsonData = JsonConvert.SerializeObject(jsonData);

        //        //insert log Sync
        //        Tr_Log_Sync_Table logSync = new Tr_Log_Sync_Table();
        //        logSync.REQUEST_JSON = jsonSerializejsonData;
        //        logSync.SYNC_TYPE_CODE = 1;
        //        logSync.CREATED_ON = DateTime.Now;
        //        logSync.MODIFIED_ON = DateTime.Now;
        //        logSync.METHOD = "Cuti";
        //        db.tr_log_sync.Add(logSync);
        //        db.SaveChanges();

        //        idLogSync = logSync.ID_LOG_SYNC;

        //        //var json = JsonConvert.DeserializeObject<ParamSyncHCIS>(jsonData);
        //        var dataJson = jsonData.JSON.data;
        //        var passwordBytes = System.Text.Encoding.UTF8.GetBytes("123456");
        //        var passwordEncode = System.Convert.ToBase64String(passwordBytes);
        //        if (dataJson.Count() > 0)
        //        {
        //            foreach (var item in dataJson)
        //            {
        //                var dtCuti = db.tm_cuti.Where(p => p.NIP == item.nip).FirstOrDefault();


        //                if (dtCuti != null)
        //                {
        //                    dtCuti.NIP = item.nip;
        //                    dtCuti.DESCRIPTION = item.Description;
        //                    dtCuti.STATUS = item.Status;
        //                    dtCuti.STARTDATE = item.StartDate;
        //                    dtCuti.ENDDATE = item.EndDate;
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncCutiHCIS
        //                    {
        //                        nip = item.nip,
        //                        Description = item.Description,
        //                        Status = item.Status,
        //                        StartDate = item.StartDate,
        //                        EndDate = item.EndDate,
        //                        StatusSync = "Data Cuti berhasil di Update"
        //                    });
        //                }
        //                else
        //                {
        //                    Tm_Cuti_Table cutiNew = new Tm_Cuti_Table();
        //                    cutiNew.NIP = item.nip;
        //                    cutiNew.DESCRIPTION = item.Description;
        //                    cutiNew.STATUS = item.Status;
        //                    cutiNew.STARTDATE = item.StartDate;
        //                    cutiNew.ENDDATE = item.EndDate;

        //                    db.tm_cuti.Add(cutiNew);
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncCutiHCIS
        //                    {
        //                        nip = item.nip,
        //                        Description = item.Description,
        //                        Status =item.Status,
        //                        StartDate = item.StartDate,
        //                        EndDate = item.EndDate,
        //                        StatusSync = "Data User berhasil di tambahkan"
        //                    });

        //                }
        //            }

        //            output.Status = "OK";
        //            output.Result = outputSync;
        //            output.Message = "Success";
        //        }
        //        else
        //        {
        //            output.Status = "NG";
        //            output.Message = "Data Request Kosong";
        //        }
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //    catch (Exception ex)
        //    {
        //        output.Status = "NG";
        //        output.Message = ex.ToString();
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //}


        //public GeneralOutputModel SyncDelegasiHCIS(ParamSyncDelegasiHCIS jsonData)
        //{
        //    Guid idLogSync = Guid.Empty;
        //    try
        //    {
        //        GeneralOutputModel output = new GeneralOutputModel();
        //        List<OutputSyncDelegasiHCIS> outputSync = new List<OutputSyncDelegasiHCIS>();
        //        var jsonSerializejsonData = JsonConvert.SerializeObject(jsonData);

        //        //insert log Sync
        //        Tr_Log_Sync_Table logSync = new Tr_Log_Sync_Table();
        //        logSync.REQUEST_JSON = jsonSerializejsonData;
        //        logSync.SYNC_TYPE_CODE = 1;
        //        logSync.CREATED_ON = DateTime.Now;
        //        logSync.MODIFIED_ON = DateTime.Now;
        //        logSync.METHOD = "Delegasi";
        //        db.tr_log_sync.Add(logSync);
        //        db.SaveChanges();

        //        idLogSync = logSync.ID_LOG_SYNC;

        //        //var json = JsonConvert.DeserializeObject<ParamSyncHCIS>(jsonData);
        //        var dataJson = jsonData.JSON.data;
        //        var passwordBytes = System.Text.Encoding.UTF8.GetBytes("123456");
        //        var passwordEncode = System.Convert.ToBase64String(passwordBytes);
        //        if (dataJson.Count() > 0)
        //        {
        //            foreach (var item in dataJson)
        //            {
        //                var dtDelegasi = db.tm_delegasi.Where(p => p.NIP_PENGAJUAN == item.nip_pengajuan).FirstOrDefault();


        //                if (dtDelegasi != null)
        //                {
        //                    dtDelegasi.NIP_PENGAJUAN = item.nip_pengajuan;
        //                    dtDelegasi.NAMA_PENGAJUAN = item.nama_pengajuan;
        //                    dtDelegasi.NIP_DELEGASI = item.nip_delegasi;
        //                    dtDelegasi.NAMA_DELEGASI = item.nama_delegasi;
        //                    dtDelegasi.STARTDATE = item.StartDate;
        //                    dtDelegasi.ENDDATE = item.EndDate;
        //                    dtDelegasi.STATUS = item.Status;
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncDelegasiHCIS
        //                    {
        //                        nip_pengajuan = item.nip_pengajuan,
        //                        nama_pengajuan = item.nama_pengajuan,
        //                        nip_delegasi = item.nip_delegasi,
        //                        nama_delegasi = item.nama_delegasi,
        //                        StartDate = item.StartDate,
        //                        EndDate = item.EndDate,
        //                        Status = item.Status,
        //                        StatusSync = "Data Delegasi berhasil di Update"
        //                    });
        //                }
        //                else
        //                {
        //                    Tm_Delegasi_Table delegasiNew = new Tm_Delegasi_Table();
        //                    delegasiNew.NIP_PENGAJUAN = item.nip_pengajuan;
        //                    delegasiNew.NAMA_PENGAJUAN = item.nama_pengajuan;
        //                    delegasiNew.NIP_DELEGASI = item.nip_delegasi;
        //                    delegasiNew.NAMA_DELEGASI = item.nama_delegasi;
        //                    delegasiNew.STARTDATE = item.StartDate;
        //                    delegasiNew.ENDDATE = item.EndDate;
        //                    db.tm_delegasi.Add(delegasiNew);
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncDelegasiHCIS
        //                    {
        //                        nip_pengajuan = item.nip_pengajuan,
        //                        nama_pengajuan = item.nama_pengajuan,
        //                        nip_delegasi = item.nip_delegasi,
        //                        nama_delegasi = item.nama_delegasi,
        //                        StartDate = item.StartDate,
        //                        EndDate = item.EndDate,
        //                        StatusSync = "Data Delegasi berhasil di tambahkan"
        //                    });

        //                }
        //            }

        //            output.Status = "OK";
        //            output.Result = outputSync;
        //            output.Message = "Success";
        //        }
        //        else
        //        {
        //            output.Status = "NG";
        //            output.Message = "Data Request Kosong";
        //        }
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //    catch (Exception ex)
        //    {
        //        output.Status = "NG";
        //        output.Message = ex.ToString();
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //}


        //public GeneralOutputModel SyncAbsenHCIS(ParamSyncAbsenHCIS jsonData)
        //{
        //    Guid idLogSync = Guid.Empty;
        //    try
        //    {
        //        GeneralOutputModel output = new GeneralOutputModel();
        //        List<OutputSyncAbsenHCIS> outputSync = new List<OutputSyncAbsenHCIS>();
        //        var jsonSerializejsonData = JsonConvert.SerializeObject(jsonData);

        //        //insert log Sync
        //        Tr_Log_Sync_Table logSync = new Tr_Log_Sync_Table();
        //        logSync.REQUEST_JSON = jsonSerializejsonData;
        //        logSync.SYNC_TYPE_CODE = 1;
        //        logSync.CREATED_ON = DateTime.Now;
        //        logSync.MODIFIED_ON = DateTime.Now;
        //        logSync.METHOD = "Absen";
        //        db.tr_log_sync.Add(logSync);
        //        db.SaveChanges();

        //        idLogSync = logSync.ID_LOG_SYNC;

        //        //var json = JsonConvert.DeserializeObject<ParamSyncHCIS>(jsonData);
        //        var dataJson = jsonData.JSON.data;
        //        var passwordBytes = System.Text.Encoding.UTF8.GetBytes("123456");
        //        var passwordEncode = System.Convert.ToBase64String(passwordBytes);
        //        if (dataJson.Count() > 0)
        //        {
        //            foreach (var item in dataJson)
        //            {
        //                var dtAbsen = db.tm_absen.Where(p => p.NIP == item.nip).FirstOrDefault();


        //                if (dtAbsen != null)
        //                {
        //                    dtAbsen.NIP = item.nip;
        //                    dtAbsen.STATUS = item.Status;
        //                    dtAbsen.DATE = item.Date;
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncAbsenHCIS
        //                    {
        //                        nip = item.nip,
        //                        Status = item.Status,
        //                        Date = item.Date,
        //                        StatusSync = "Data Absen berhasil di Update"
        //                    });
        //                }
        //                else
        //                {
        //                    Tm_Absen_Table absenNew = new Tm_Absen_Table();
        //                    absenNew.NIP = item.nip;
        //                    absenNew.STATUS = item.Status;
        //                    absenNew.DATE = item.Date;

        //                    db.tm_absen.Add(absenNew);
        //                    db.SaveChanges();

        //                    outputSync.Add(new OutputSyncAbsenHCIS
        //                    {
        //                        nip = item.nip,
        //                        Status =item.Status,
        //                        Date = item.Date,
        //                        StatusSync = "Data Absen berhasil di tambahkan"
        //                    });

        //                }
        //            }

        //            output.Status = "OK";
        //            output.Result = outputSync;
        //            output.Message = "Success";
        //        }
        //        else
        //        {
        //            output.Status = "NG";
        //            output.Message = "Data Request Kosong";
        //        }
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //    catch (Exception ex)
        //    {
        //        output.Status = "NG";
        //        output.Message = ex.ToString();
        //        var jsonSerialize = JsonConvert.SerializeObject(output);
        //        //update log
        //        var getLog = db.tr_log_sync.Where(p => p.ID_LOG_SYNC == idLogSync).FirstOrDefault();
        //        if (getLog != null)
        //        {
        //            getLog.RESPONSE_JSON = jsonSerialize;
        //            getLog.MODIFIED_ON = DateTime.Now;

        //            db.SaveChanges();
        //        }

        //        return output;
        //    }
        //}


        #endregion
    }


}